// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import ease from 'tween-functions';
var Tween = /*#__PURE__*/function () {
  function Tween(_ref) {
    var _this = this;
    var duration = _ref.duration,
      from = _ref.from,
      to = _ref.to,
      delay = _ref.delay,
      onUpdate = _ref.onUpdate,
      onComplete = _ref.onComplete;
    this._frameCallback = function () {
      _this.timeoutID = undefined;
      _this.requestID = undefined;
      var current = Object.freeze(_this.getCurrent());
      if (_this.onUpdate) {
        _this.onUpdate(current);
      }
      if (_this.onComplete && current.done) {
        _this.onComplete(current);
      }
      if (current.done) {
        _this.onComplete = undefined;
        _this.onUpdate = undefined;
      } else {
        _this.requestID = window.requestAnimationFrame(_this._frameCallback);
      }
    };
    this.startTime = Date.now() + (delay || 0);
    this.duration = duration;
    this.from = from;
    this.to = to;
    if (!onUpdate && !onComplete) {
      this.onComplete = undefined;
      this.onUpdate = undefined;
      this.timeoutID = undefined;
      this.requestID = undefined;
    } else {
      this.onComplete = onComplete;
      this.onUpdate = onUpdate;
      if (delay) {
        // setTimeout from @types/node returns NodeJS.Timeout, so prefix with `window.`
        this.timeoutID = window.setTimeout(this._frameCallback, delay);
        this.requestID = undefined;
      } else {
        this.requestID = window.requestAnimationFrame(this._frameCallback);
        this.timeoutID = undefined;
      }
    }
  }
  var _proto = Tween.prototype;
  _proto.cancel = function cancel() {
    if (this.timeoutID != null) {
      clearTimeout(this.timeoutID);
      this.timeoutID = undefined;
    }
    if (this.requestID != null) {
      window.cancelAnimationFrame(this.requestID);
      this.requestID = undefined;
    }
    this.onComplete = undefined;
    this.onUpdate = undefined;
  };
  _proto.getCurrent = function getCurrent() {
    var t = Date.now() - this.startTime;
    if (t <= 0) {
      // still in the delay period
      return {
        done: false,
        value: this.from
      };
    }
    if (t >= this.duration) {
      // after the expiration
      return {
        done: true,
        value: this.to
      };
    }
    // mid-tween
    return {
      done: false,
      value: ease.easeOutQuint(t, this.from, this.to, this.duration)
    };
  };
  return Tween;
}();
export { Tween as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,