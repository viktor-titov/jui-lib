import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _templateObject, _templateObject2, _templateObject3;
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { css } from '@emotion/css';
import cx from 'classnames';
import * as React from 'react';
import { useStyles2 } from '@grafana/ui';
import { autoColor } from '../../Theme';
import { ubFlex, ubPx2 } from '../../uberUtilityStyles';
import Ticks from '../Ticks';
import TimelineRow from '../TimelineRow';
import { TimelineCollapser } from './TimelineCollapser';
import TimelineColumnResizer from './TimelineColumnResizer';
import TimelineViewingLayer from './TimelineViewingLayer';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
var getStyles = function getStyles(theme) {
  return {
    TimelineHeaderRow: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n      label: TimelineHeaderRow;\n      background: ", ";\n      border-bottom: 1px solid ", ";\n      height: 38px;\n      line-height: 38px;\n      width: 100%;\n      z-index: 4;\n      position: relative;\n    "])), autoColor(theme, '#ececec'), autoColor(theme, '#ccc')),
    TimelineHeaderRowTitle: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose(["\n      label: TimelineHeaderRowTitle;\n      flex: 1;\n      overflow: hidden;\n      margin: 0;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    "]))),
    TimelineHeaderWrapper: css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose(["\n      label: TimelineHeaderWrapper;\n      align-items: center;\n    "])))
  };
};
export default function TimelineHeaderRow(props) {
  var duration = props.duration,
    nameColumnWidth = props.nameColumnWidth,
    numTicks = props.numTicks,
    onCollapseAll = props.onCollapseAll,
    onCollapseOne = props.onCollapseOne,
    onColummWidthChange = props.onColummWidthChange,
    onExpandAll = props.onExpandAll,
    onExpandOne = props.onExpandOne,
    updateViewRangeTime = props.updateViewRangeTime,
    updateNextViewRangeTime = props.updateNextViewRangeTime,
    viewRangeTime = props.viewRangeTime,
    columnResizeHandleHeight = props.columnResizeHandleHeight;
  var _viewRangeTime$curren = viewRangeTime.current,
    viewStart = _viewRangeTime$curren[0],
    viewEnd = _viewRangeTime$curren[1];
  var styles = useStyles2(getStyles);
  return /*#__PURE__*/_jsxs(TimelineRow, {
    className: styles.TimelineHeaderRow,
    "data-testid": "TimelineHeaderRow",
    children: [/*#__PURE__*/_jsxs(TimelineRow.Cell, {
      className: cx(ubFlex, ubPx2, styles.TimelineHeaderWrapper),
      width: nameColumnWidth,
      children: [/*#__PURE__*/_jsx("h4", {
        className: styles.TimelineHeaderRowTitle,
        children: "Service & Operation"
      }), /*#__PURE__*/_jsx(TimelineCollapser, {
        onCollapseAll: onCollapseAll,
        onExpandAll: onExpandAll,
        onCollapseOne: onCollapseOne,
        onExpandOne: onExpandOne
      })]
    }), /*#__PURE__*/_jsxs(TimelineRow.Cell, {
      width: 1 - nameColumnWidth,
      children: [/*#__PURE__*/_jsx(TimelineViewingLayer, {
        boundsInvalidator: nameColumnWidth,
        updateNextViewRangeTime: updateNextViewRangeTime,
        updateViewRangeTime: updateViewRangeTime,
        viewRangeTime: viewRangeTime
      }), /*#__PURE__*/_jsx(Ticks, {
        numTicks: numTicks,
        startTime: viewStart * duration,
        endTime: viewEnd * duration,
        showLabels: true
      })]
    }), /*#__PURE__*/_jsx(TimelineColumnResizer, {
      columnResizeHandleHeight: columnResizeHandleHeight,
      position: nameColumnWidth,
      onChange: onColummWidthChange,
      min: 0.2,
      max: 0.85
    })]
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,