import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { render, screen } from '@testing-library/react';
import React from 'react';
import { TimelineCollapser } from './TimelineCollapser';
import { jsx as _jsx } from "react/jsx-runtime";
var setup = function setup() {
  var props = {
    onCollapseAll: function onCollapseAll() {},
    onCollapseOne: function onCollapseOne() {},
    onExpandAll: function onExpandAll() {},
    onExpandOne: function onExpandOne() {}
  };
  return render( /*#__PURE__*/_jsx(TimelineCollapser, _extends({}, props)));
};
describe('TimelineCollapser test', function () {
  it('renders without exploding', function () {
    expect(function () {
      return setup();
    }).not.toThrow();
  });
  it('renders correctly', function () {
    setup();
    expect(screen.getByTestId('TimelineCollapser')).toBeInTheDocument();
    expect(screen.getByRole('button', {
      name: 'Expand All'
    })).toBeInTheDocument();
    expect(screen.getByRole('button', {
      name: 'Collapse All'
    })).toBeInTheDocument();
    expect(screen.getByRole('button', {
      name: 'Expand +1'
    })).toBeInTheDocument();
    expect(screen.getByRole('button', {
      name: 'Collapse +1'
    })).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZW5kZXIiLCJzY3JlZW4iLCJSZWFjdCIsIlRpbWVsaW5lQ29sbGFwc2VyIiwianN4IiwiX2pzeCIsInNldHVwIiwicHJvcHMiLCJvbkNvbGxhcHNlQWxsIiwib25Db2xsYXBzZU9uZSIsIm9uRXhwYW5kQWxsIiwib25FeHBhbmRPbmUiLCJfZXh0ZW5kcyIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJub3QiLCJ0b1Rocm93IiwiZ2V0QnlUZXN0SWQiLCJ0b0JlSW5UaGVEb2N1bWVudCIsImdldEJ5Um9sZSIsIm5hbWUiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvVHJhY2VUaW1lbGluZVZpZXdlci9UaW1lbGluZUhlYWRlclJvdy9UaW1lbGluZUNvbGxhcHNlci50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4gfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IFRpbWVsaW5lQ29sbGFwc2VyIH0gZnJvbSAnLi9UaW1lbGluZUNvbGxhcHNlcic7XG5cbmNvbnN0IHNldHVwID0gKCkgPT4ge1xuICBjb25zdCBwcm9wcyA9IHtcbiAgICBvbkNvbGxhcHNlQWxsOiAoKSA9PiB7fSxcbiAgICBvbkNvbGxhcHNlT25lOiAoKSA9PiB7fSxcbiAgICBvbkV4cGFuZEFsbDogKCkgPT4ge30sXG4gICAgb25FeHBhbmRPbmU6ICgpID0+IHt9LFxuICB9O1xuICByZXR1cm4gcmVuZGVyKDxUaW1lbGluZUNvbGxhcHNlciB7Li4ucHJvcHN9IC8+KTtcbn07XG5cbmRlc2NyaWJlKCdUaW1lbGluZUNvbGxhcHNlciB0ZXN0JywgKCkgPT4ge1xuICBpdCgncmVuZGVycyB3aXRob3V0IGV4cGxvZGluZycsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4gc2V0dXAoKSkubm90LnRvVGhyb3coKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIHNldHVwKCk7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdUaW1lbGluZUNvbGxhcHNlcicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6ICdFeHBhbmQgQWxsJyB9KSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAnQ29sbGFwc2UgQWxsJyB9KSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAnRXhwYW5kICsxJyB9KSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAnQ29sbGFwc2UgKzEnIH0pKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsTUFBTSxFQUFFQyxNQUFNLFFBQVEsd0JBQXdCO0FBQ3ZELE9BQU9DLEtBQUssTUFBTSxPQUFPO0FBRXpCLFNBQVNDLGlCQUFpQixRQUFRLHFCQUFxQjtBQUFDLFNBQUFDLEdBQUEsSUFBQUMsSUFBQTtBQUV4RCxJQUFNQyxLQUFLLEdBQUcsU0FBUkEsS0FBS0EsQ0FBQSxFQUFTO0VBQ2xCLElBQU1DLEtBQUssR0FBRztJQUNaQyxhQUFhLEVBQUUsU0FBQUEsY0FBQSxFQUFNLENBQUMsQ0FBQztJQUN2QkMsYUFBYSxFQUFFLFNBQUFBLGNBQUEsRUFBTSxDQUFDLENBQUM7SUFDdkJDLFdBQVcsRUFBRSxTQUFBQSxZQUFBLEVBQU0sQ0FBQyxDQUFDO0lBQ3JCQyxXQUFXLEVBQUUsU0FBQUEsWUFBQSxFQUFNLENBQUM7RUFDdEIsQ0FBQztFQUNELE9BQU9YLE1BQU0sZUFBQ0ssSUFBQSxDQUFDRixpQkFBaUIsRUFBQVMsUUFBQSxLQUFLTCxLQUFLLENBQUcsQ0FBQyxDQUFDO0FBQ2pELENBQUM7QUFFRE0sUUFBUSxDQUFDLHdCQUF3QixFQUFFLFlBQU07RUFDdkNDLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxZQUFNO0lBQ3BDQyxNQUFNLENBQUM7TUFBQSxPQUFNVCxLQUFLLENBQUMsQ0FBQztJQUFBLEVBQUMsQ0FBQ1UsR0FBRyxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUNyQyxDQUFDLENBQUM7RUFFRkgsRUFBRSxDQUFDLG1CQUFtQixFQUFFLFlBQU07SUFDNUJSLEtBQUssQ0FBQyxDQUFDO0lBRVBTLE1BQU0sQ0FBQ2QsTUFBTSxDQUFDaUIsV0FBVyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQztJQUNuRUosTUFBTSxDQUFDZCxNQUFNLENBQUNtQixTQUFTLENBQUMsUUFBUSxFQUFFO01BQUVDLElBQUksRUFBRTtJQUFhLENBQUMsQ0FBQyxDQUFDLENBQUNGLGlCQUFpQixDQUFDLENBQUM7SUFDOUVKLE1BQU0sQ0FBQ2QsTUFBTSxDQUFDbUIsU0FBUyxDQUFDLFFBQVEsRUFBRTtNQUFFQyxJQUFJLEVBQUU7SUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDRixpQkFBaUIsQ0FBQyxDQUFDO0lBQ2hGSixNQUFNLENBQUNkLE1BQU0sQ0FBQ21CLFNBQVMsQ0FBQyxRQUFRLEVBQUU7TUFBRUMsSUFBSSxFQUFFO0lBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQ0YsaUJBQWlCLENBQUMsQ0FBQztJQUM3RUosTUFBTSxDQUFDZCxNQUFNLENBQUNtQixTQUFTLENBQUMsUUFBUSxFQUFFO01BQUVDLElBQUksRUFBRTtJQUFjLENBQUMsQ0FBQyxDQUFDLENBQUNGLGlCQUFpQixDQUFDLENBQUM7RUFDakYsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119