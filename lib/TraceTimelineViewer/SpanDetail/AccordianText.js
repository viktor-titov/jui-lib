import _extends from "@babel/runtime/helpers/extends";
import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _templateObject;
// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { css } from '@emotion/css';
import cx from 'classnames';
import * as React from 'react';
import IoIosArrowDown from 'react-icons/lib/io/ios-arrow-down';
import IoIosArrowRight from 'react-icons/lib/io/ios-arrow-right';
import { useStyles2 } from '@grafana/ui';
import { autoColor } from '../../Theme';
import { uAlignIcon } from '../../uberUtilityStyles';
import { getStyles as getAccordianKeyValuesStyles } from './AccordianKeyValues';
import TextList from './TextList';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
var getStyles = function getStyles(theme) {
  return {
    header: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n      cursor: pointer;\n      overflow: hidden;\n      padding: 0.25em 0.1em;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n      &:hover {\n        background: ", ";\n      }\n    "])), autoColor(theme, '#e8e8e8'))
  };
};
function DefaultTextComponent(_ref) {
  var data = _ref.data;
  return /*#__PURE__*/_jsx(TextList, {
    data: data
  });
}
export default function AccordianText(props) {
  var _cx;
  var className = props.className,
    data = props.data,
    headerClassName = props.headerClassName,
    interactive = props.interactive,
    isOpen = props.isOpen,
    label = props.label,
    onToggle = props.onToggle,
    _props$TextComponent = props.TextComponent,
    TextComponent = _props$TextComponent === void 0 ? DefaultTextComponent : _props$TextComponent;
  var isEmpty = !Array.isArray(data) || !data.length;
  var accordianKeyValuesStyles = useStyles2(getAccordianKeyValuesStyles);
  var iconCls = cx(uAlignIcon, (_cx = {}, _cx[accordianKeyValuesStyles.emptyIcon] = isEmpty, _cx));
  var arrow = null;
  var headerProps = null;
  if (interactive) {
    arrow = isOpen ? /*#__PURE__*/_jsx(IoIosArrowDown, {
      className: iconCls
    }) : /*#__PURE__*/_jsx(IoIosArrowRight, {
      className: iconCls
    });
    headerProps = {
      'aria-checked': isOpen,
      onClick: isEmpty ? null : onToggle,
      role: 'switch'
    };
  }
  var styles = useStyles2(getStyles);
  return /*#__PURE__*/_jsxs("div", {
    className: className || '',
    children: [/*#__PURE__*/_jsxs("div", _extends({
      className: cx(styles.header, headerClassName)
    }, headerProps, {
      "data-testid": "AccordianText--header",
      children: [arrow, /*#__PURE__*/_jsx("strong", {
        children: label
      }), " (", data.length, ")"]
    })), isOpen && /*#__PURE__*/_jsx(TextComponent, {
      data: data
    })]
  });
}
AccordianText.defaultProps = {
  className: null,
  highContrast: false,
  interactive: true,
  onToggle: null
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,