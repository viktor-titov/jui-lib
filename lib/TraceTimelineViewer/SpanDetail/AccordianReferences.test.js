import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2019 The Jaeger Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { render, screen } from '@testing-library/react';
import React from 'react';
import AccordianReferences from './AccordianReferences';
import { jsx as _jsx } from "react/jsx-runtime";
var traceID = 'trace1';
var references = [{
  refType: 'CHILD_OF',
  span: {
    spanID: 'span1',
    traceID: traceID,
    operationName: 'op1',
    process: {
      serviceName: 'service1'
    }
  },
  spanID: 'span1',
  traceID: traceID
}, {
  refType: 'CHILD_OF',
  span: {
    spanID: 'span3',
    traceID: traceID,
    operationName: 'op2',
    process: {
      serviceName: 'service2'
    }
  },
  spanID: 'span3',
  traceID: traceID
}, {
  refType: 'CHILD_OF',
  spanID: 'span5',
  traceID: 'trace2'
}];
var link = {
  href: 'link'
};
var setup = function setup(propOverrides) {
  var props = _extends({
    compact: false,
    data: references,
    highContrast: false,
    isOpen: false,
    onToggle: jest.fn(),
    createFocusSpanLink: function createFocusSpanLink() {
      return link;
    }
  }, propOverrides);
  return render( /*#__PURE__*/_jsx(AccordianReferences, _extends({}, props)));
};
describe('AccordianReferences tests', function () {
  it('renders without exploding', function () {
    expect(function () {
      return setup();
    }).not.toThrow();
  });
  it('renders the correct number of references', function () {
    setup();
    expect(screen.getByRole('switch', {
      name: 'References (3)'
    })).toBeInTheDocument();
  });
  it('content doesnt show when not expanded', function () {
    setup({
      isOpen: false
    });
    expect(screen.queryByRole('link', {
      name: /^View\sLinked/
    })).not.toBeInTheDocument();
    expect(screen.queryAllByRole('link', {
      name: /^service\d\sop\d/
    })).toHaveLength(0);
  });
  it('renders the content when it is expanded', function () {
    setup({
      isOpen: true
    });
    expect(screen.getByRole('switch', {
      name: 'References (3)'
    })).toBeInTheDocument();
    expect(screen.getAllByRole('link', {
      name: /^service\d\sop\d/
    })).toHaveLength(2);
    expect(screen.getByRole('link', {
      name: /^View\sLinked/
    })).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZW5kZXIiLCJzY3JlZW4iLCJSZWFjdCIsIkFjY29yZGlhblJlZmVyZW5jZXMiLCJqc3giLCJfanN4IiwidHJhY2VJRCIsInJlZmVyZW5jZXMiLCJyZWZUeXBlIiwic3BhbiIsInNwYW5JRCIsIm9wZXJhdGlvbk5hbWUiLCJwcm9jZXNzIiwic2VydmljZU5hbWUiLCJsaW5rIiwiaHJlZiIsInNldHVwIiwicHJvcE92ZXJyaWRlcyIsInByb3BzIiwiX2V4dGVuZHMiLCJjb21wYWN0IiwiZGF0YSIsImhpZ2hDb250cmFzdCIsImlzT3BlbiIsIm9uVG9nZ2xlIiwiamVzdCIsImZuIiwiY3JlYXRlRm9jdXNTcGFuTGluayIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJub3QiLCJ0b1Rocm93IiwiZ2V0QnlSb2xlIiwibmFtZSIsInRvQmVJblRoZURvY3VtZW50IiwicXVlcnlCeVJvbGUiLCJxdWVyeUFsbEJ5Um9sZSIsInRvSGF2ZUxlbmd0aCIsImdldEFsbEJ5Um9sZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9UcmFjZVRpbWVsaW5lVmlld2VyL1NwYW5EZXRhaWwvQWNjb3JkaWFuUmVmZXJlbmNlcy50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTkgVGhlIEphZWdlciBBdXRob3JzLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IEFjY29yZGlhblJlZmVyZW5jZXMsIHsgQWNjb3JkaWFuUmVmZXJlbmNlc1Byb3BzIH0gZnJvbSAnLi9BY2NvcmRpYW5SZWZlcmVuY2VzJztcblxuY29uc3QgdHJhY2VJRCA9ICd0cmFjZTEnO1xuY29uc3QgcmVmZXJlbmNlcyA9IFtcbiAge1xuICAgIHJlZlR5cGU6ICdDSElMRF9PRicsXG4gICAgc3Bhbjoge1xuICAgICAgc3BhbklEOiAnc3BhbjEnLFxuICAgICAgdHJhY2VJRCxcbiAgICAgIG9wZXJhdGlvbk5hbWU6ICdvcDEnLFxuICAgICAgcHJvY2Vzczoge1xuICAgICAgICBzZXJ2aWNlTmFtZTogJ3NlcnZpY2UxJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBzcGFuSUQ6ICdzcGFuMScsXG4gICAgdHJhY2VJRCxcbiAgfSxcbiAge1xuICAgIHJlZlR5cGU6ICdDSElMRF9PRicsXG4gICAgc3Bhbjoge1xuICAgICAgc3BhbklEOiAnc3BhbjMnLFxuICAgICAgdHJhY2VJRCxcbiAgICAgIG9wZXJhdGlvbk5hbWU6ICdvcDInLFxuICAgICAgcHJvY2Vzczoge1xuICAgICAgICBzZXJ2aWNlTmFtZTogJ3NlcnZpY2UyJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBzcGFuSUQ6ICdzcGFuMycsXG4gICAgdHJhY2VJRCxcbiAgfSxcbiAge1xuICAgIHJlZlR5cGU6ICdDSElMRF9PRicsXG4gICAgc3BhbklEOiAnc3BhbjUnLFxuICAgIHRyYWNlSUQ6ICd0cmFjZTInLFxuICB9LFxuXTtcblxuY29uc3QgbGluayA9IHsgaHJlZjogJ2xpbmsnIH07XG5cbmNvbnN0IHNldHVwID0gKHByb3BPdmVycmlkZXM/OiBBY2NvcmRpYW5SZWZlcmVuY2VzUHJvcHMpID0+IHtcbiAgY29uc3QgcHJvcHMgPSB7XG4gICAgY29tcGFjdDogZmFsc2UsXG4gICAgZGF0YTogcmVmZXJlbmNlcyxcbiAgICBoaWdoQ29udHJhc3Q6IGZhbHNlLFxuICAgIGlzT3BlbjogZmFsc2UsXG4gICAgb25Ub2dnbGU6IGplc3QuZm4oKSxcbiAgICBjcmVhdGVGb2N1c1NwYW5MaW5rOiAoKSA9PiBsaW5rLFxuICAgIC4uLnByb3BPdmVycmlkZXMsXG4gIH07XG5cbiAgcmV0dXJuIHJlbmRlcig8QWNjb3JkaWFuUmVmZXJlbmNlcyB7Li4uKHByb3BzIGFzIEFjY29yZGlhblJlZmVyZW5jZXNQcm9wcyl9IC8+KTtcbn07XG5cbmRlc2NyaWJlKCdBY2NvcmRpYW5SZWZlcmVuY2VzIHRlc3RzJywgKCkgPT4ge1xuICBpdCgncmVuZGVycyB3aXRob3V0IGV4cGxvZGluZycsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4gc2V0dXAoKSkubm90LnRvVGhyb3coKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIHJlZmVyZW5jZXMnLCAoKSA9PiB7XG4gICAgc2V0dXAoKTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdzd2l0Y2gnLCB7IG5hbWU6ICdSZWZlcmVuY2VzICgzKScgfSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdjb250ZW50IGRvZXNudCBzaG93IHdoZW4gbm90IGV4cGFuZGVkJywgKCkgPT4ge1xuICAgIHNldHVwKHsgaXNPcGVuOiBmYWxzZSB9IGFzIEFjY29yZGlhblJlZmVyZW5jZXNQcm9wcyk7XG5cbiAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlSb2xlKCdsaW5rJywgeyBuYW1lOiAvXlZpZXdcXHNMaW5rZWQvIH0pKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QWxsQnlSb2xlKCdsaW5rJywgeyBuYW1lOiAvXnNlcnZpY2VcXGRcXHNvcFxcZC8gfSkpLnRvSGF2ZUxlbmd0aCgwKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgdGhlIGNvbnRlbnQgd2hlbiBpdCBpcyBleHBhbmRlZCcsICgpID0+IHtcbiAgICBzZXR1cCh7IGlzT3BlbjogdHJ1ZSB9IGFzIEFjY29yZGlhblJlZmVyZW5jZXNQcm9wcyk7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnc3dpdGNoJywgeyBuYW1lOiAnUmVmZXJlbmNlcyAoMyknIH0pKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QWxsQnlSb2xlKCdsaW5rJywgeyBuYW1lOiAvXnNlcnZpY2VcXGRcXHNvcFxcZC8gfSkpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnbGluaycsIHsgbmFtZTogL15WaWV3XFxzTGlua2VkLyB9KSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLE1BQU0sRUFBRUMsTUFBTSxRQUFRLHdCQUF3QjtBQUN2RCxPQUFPQyxLQUFLLE1BQU0sT0FBTztBQUV6QixPQUFPQyxtQkFBbUIsTUFBb0MsdUJBQXVCO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBRXRGLElBQU1DLE9BQU8sR0FBRyxRQUFRO0FBQ3hCLElBQU1D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