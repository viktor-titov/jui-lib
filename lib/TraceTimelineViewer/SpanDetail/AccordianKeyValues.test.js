import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { render, screen } from '@testing-library/react';
import React from 'react';
import AccordianKeyValues, { KeyValuesSummary } from './AccordianKeyValues';
import { jsx as _jsx } from "react/jsx-runtime";
var tags = [{
  key: 'span.kind',
  value: 'client'
}, {
  key: 'omg',
  value: 'mos-def'
}];
var setupAccordian = function setupAccordian(propOverrides) {
  var props = _extends({
    compact: false,
    data: tags,
    isOpen: true,
    label: 'test accordian',
    onToggle: jest.fn()
  }, propOverrides);
  return render( /*#__PURE__*/_jsx(AccordianKeyValues, _extends({}, props)));
};
var setupKeyValues = function setupKeyValues(propOverrides) {
  var props = _extends({
    data: tags
  }, propOverrides);
  return render( /*#__PURE__*/_jsx(KeyValuesSummary, _extends({}, props)));
};
describe('KeyValuesSummary tests', function () {
  it('renders without exploding', function () {
    expect(function () {
      return setupKeyValues();
    }).not.toThrow();
  });
  it('returns `null` when props.data is empty', function () {
    setupKeyValues({
      data: null
    });
    expect(screen.queryAllByRole('table')).toHaveLength(0);
    expect(screen.queryAllByRole('row')).toHaveLength(0);
    expect(screen.queryAllByRole('cell')).toHaveLength(0);
  });
  it('generates a list from `data` with the correct content', function () {
    setupKeyValues();
    expect(screen.queryAllByRole('listitem')).toHaveLength(2);
  });
  it('renders the data as text', function () {
    setupKeyValues();
    expect(screen.getByText(/^span.kind$/)).toBeInTheDocument();
    expect(screen.getByText(/^client$/)).toBeInTheDocument();
    expect(screen.getByText(/^omg$/)).toBeInTheDocument();
    expect(screen.getByText(/^mos-def$/)).toBeInTheDocument();
  });
});
describe('AccordianKeyValues test', function () {
  it('renders without exploding', function () {
    expect(function () {
      return setupAccordian();
    }).not.toThrow();
  });
  it('renders the label', function () {
    setupAccordian();
    expect(screen.getByTestId('AccordianKeyValues--header')).toBeInTheDocument();
  });
  it('renders table correctly when passed data & is open ', function () {
    setupAccordian();
    expect(screen.getByRole('switch', {
      name: 'test accordian'
    })).toBeInTheDocument();
    expect(screen.getByRole('table')).toBeInTheDocument();
    expect(screen.getByRole('row', {
      name: 'span.kind "client"'
    })).toBeInTheDocument();
    expect(screen.getByRole('cell', {
      name: 'span.kind'
    })).toBeInTheDocument();
    expect(screen.getByRole('cell', {
      name: '"client"'
    })).toBeInTheDocument();
    expect(screen.getByRole('cell', {
      name: 'omg'
    })).toBeInTheDocument();
    expect(screen.getByRole('cell', {
      name: '"mos-def"'
    })).toBeInTheDocument();
  });
  it('renders the summary instead of the table when it is not expanded', function () {
    setupAccordian({
      isOpen: false
    });
    expect(screen.getByRole('switch', {
      name: 'test accordian: span.kind = client omg = mos-def'
    })).toBeInTheDocument();
    expect(screen.queryByRole('table')).not.toBeInTheDocument();
    expect(screen.queryAllByRole('cell')).toHaveLength(0);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,