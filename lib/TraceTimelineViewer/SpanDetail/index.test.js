import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _extends from "@babel/runtime/helpers/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

jest.mock('../utils');
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import React from 'react';
import traceGenerator from '../../demo/trace-generators';
import transformTraceData from '../../model/transform-trace-data';
import { formatDuration } from '../utils';
import DetailState from './DetailState';
import SpanDetail, { getAbsoluteTime } from './index';
import { jsx as _jsx } from "react/jsx-runtime";
describe('<SpanDetail>', function () {
  // use `transformTraceData` on a fake trace to get a fully processed span
  var span = transformTraceData(traceGenerator.trace({
    numberOfSpans: 1
  })).spans[0];
  var detailState = new DetailState().toggleLogs().toggleProcess().toggleReferences().toggleTags();
  var traceStartTime = 5;
  var topOfExploreViewRef = jest.fn();
  var props = {
    detailState: detailState,
    span: span,
    traceStartTime: traceStartTime,
    topOfExploreViewRef: topOfExploreViewRef,
    logItemToggle: jest.fn(),
    logsToggle: jest.fn(),
    processToggle: jest.fn(),
    tagsToggle: jest.fn(),
    warningsToggle: jest.fn(),
    referencesToggle: jest.fn(),
    createFocusSpanLink: jest.fn().mockReturnValue({}),
    topOfViewRefType: 'Explore'
  };
  span.logs = [{
    timestamp: 10,
    fields: [{
      key: 'message',
      value: 'oh the log message'
    }, {
      key: 'something',
      value: 'else'
    }]
  }, {
    timestamp: 20,
    fields: [{
      key: 'message',
      value: 'oh the next log message'
    }, {
      key: 'more',
      value: 'stuff'
    }]
  }];
  span.warnings = ['Warning 1', 'Warning 2'];
  span.references = [{
    refType: 'CHILD_OF',
    span: {
      spanID: 'span2',
      traceID: 'trace1',
      operationName: 'op1',
      process: {
        serviceName: 'service1'
      }
    },
    spanID: 'span1',
    traceID: 'trace1'
  }, {
    refType: 'CHILD_OF',
    span: {
      spanID: 'span3',
      traceID: 'trace1',
      operationName: 'op2',
      process: {
        serviceName: 'service2'
      }
    },
    spanID: 'span4',
    traceID: 'trace1'
  }, {
    refType: 'CHILD_OF',
    span: {
      spanID: 'span6',
      traceID: 'trace2',
      operationName: 'op2',
      process: {
        serviceName: 'service2'
      }
    },
    spanID: 'span5',
    traceID: 'trace2'
  }];
  beforeEach(function () {
    jest.mocked(formatDuration).mockReset();
    props.tagsToggle.mockReset();
    props.processToggle.mockReset();
    props.logsToggle.mockReset();
    props.logItemToggle.mockReset();
  });
  it('renders without exploding', function () {
    expect(function () {
      return render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
    }).not.toThrow();
  });
  it('shows the operation name', function () {
    render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
    expect(screen.getByRole('heading', {
      name: span.operationName
    })).toBeInTheDocument();
  });
  it('lists the service name, duration and start time', function () {
    render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
    expect(screen.getByText('Duration:')).toBeInTheDocument();
    expect(screen.getByText('Service:')).toBeInTheDocument();
    expect(screen.getByText('Start Time:')).toBeInTheDocument();
  });
  it('start time shows the absolute time', function () {
    render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
    var absoluteTime = getAbsoluteTime(span.startTime, 'browser');
    expect(screen.getByText(function (text) {
      return text.includes(absoluteTime);
    })).toBeInTheDocument();
  });
  it('renders the span tags', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
          _context.next = 3;
          return userEvent.click(screen.getByRole('switch', {
            name: /Attributes/
          }));
        case 3:
          expect(props.tagsToggle).toHaveBeenLastCalledWith(span.spanID);
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
  it('renders the process tags', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
          _context2.next = 3;
          return userEvent.click(screen.getByRole('switch', {
            name: /Resource/
          }));
        case 3:
          expect(props.processToggle).toHaveBeenLastCalledWith(span.spanID);
        case 4:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  })));
  it('renders the logs', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
          _context3.next = 3;
          return userEvent.click(screen.getByRole('switch', {
            name: /Events/
          }));
        case 3:
          expect(props.logsToggle).toHaveBeenLastCalledWith(span.spanID);
          _context3.next = 6;
          return userEvent.click(screen.getByRole('switch', {
            name: /oh the log/
          }));
        case 6:
          expect(props.logItemToggle).toHaveBeenLastCalledWith(span.spanID, props.span.logs[0]);
        case 7:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  })));
  it('renders the warnings', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
          _context4.next = 3;
          return userEvent.click(screen.getByRole('switch', {
            name: /Warnings/
          }));
        case 3:
          expect(props.warningsToggle).toHaveBeenLastCalledWith(span.spanID);
        case 4:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  })));
  it('renders the references', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
          _context5.next = 3;
          return userEvent.click(screen.getByRole('switch', {
            name: /References/
          }));
        case 3:
          expect(props.referencesToggle).toHaveBeenLastCalledWith(span.spanID);
        case 4:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  })));
  it('renders deep link URL', function () {
    render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
    expect(document.getElementsByTagName('a').length).toBeGreaterThan(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,