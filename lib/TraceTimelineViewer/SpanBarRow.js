import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23;
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { css, keyframes } from '@emotion/css';
import cx from 'classnames';
import * as React from 'react';
import IoAlert from 'react-icons/lib/io/alert';
import IoArrowRightA from 'react-icons/lib/io/arrow-right-a';
import { stylesFactory, withTheme2 } from '@grafana/ui';
import { autoColor } from '../Theme';
import { DURATION, NONE, TAG } from '../settings/SpanBarSettings';
import SpanBar from './SpanBar';
import { SpanLinksMenu } from './SpanLinks';
import SpanTreeOffset from './SpanTreeOffset';
import Ticks from './Ticks';
import TimelineRow from './TimelineRow';
import { formatDuration } from './utils';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
var spanBarClassName = 'spanBar';
var spanBarLabelClassName = 'spanBarLabel';
var nameWrapperClassName = 'nameWrapper';
var nameWrapperMatchingFilterClassName = 'nameWrapperMatchingFilter';
var viewClassName = 'jaegerView';
var nameColumnClassName = 'nameColumn';
var getStyles = stylesFactory(function (theme) {
  var animations = {
    flash: keyframes(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n    label: flash;\n    from {\n      background-color: ", ";\n    }\n    to {\n      background-color: default;\n    }\n  "])), autoColor(theme, '#68b9ff'))
  };
  return {
    nameWrapper: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose(["\n      label: nameWrapper;\n      line-height: 27px;\n      overflow: hidden;\n      display: flex;\n    "]))),
    nameWrapperMatchingFilter: css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose(["\n      label: nameWrapperMatchingFilter;\n      background-color: ", ";\n    "])), autoColor(theme, '#fffce4')),
    nameColumn: css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose(["\n      label: nameColumn;\n      position: relative;\n      white-space: nowrap;\n      z-index: 1;\n      &:hover {\n        z-index: 1;\n      }\n    "]))),
    endpointName: css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteralLoose(["\n      label: endpointName;\n      color: ", ";\n    "])), autoColor(theme, '#808080')),
    view: css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteralLoose(["\n      label: view;\n      position: relative;\n    "]))),
    viewExpanded: css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteralLoose(["\n      label: viewExpanded;\n      background: ", ";\n      outline: 1px solid ", ";\n    "])), autoColor(theme, '#f8f8f8'), autoColor(theme, '#ddd')),
    viewExpandedAndMatchingFilter: css(_templateObject8 || (_templateObject8 = _taggedTemplateLiteralLoose(["\n      label: viewExpandedAndMatchingFilter;\n      background: ", ";\n      outline: 1px solid ", ";\n    "])), autoColor(theme, '#fff3d7'), autoColor(theme, '#ddd')),
    row: css(_templateObject9 || (_templateObject9 = _taggedTemplateLiteralLoose(["\n      label: row;\n      &:hover .", " {\n        opacity: 1;\n      }\n      &:hover .", " {\n        color: ", ";\n      }\n      &:hover .", " {\n        background: #f8f8f8;\n        background: linear-gradient(\n          90deg,\n          ", ",\n          ", " 75%,\n          ", "\n        );\n      }\n      &:hover .", " {\n        background-color: ", ";\n        outline: 1px solid ", ";\n      }\n    "])), spanBarClassName, spanBarLabelClassName, autoColor(theme, '#000'), nameWrapperClassName, autoColor(theme, '#fafafa'), autoColor(theme, '#f8f8f8'), autoColor(theme, '#eee'), viewClassName, autoColor(theme, '#f5f5f5'), autoColor(theme, '#ddd')),
    rowClippingLeft: css(_templateObject10 || (_templateObject10 = _taggedTemplateLiteralLoose(["\n      label: rowClippingLeft;\n      & .", "::before {\n        content: ' ';\n        height: 100%;\n        position: absolute;\n        width: 6px;\n        background-image: linear-gradient(\n          to right,\n          ", ",\n          ", "\n        );\n        left: 100%;\n        z-index: -1;\n      }\n    "])), nameColumnClassName, autoColor(theme, 'rgba(25, 25, 25, 0.25)'), autoColor(theme, 'rgba(32, 32, 32, 0)')),
    rowClippingRight: css(_templateObject11 || (_templateObject11 = _taggedTemplateLiteralLoose(["\n      label: rowClippingRight;\n      & .", "::before {\n        content: ' ';\n        height: 100%;\n        position: absolute;\n        width: 6px;\n        background-image: linear-gradient(\n          to left,\n          ", ",\n          ", "\n        );\n        right: 0%;\n        z-index: 1;\n      }\n    "])), viewClassName, autoColor(theme, 'rgba(25, 25, 25, 0.25)'), autoColor(theme, 'rgba(25, 25, 25, 0.25)')),
    rowExpanded: css(_templateObject12 || (_templateObject12 = _taggedTemplateLiteralLoose(["\n      label: rowExpanded;\n      & .", " {\n        opacity: 1;\n      }\n      & .", " {\n        color: ", ";\n      }\n      & .", ", &:hover .", " {\n        background: ", ";\n        box-shadow: 0 1px 0 ", ";\n      }\n      & .", " {\n        background: ", ";\n      }\n      &:hover .", " {\n        background: ", ";\n      }\n    "])), spanBarClassName, spanBarLabelClassName, autoColor(theme, '#000'), nameWrapperClassName, nameWrapperClassName, autoColor(theme, '#f0f0f0'), autoColor(theme, '#ddd'), nameWrapperMatchingFilterClassName, autoColor(theme, '#fff3d7'), viewClassName, autoColor(theme, '#eee')),
    rowMatchingFilter: css(_templateObject13 || (_templateObject13 = _taggedTemplateLiteralLoose(["\n      label: rowMatchingFilter;\n      background-color: ", ";\n      &:hover .", " {\n        background: linear-gradient(\n          90deg,\n          ", ",\n          ", " 75%,\n          ", "\n        );\n      }\n      &:hover .", " {\n        background-color: ", ";\n        outline: 1px solid ", ";\n      }\n    "])), autoColor(theme, '#fffbde'), nameWrapperClassName, autoColor(theme, '#fffbde'), autoColor(theme, '#fffbde'), autoColor(theme, '#f7f1c6'), viewClassName, autoColor(theme, '#f7f1c6'), autoColor(theme, '#ddd')),
    rowFocused: css(_templateObject14 || (_templateObject14 = _taggedTemplateLiteralLoose(["\n      label: rowFocused;\n      background-color: ", ";\n      animation: ", " 1s cubic-bezier(0.12, 0, 0.39, 0);\n      & .", ", .", ", .", " {\n        background-color: ", ";\n        animation: ", " 1s cubic-bezier(0.12, 0, 0.39, 0);\n      }\n      & .", " {\n        opacity: 1;\n      }\n      & .", " {\n        color: ", ";\n      }\n      &:hover .", ", :hover .", " {\n        background: ", ";\n        box-shadow: 0 1px 0 ", ";\n      }\n    "])), autoColor(theme, '#cbe7ff'), animations.flash, nameWrapperClassName, viewClassName, nameWrapperMatchingFilterClassName, autoColor(theme, '#cbe7ff'), animations.flash, spanBarClassName, spanBarLabelClassName, autoColor(theme, '#000'), nameWrapperClassName, viewClassName, autoColor(theme, '#d5ebff'), autoColor(theme, '#ddd')),
    rowExpandedAndMatchingFilter: css(_templateObject15 || (_templateObject15 = _taggedTemplateLiteralLoose(["\n      label: rowExpandedAndMatchingFilter;\n      &:hover .", " {\n        background: ", ";\n      }\n    "])), viewClassName, autoColor(theme, '#ffeccf')),
    name: css(_templateObject16 || (_templateObject16 = _taggedTemplateLiteralLoose(["\n      label: name;\n      color: ", ";\n      cursor: pointer;\n      flex: 1 1 auto;\n      outline: none;\n      overflow-y: hidden;\n      overflow-x: auto;\n      margin-right: 8px;\n      padding-left: 4px;\n      padding-right: 0.25em;\n      position: relative;\n      -ms-overflow-style: none;\n      scrollbar-width: none;\n      &::-webkit-scrollbar {\n        display: none;\n      }\n      &::before {\n        content: ' ';\n        position: absolute;\n        top: 4px;\n        bottom: 4px;\n        left: 0;\n        border-left: 4px solid;\n        border-left-color: inherit;\n      }\n      &:focus {\n        text-decoration: none;\n      }\n      &:hover > small {\n        color: ", ";\n      }\n      text-align: left;\n      background: transparent;\n      border: none;\n    "])), autoColor(theme, '#000'), autoColor(theme, '#000')),
    nameDetailExpanded: css(_templateObject17 || (_templateObject17 = _taggedTemplateLiteralLoose(["\n      label: nameDetailExpanded;\n      &::before {\n        bottom: 0;\n      }\n    "]))),
    svcName: css(_templateObject18 || (_templateObject18 = _taggedTemplateLiteralLoose(["\n      label: svcName;\n      padding: 0 0.25rem 0 0.5rem;\n      font-size: 1.05em;\n    "]))),
    svcNameChildrenCollapsed: css(_templateObject19 || (_templateObject19 = _taggedTemplateLiteralLoose(["\n      label: svcNameChildrenCollapsed;\n      font-weight: bold;\n      font-style: italic;\n    "]))),
    errorIcon: css(_templateObject20 || (_templateObject20 = _taggedTemplateLiteralLoose(["\n      label: errorIcon;\n      border-radius: 6.5px;\n      color: ", ";\n      font-size: 0.85em;\n      margin-right: 0.25rem;\n      padding: 1px;\n    "])), autoColor(theme, '#fff')),
    rpcColorMarker: css(_templateObject21 || (_templateObject21 = _taggedTemplateLiteralLoose(["\n      label: rpcColorMarker;\n      border-radius: 6.5px;\n      display: inline-block;\n      font-size: 0.85em;\n      height: 1em;\n      margin-right: 0.25rem;\n      padding: 1px;\n      width: 1em;\n      vertical-align: middle;\n    "]))),
    labelRight: css(_templateObject22 || (_templateObject22 = _taggedTemplateLiteralLoose(["\n      label: labelRight;\n      left: 100%;\n    "]))),
    labelLeft: css(_templateObject23 || (_templateObject23 = _taggedTemplateLiteralLoose(["\n      label: labelLeft;\n      right: 100%;\n    "])))
  };
});
/**
 * This was originally a stateless function, but changing to a PureComponent
 * reduced the render time of expanding a span row detail by ~50%. This is
 * even true in the case where the stateless function has the same prop types as
 * this class and arrow functions are created in the stateless function as
 * handlers to the onClick props. E.g. for now, the PureComponent is more
 * performance than the stateless function.
 */
export var UnthemedSpanBarRow = /*#__PURE__*/function (_React$PureComponent) {
  function UnthemedSpanBarRow() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;
    _this._detailToggle = function () {
      _this.props.onDetailToggled(_this.props.span.spanID);
    };
    _this._childrenToggle = function () {
      _this.props.onChildrenToggled(_this.props.span.spanID);
    };
    _this.getSpanBarLabel = function (span, spanBarOptions, duration) {
      var _spanBarOptions$type;
      var type = (_spanBarOptions$type = spanBarOptions == null ? void 0 : spanBarOptions.type) != null ? _spanBarOptions$type : '';
      if (type === NONE) {
        return '';
      } else if (type === '' || type === DURATION) {
        return "(" + duration + ")";
      } else if (type === TAG) {
        var _spanBarOptions$tag$t, _spanBarOptions$tag;
        var tagKey = (_spanBarOptions$tag$t = spanBarOptions == null || (_spanBarOptions$tag = spanBarOptions.tag) == null ? void 0 : _spanBarOptions$tag.trim()) != null ? _spanBarOptions$tag$t : '';
        if (tagKey !== '' && span.tags) {
          var _span$tags, _span$process;
          var tag = (_span$tags = span.tags) == null ? void 0 : _span$tags.find(function (tag) {
            return tag.key === tagKey;
          });
          var process = (_span$process = span.process) == null || (_span$process = _span$process.tags) == null ? void 0 : _span$process.find(function (process) {
            return process.key === tagKey;
          });
          if (tag) {
            return "(" + tag.value + ")";
          }
          if (process) {
            return "(" + process.value + ")";
          }
        }
      }
      return '';
    };
    return _this;
  }
  _inheritsLoose(UnthemedSpanBarRow, _React$PureComponent);
  var _proto = UnthemedSpanBarRow.prototype;
  _proto.render = function render() {
    var _cx, _cx2, _cx3, _cx4, _cx5;
    var _this$props = this.props,
      className = _this$props.className,
      color = _this$props.color,
      spanBarOptions = _this$props.spanBarOptions,
      columnDivision = _this$props.columnDivision,
      isChildrenExpanded = _this$props.isChildrenExpanded,
      isDetailExpanded = _this$props.isDetailExpanded,
      isMatchingFilter = _this$props.isMatchingFilter,
      isFocused = _this$props.isFocused,
      numTicks = _this$props.numTicks,
      rpc = _this$props.rpc,
      noInstrumentedServer = _this$props.noInstrumentedServer,
      showErrorIcon = _this$props.showErrorIcon,
      getViewedBounds = _this$props.getViewedBounds,
      traceStartTime = _this$props.traceStartTime,
      span = _this$props.span,
      hoverIndentGuideIds = _this$props.hoverIndentGuideIds,
      addHoverIndentGuideId = _this$props.addHoverIndentGuideId,
      removeHoverIndentGuideId = _this$props.removeHoverIndentGuideId,
      clippingLeft = _this$props.clippingLeft,
      clippingRight = _this$props.clippingRight,
      theme = _this$props.theme,
      createSpanLink = _this$props.createSpanLink,
      datasourceType = _this$props.datasourceType;
    var duration = span.duration,
      isParent = span.hasChildren,
      operationName = span.operationName,
      serviceName = span.process.serviceName;
    var label = formatDuration(duration);
    var viewBounds = getViewedBounds(span.startTime, span.startTime + span.duration);
    var viewStart = viewBounds.start;
    var viewEnd = viewBounds.end;
    var styles = getStyles(theme);
    var labelDetail = serviceName + "::" + operationName;
    var longLabel;
    var hintClassName;
    if (viewStart > 1 - viewEnd) {
      longLabel = labelDetail + " | " + label;
      hintClassName = styles.labelLeft;
    } else {
      longLabel = label + " | " + labelDetail;
      hintClassName = styles.labelRight;
    }
    var countLinks = function countLinks(links) {
      if (!links) {
        return 0;
      }
      return Object.values(links).reduce(function (count, arr) {
        return count + arr.length;
      }, 0);
    };
    return /*#__PURE__*/_jsxs(TimelineRow, {
      className: cx(styles.row, (_cx = {}, _cx[styles.rowExpanded] = isDetailExpanded, _cx[styles.rowMatchingFilter] = isMatchingFilter, _cx[styles.rowExpandedAndMatchingFilter] = isMatchingFilter && isDetailExpanded, _cx[styles.rowFocused] = isFocused, _cx[styles.rowClippingLeft] = clippingLeft, _cx[styles.rowClippingRight] = clippingRight, _cx), className),
      children: [/*#__PURE__*/_jsx(TimelineRow.Cell, {
        className: cx(styles.nameColumn, nameColumnClassName),
        width: columnDivision,
        children: /*#__PURE__*/_jsxs("div", {
          className: cx(styles.nameWrapper, nameWrapperClassName, (_cx2 = {}, _cx2[styles.nameWrapperMatchingFilter] = isMatchingFilter, _cx2.nameWrapperMatchingFilter = isMatchingFilter, _cx2)),
          children: [/*#__PURE__*/_jsx(SpanTreeOffset, {
            onClick: isParent ? this._childrenToggle : undefined,
            childrenVisible: isChildrenExpanded,
            span: span,
            hoverIndentGuideIds: hoverIndentGuideIds,
            addHoverIndentGuideId: addHoverIndentGuideId,
            removeHoverIndentGuideId: removeHoverIndentGuideId
          }), /*#__PURE__*/_jsxs("button", {
            type: "button",
            className: cx(styles.name, (_cx3 = {}, _cx3[styles.nameDetailExpanded] = isDetailExpanded, _cx3)),
            "aria-checked": isDetailExpanded,
            title: labelDetail,
            onClick: this._detailToggle,
            role: "switch",
            style: {
              borderColor: color
            },
            tabIndex: 0,
            children: [/*#__PURE__*/_jsxs("span", {
              className: cx(styles.svcName, (_cx4 = {}, _cx4[styles.svcNameChildrenCollapsed] = isParent && !isChildrenExpanded, _cx4)),
              children: [showErrorIcon && /*#__PURE__*/_jsx(IoAlert, {
                style: {
                  backgroundColor: span.errorIconColor ? autoColor(theme, span.errorIconColor) : autoColor(theme, '#db2828')
                },
                className: styles.errorIcon
              }), serviceName, ' ', rpc && /*#__PURE__*/_jsxs("span", {
                children: [/*#__PURE__*/_jsx(IoArrowRightA, {}), " ", /*#__PURE__*/_jsx("i", {
                  className: styles.rpcColorMarker,
                  style: {
                    background: rpc.color
                  }
                }), rpc.serviceName]
              }), noInstrumentedServer && /*#__PURE__*/_jsxs("span", {
                children: [/*#__PURE__*/_jsx(IoArrowRightA, {}), ' ', /*#__PURE__*/_jsx("i", {
                  className: styles.rpcColorMarker,
                  style: {
                    background: noInstrumentedServer.color
                  }
                }), noInstrumentedServer.serviceName]
              })]
            }), /*#__PURE__*/_jsx("small", {
              className: styles.endpointName,
              children: rpc ? rpc.operationName : operationName
            }), /*#__PURE__*/_jsxs("small", {
              className: styles.endpointName,
              children: [" ", this.getSpanBarLabel(span, spanBarOptions, label)]
            })]
          }), createSpanLink && function () {
            var links = createSpanLink(span);
            var count = countLinks(links);
            if (links && count === 1) {
              var _ref, _ref2, _links$logLinks$, _links$logLinks, _links$metricLinks, _links$traceLinks;
              var link = (_ref = (_ref2 = (_links$logLinks$ = (_links$logLinks = links.logLinks) == null ? void 0 : _links$logLinks[0]) != null ? _links$logLinks$ : (_links$metricLinks = links.metricLinks) == null ? void 0 : _links$metricLinks[0]) != null ? _ref2 : (_links$traceLinks = links.traceLinks) == null ? void 0 : _links$traceLinks[0]) != null ? _ref : undefined;
              if (!link) {
                return null;
              }
              return /*#__PURE__*/_jsx("a", {
                href: link.href
                // Needs to have target otherwise preventDefault would not work due to angularRouter.
                ,
                target: '_blank',
                style: {
                  marginRight: '5px'
                },
                rel: "noopener noreferrer",
                onClick: link.onClick ? function (event) {
                  if (!(event.ctrlKey || event.metaKey || event.shiftKey) && link.onClick) {
                    event.preventDefault();
                    link.onClick(event);
                  }
                } : undefined,
                children: link.content
              });
            } else if (links && count > 1) {
              return /*#__PURE__*/_jsx(SpanLinksMenu, {
                links: links,
                datasourceType: datasourceType
              });
            } else {
              return null;
            }
          }()]
        })
      }), /*#__PURE__*/_jsxs(TimelineRow.Cell, {
        className: cx(styles.view, viewClassName, (_cx5 = {}, _cx5[styles.viewExpanded] = isDetailExpanded, _cx5[styles.viewExpandedAndMatchingFilter] = isMatchingFilter && isDetailExpanded, _cx5)),
        "data-testid": "span-view",
        style: {
          cursor: 'pointer'
        },
        width: 1 - columnDivision,
        onClick: this._detailToggle,
        children: [/*#__PURE__*/_jsx(Ticks, {
          numTicks: numTicks
        }), /*#__PURE__*/_jsx(SpanBar, {
          rpc: rpc,
          viewStart: viewStart,
          viewEnd: viewEnd,
          getViewedBounds: getViewedBounds,
          color: color,
          shortLabel: label,
          longLabel: longLabel,
          traceStartTime: traceStartTime,
          span: span,
          labelClassName: spanBarLabelClassName + " " + hintClassName,
          className: spanBarClassName
        })]
      })]
    });
  };
  return UnthemedSpanBarRow;
}(React.PureComponent);
UnthemedSpanBarRow.displayName = 'UnthemedSpanBarRow';
UnthemedSpanBarRow.defaultProps = {
  className: '',
  rpc: null
};
export default withTheme2(UnthemedSpanBarRow);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjc3MiLCJrZXlmcmFtZXMiLCJjeCIsIlJlYWN0IiwiSW9BbGVydCIsIklvQXJyb3dSaWdodEEiLCJzdHlsZXNGYWN0b3J5Iiwid2l0aFRoZW1lMiIsImF1dG9Db2xvciIsIkRVUkFUSU9OIiwiTk9ORSIsIlRBRyIsIlNwYW5CYXIiLCJTcGFuTGlua3NNZW51IiwiU3BhblRyZWVPZmZzZXQiLCJUaWNrcyIsIlRpbWVsaW5lUm93IiwiZm9ybWF0RHVyYXRpb24iLCJqc3giLCJfanN4IiwianN4cyIsIl9qc3hzIiwic3BhbkJhckNsYXNzTmFtZSIsInNwYW5CYXJMYWJlbENsYXNzTmFtZSIsIm5hbWVXcmFwcGVyQ2xhc3NOYW1lIiwibmFtZVdyYXBwZXJNYXRjaGluZ0ZpbHRlckNsYXNzTmFtZSIsInZpZXdDbGFzc05hbWUiLCJuYW1lQ29sdW1uQ2xhc3NOYW1lIiwiZ2V0U3R5bGVzIiwidGhlbWUiLCJhbmltYXRpb25zIiwiZmxhc2giLCJfdGVtcGxhdGVPYmplY3QiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UiLCJuYW1lV3JhcHBlciIsIl90ZW1wbGF0ZU9iamVjdDIiLCJuYW1lV3JhcHBlck1hdGNoaW5nRmlsdGVyIiwiX3RlbXBsYXRlT2JqZWN0MyIsIm5hbWVDb2x1bW4iLCJfdGVtcGxhdGVPYmplY3Q0IiwiZW5kcG9pbnROYW1lIiwiX3RlbXBsYXRlT2JqZWN0NSIsInZpZXciLCJfdGVtcGxhdGVPYmplY3Q2Iiwidmlld0V4cGFuZGVkIiwiX3RlbXBsYXRlT2JqZWN0NyIsInZpZXdFeHBhbmRlZEFuZE1hdGNoaW5nRmlsdGVyIiwiX3RlbXBsYXRlT2JqZWN0OCIsInJvdyIsIl90ZW1wbGF0ZU9iamVjdDkiLCJyb3dDbGlwcGluZ0xlZnQiLCJfdGVtcGxhdGVPYmplY3QxMCIsInJvd0NsaXBwaW5nUmlnaHQiLCJfdGVtcGxhdGVPYmplY3QxMSIsInJvd0V4cGFuZGVkIiwiX3RlbXBsYXRlT2JqZWN0MTIiLCJyb3dNYXRjaGluZ0ZpbHRlciIsIl90ZW1wbGF0ZU9iamVjdDEzIiwicm93Rm9jdXNlZCIsIl90ZW1wbGF0ZU9iamVjdDE0Iiwicm93RXhwYW5kZWRBbmRNYXRjaGluZ0ZpbHRlciIsIl90ZW1wbGF0ZU9iamVjdDE1IiwibmFtZSIsIl90ZW1wbGF0ZU9iamVjdDE2IiwibmFtZURldGFpbEV4cGFuZGVkIiwiX3RlbXBsYXRlT2JqZWN0MTciLCJzdmNOYW1lIiwiX3RlbXBsYXRlT2JqZWN0MTgiLCJzdmNOYW1lQ2hpbGRyZW5Db2xsYXBzZWQiLCJfdGVtcGxhdGVPYmplY3QxOSIsImVycm9ySWNvbiIsIl90ZW1wbGF0ZU9iamVjdDIwIiwicnBjQ29sb3JNYXJrZXIiLCJfdGVtcGxhdGVPYmplY3QyMSIsImxhYmVsUmlnaHQiLCJfdGVtcGxhdGVPYmplY3QyMiIsImxhYmVsTGVmdCIsIl90ZW1wbGF0ZU9iamVjdDIzIiwiVW50aGVtZWRTcGFuQmFyUm93IiwiX1JlYWN0JFB1cmVDb21wb25lbnQiLCJfdGhpcyIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY2FsbCIsImFwcGx5IiwiY29uY2F0IiwiX2RldGFpbFRvZ2dsZSIsInByb3BzIiwib25EZXRhaWxUb2dnbGVkIiwic3BhbiIsInNwYW5JRCIsIl9jaGlsZHJlblRvZ2dsZSIsIm9uQ2hpbGRyZW5Ub2dnbGVkIiwiZ2V0U3BhbkJhckxhYmVsIiwic3BhbkJhck9wdGlvbnMiLCJkdXJhdGlvbiIsIl9zcGFuQmFyT3B0aW9ucyR0eXBlIiwidHlwZSIsIl9zcGFuQmFyT3B0aW9ucyR0YWckdCIsIl9zcGFuQmFyT3B0aW9ucyR0YWciLCJ0YWdLZXkiLCJ0YWciLCJ0cmltIiwidGFncyIsIl9zcGFuJHRhZ3MiLCJfc3BhbiRwcm9jZXNzIiwiZmluZCIsImtleSIsInByb2Nlc3MiLCJ2YWx1ZSIsIl9pbmhlcml0c0xvb3NlIiwiX3Byb3RvIiwicHJvdG90eXBlIiwicmVuZGVyIiwiX2N4IiwiX2N4MiIsIl9jeDMiLCJfY3g0IiwiX2N4NSIsIl90aGlzJHByb3BzIiwiY2xhc3NOYW1lIiwiY29sb3IiLCJjb2x1bW5EaXZpc2lvbiIsImlzQ2hpbGRyZW5FeHBhbmRlZCIsImlzRGV0YWlsRXhwYW5kZWQiLCJpc01hdGNoaW5nRmlsdGVyIiwiaXNGb2N1c2VkIiwibnVtVGlja3MiLCJycGMiLCJub0luc3RydW1lbnRlZFNlcnZlciIsInNob3dFcnJvckljb24iLCJnZXRWaWV3ZWRCb3VuZHMiLCJ0cmFjZVN0YXJ0VGltZSIsImhvdmVySW5kZW50R3VpZGVJZHMiLCJhZGRIb3ZlckluZGVudEd1aWRlSWQiLCJyZW1vdmVIb3ZlckluZGVudEd1aWRlSWQiLCJjbGlwcGluZ0xlZnQiLCJjbGlwcGluZ1JpZ2h0IiwiY3JlYXRlU3BhbkxpbmsiLCJkYXRhc291cmNlVHlwZSIsImlzUGFyZW50IiwiaGFzQ2hpbGRyZW4iLCJvcGVyYXRpb25OYW1lIiwic2VydmljZU5hbWUiLCJsYWJlbCIsInZpZXdCb3VuZHMiLCJzdGFydFRpbWUiLCJ2aWV3U3RhcnQiLCJzdGFydCIsInZpZXdFbmQiLCJlbmQiLCJzdHlsZXMiLCJsYWJlbERldGFpbCIsImxvbmdMYWJlbCIsImhpbnRDbGFzc05hbWUiLCJjb3VudExpbmtzIiwibGlua3MiLCJPYmplY3QiLCJ2YWx1ZXMiLCJyZWR1Y2UiLCJjb3VudCIsImFyciIsImNoaWxkcmVuIiwiQ2VsbCIsIndpZHRoIiwib25DbGljayIsInVuZGVmaW5lZCIsImNoaWxkcmVuVmlzaWJsZSIsInRpdGxlIiwicm9sZSIsInN0eWxlIiwiYm9yZGVyQ29sb3IiLCJ0YWJJbmRleCIsImJhY2tncm91bmRDb2xvciIsImVycm9ySWNvbkNvbG9yIiwiYmFja2dyb3VuZCIsIl9yZWYiLCJfcmVmMiIsIl9saW5rcyRsb2dMaW5rcyQiLCJfbGlua3MkbG9nTGlua3MiLCJfbGlua3MkbWV0cmljTGlua3MiLCJfbGlua3MkdHJhY2VMaW5rcyIsImxpbmsiLCJsb2dMaW5rcyIsIm1ldHJpY0xpbmtzIiwidHJhY2VMaW5rcyIsImhyZWYiLCJ0YXJnZXQiLCJtYXJnaW5SaWdodCIsInJlbCIsImV2ZW50IiwiY3RybEtleSIsIm1ldGFLZXkiLCJzaGlmdEtleSIsInByZXZlbnREZWZhdWx0IiwiY29udGVudCIsImN1cnNvciIsInNob3J0TGFiZWwiLCJsYWJlbENsYXNzTmFtZSIsIlB1cmVDb21wb25lbnQiLCJkaXNwbGF5TmFtZSIsImRlZmF1bHRQcm9wcyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9UcmFjZVRpbWVsaW5lVmlld2VyL1NwYW5CYXJSb3cudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBjc3MsIGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW9BbGVydCBmcm9tICdyZWFjdC1pY29ucy9saWIvaW8vYWxlcnQnO1xuaW1wb3J0IElvQXJyb3dSaWdodEEgZnJvbSAncmVhY3QtaWNvbnMvbGliL2lvL2Fycm93LXJpZ2h0LWEnO1xuXG5pbXBvcnQgeyBHcmFmYW5hVGhlbWUyLCBUcmFjZUtleVZhbHVlUGFpciB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHsgc3R5bGVzRmFjdG9yeSwgd2l0aFRoZW1lMiB9IGZyb20gJ0BncmFmYW5hL3VpJztcblxuaW1wb3J0IHsgYXV0b0NvbG9yIH0gZnJvbSAnLi4vVGhlbWUnO1xuaW1wb3J0IHsgRFVSQVRJT04sIE5PTkUsIFRBRyB9IGZyb20gJy4uL3NldHRpbmdzL1NwYW5CYXJTZXR0aW5ncyc7XG5pbXBvcnQgeyBTcGFuQmFyT3B0aW9ucywgU3BhbkxpbmtGdW5jLCBUTmlsIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgU3BhbkxpbmtzIH0gZnJvbSAnLi4vdHlwZXMvbGlua3MnO1xuaW1wb3J0IHsgVHJhY2VTcGFuIH0gZnJvbSAnLi4vdHlwZXMvdHJhY2UnO1xuXG5pbXBvcnQgU3BhbkJhciBmcm9tICcuL1NwYW5CYXInO1xuaW1wb3J0IHsgU3BhbkxpbmtzTWVudSB9IGZyb20gJy4vU3BhbkxpbmtzJztcbmltcG9ydCBTcGFuVHJlZU9mZnNldCBmcm9tICcuL1NwYW5UcmVlT2Zmc2V0JztcbmltcG9ydCBUaWNrcyBmcm9tICcuL1RpY2tzJztcbmltcG9ydCBUaW1lbGluZVJvdyBmcm9tICcuL1RpbWVsaW5lUm93JztcbmltcG9ydCB7IGZvcm1hdER1cmF0aW9uLCBWaWV3ZWRCb3VuZHNGdW5jdGlvblR5cGUgfSBmcm9tICcuL3V0aWxzJztcblxuY29uc3Qgc3BhbkJhckNsYXNzTmFtZSA9ICdzcGFuQmFyJztcbmNvbnN0IHNwYW5CYXJMYWJlbENsYXNzTmFtZSA9ICdzcGFuQmFyTGFiZWwnO1xuY29uc3QgbmFtZVdyYXBwZXJDbGFzc05hbWUgPSAnbmFtZVdyYXBwZXInO1xuY29uc3QgbmFtZVdyYXBwZXJNYXRjaGluZ0ZpbHRlckNsYXNzTmFtZSA9ICduYW1lV3JhcHBlck1hdGNoaW5nRmlsdGVyJztcbmNvbnN0IHZpZXdDbGFzc05hbWUgPSAnamFlZ2VyVmlldyc7XG5jb25zdCBuYW1lQ29sdW1uQ2xhc3NOYW1lID0gJ25hbWVDb2x1bW4nO1xuXG5jb25zdCBnZXRTdHlsZXMgPSBzdHlsZXNGYWN0b3J5KCh0aGVtZTogR3JhZmFuYVRoZW1lMikgPT4ge1xuICBjb25zdCBhbmltYXRpb25zID0ge1xuICAgIGZsYXNoOiBrZXlmcmFtZXNgXG4gICAgbGFiZWw6IGZsYXNoO1xuICAgIGZyb20ge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHthdXRvQ29sb3IodGhlbWUsICcjNjhiOWZmJyl9O1xuICAgIH1cbiAgICB0byB7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBkZWZhdWx0O1xuICAgIH1cbiAgYCxcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG5hbWVXcmFwcGVyOiBjc3NgXG4gICAgICBsYWJlbDogbmFtZVdyYXBwZXI7XG4gICAgICBsaW5lLWhlaWdodDogMjdweDtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGAsXG4gICAgbmFtZVdyYXBwZXJNYXRjaGluZ0ZpbHRlcjogY3NzYFxuICAgICAgbGFiZWw6IG5hbWVXcmFwcGVyTWF0Y2hpbmdGaWx0ZXI7XG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2F1dG9Db2xvcih0aGVtZSwgJyNmZmZjZTQnKX07XG4gICAgYCxcbiAgICBuYW1lQ29sdW1uOiBjc3NgXG4gICAgICBsYWJlbDogbmFtZUNvbHVtbjtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICB6LWluZGV4OiAxO1xuICAgICAgJjpob3ZlciB7XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICB9XG4gICAgYCxcbiAgICBlbmRwb2ludE5hbWU6IGNzc2BcbiAgICAgIGxhYmVsOiBlbmRwb2ludE5hbWU7XG4gICAgICBjb2xvcjogJHthdXRvQ29sb3IodGhlbWUsICcjODA4MDgwJyl9O1xuICAgIGAsXG4gICAgdmlldzogY3NzYFxuICAgICAgbGFiZWw6IHZpZXc7XG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgYCxcbiAgICB2aWV3RXhwYW5kZWQ6IGNzc2BcbiAgICAgIGxhYmVsOiB2aWV3RXhwYW5kZWQ7XG4gICAgICBiYWNrZ3JvdW5kOiAke2F1dG9Db2xvcih0aGVtZSwgJyNmOGY4ZjgnKX07XG4gICAgICBvdXRsaW5lOiAxcHggc29saWQgJHthdXRvQ29sb3IodGhlbWUsICcjZGRkJyl9O1xuICAgIGAsXG4gICAgdmlld0V4cGFuZGVkQW5kTWF0Y2hpbmdGaWx0ZXI6IGNzc2BcbiAgICAgIGxhYmVsOiB2aWV3RXhwYW5kZWRBbmRNYXRjaGluZ0ZpbHRlcjtcbiAgICAgIGJhY2tncm91bmQ6ICR7YXV0b0NvbG9yKHRoZW1lLCAnI2ZmZjNkNycpfTtcbiAgICAgIG91dGxpbmU6IDFweCBzb2xpZCAke2F1dG9Db2xvcih0aGVtZSwgJyNkZGQnKX07XG4gICAgYCxcbiAgICByb3c6IGNzc2BcbiAgICAgIGxhYmVsOiByb3c7XG4gICAgICAmOmhvdmVyIC4ke3NwYW5CYXJDbGFzc05hbWV9IHtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgIH1cbiAgICAgICY6aG92ZXIgLiR7c3BhbkJhckxhYmVsQ2xhc3NOYW1lfSB7XG4gICAgICAgIGNvbG9yOiAke2F1dG9Db2xvcih0aGVtZSwgJyMwMDAnKX07XG4gICAgICB9XG4gICAgICAmOmhvdmVyIC4ke25hbWVXcmFwcGVyQ2xhc3NOYW1lfSB7XG4gICAgICAgIGJhY2tncm91bmQ6ICNmOGY4Zjg7XG4gICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChcbiAgICAgICAgICA5MGRlZyxcbiAgICAgICAgICAke2F1dG9Db2xvcih0aGVtZSwgJyNmYWZhZmEnKX0sXG4gICAgICAgICAgJHthdXRvQ29sb3IodGhlbWUsICcjZjhmOGY4Jyl9IDc1JSxcbiAgICAgICAgICAke2F1dG9Db2xvcih0aGVtZSwgJyNlZWUnKX1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgICY6aG92ZXIgLiR7dmlld0NsYXNzTmFtZX0ge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2F1dG9Db2xvcih0aGVtZSwgJyNmNWY1ZjUnKX07XG4gICAgICAgIG91dGxpbmU6IDFweCBzb2xpZCAke2F1dG9Db2xvcih0aGVtZSwgJyNkZGQnKX07XG4gICAgICB9XG4gICAgYCxcbiAgICByb3dDbGlwcGluZ0xlZnQ6IGNzc2BcbiAgICAgIGxhYmVsOiByb3dDbGlwcGluZ0xlZnQ7XG4gICAgICAmIC4ke25hbWVDb2x1bW5DbGFzc05hbWV9OjpiZWZvcmUge1xuICAgICAgICBjb250ZW50OiAnICc7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB3aWR0aDogNnB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoXG4gICAgICAgICAgdG8gcmlnaHQsXG4gICAgICAgICAgJHthdXRvQ29sb3IodGhlbWUsICdyZ2JhKDI1LCAyNSwgMjUsIDAuMjUpJyl9LFxuICAgICAgICAgICR7YXV0b0NvbG9yKHRoZW1lLCAncmdiYSgzMiwgMzIsIDMyLCAwKScpfVxuICAgICAgICApO1xuICAgICAgICBsZWZ0OiAxMDAlO1xuICAgICAgICB6LWluZGV4OiAtMTtcbiAgICAgIH1cbiAgICBgLFxuICAgIHJvd0NsaXBwaW5nUmlnaHQ6IGNzc2BcbiAgICAgIGxhYmVsOiByb3dDbGlwcGluZ1JpZ2h0O1xuICAgICAgJiAuJHt2aWV3Q2xhc3NOYW1lfTo6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogJyAnO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgd2lkdGg6IDZweDtcbiAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KFxuICAgICAgICAgIHRvIGxlZnQsXG4gICAgICAgICAgJHthdXRvQ29sb3IodGhlbWUsICdyZ2JhKDI1LCAyNSwgMjUsIDAuMjUpJyl9LFxuICAgICAgICAgICR7YXV0b0NvbG9yKHRoZW1lLCAncmdiYSgyNSwgMjUsIDI1LCAwLjI1KScpfVxuICAgICAgICApO1xuICAgICAgICByaWdodDogMCU7XG4gICAgICAgIHotaW5kZXg6IDE7XG4gICAgICB9XG4gICAgYCxcbiAgICByb3dFeHBhbmRlZDogY3NzYFxuICAgICAgbGFiZWw6IHJvd0V4cGFuZGVkO1xuICAgICAgJiAuJHtzcGFuQmFyQ2xhc3NOYW1lfSB7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICB9XG4gICAgICAmIC4ke3NwYW5CYXJMYWJlbENsYXNzTmFtZX0ge1xuICAgICAgICBjb2xvcjogJHthdXRvQ29sb3IodGhlbWUsICcjMDAwJyl9O1xuICAgICAgfVxuICAgICAgJiAuJHtuYW1lV3JhcHBlckNsYXNzTmFtZX0sICY6aG92ZXIgLiR7bmFtZVdyYXBwZXJDbGFzc05hbWV9IHtcbiAgICAgICAgYmFja2dyb3VuZDogJHthdXRvQ29sb3IodGhlbWUsICcjZjBmMGYwJyl9O1xuICAgICAgICBib3gtc2hhZG93OiAwIDFweCAwICR7YXV0b0NvbG9yKHRoZW1lLCAnI2RkZCcpfTtcbiAgICAgIH1cbiAgICAgICYgLiR7bmFtZVdyYXBwZXJNYXRjaGluZ0ZpbHRlckNsYXNzTmFtZX0ge1xuICAgICAgICBiYWNrZ3JvdW5kOiAke2F1dG9Db2xvcih0aGVtZSwgJyNmZmYzZDcnKX07XG4gICAgICB9XG4gICAgICAmOmhvdmVyIC4ke3ZpZXdDbGFzc05hbWV9IHtcbiAgICAgICAgYmFja2dyb3VuZDogJHthdXRvQ29sb3IodGhlbWUsICcjZWVlJyl9O1xuICAgICAgfVxuICAgIGAsXG4gICAgcm93TWF0Y2hpbmdGaWx0ZXI6IGNzc2BcbiAgICAgIGxhYmVsOiByb3dNYXRjaGluZ0ZpbHRlcjtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7YXV0b0NvbG9yKHRoZW1lLCAnI2ZmZmJkZScpfTtcbiAgICAgICY6aG92ZXIgLiR7bmFtZVdyYXBwZXJDbGFzc05hbWV9IHtcbiAgICAgICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KFxuICAgICAgICAgIDkwZGVnLFxuICAgICAgICAgICR7YXV0b0NvbG9yKHRoZW1lLCAnI2ZmZmJkZScpfSxcbiAgICAgICAgICAke2F1dG9Db2xvcih0aGVtZSwgJyNmZmZiZGUnKX0gNzUlLFxuICAgICAgICAgICR7YXV0b0NvbG9yKHRoZW1lLCAnI2Y3ZjFjNicpfVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgJjpob3ZlciAuJHt2aWV3Q2xhc3NOYW1lfSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7YXV0b0NvbG9yKHRoZW1lLCAnI2Y3ZjFjNicpfTtcbiAgICAgICAgb3V0bGluZTogMXB4IHNvbGlkICR7YXV0b0NvbG9yKHRoZW1lLCAnI2RkZCcpfTtcbiAgICAgIH1cbiAgICBgLFxuICAgIHJvd0ZvY3VzZWQ6IGNzc2BcbiAgICAgIGxhYmVsOiByb3dGb2N1c2VkO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHthdXRvQ29sb3IodGhlbWUsICcjY2JlN2ZmJyl9O1xuICAgICAgYW5pbWF0aW9uOiAke2FuaW1hdGlvbnMuZmxhc2h9IDFzIGN1YmljLWJlemllcigwLjEyLCAwLCAwLjM5LCAwKTtcbiAgICAgICYgLiR7bmFtZVdyYXBwZXJDbGFzc05hbWV9LCAuJHt2aWV3Q2xhc3NOYW1lfSwgLiR7bmFtZVdyYXBwZXJNYXRjaGluZ0ZpbHRlckNsYXNzTmFtZX0ge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2F1dG9Db2xvcih0aGVtZSwgJyNjYmU3ZmYnKX07XG4gICAgICAgIGFuaW1hdGlvbjogJHthbmltYXRpb25zLmZsYXNofSAxcyBjdWJpYy1iZXppZXIoMC4xMiwgMCwgMC4zOSwgMCk7XG4gICAgICB9XG4gICAgICAmIC4ke3NwYW5CYXJDbGFzc05hbWV9IHtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgIH1cbiAgICAgICYgLiR7c3BhbkJhckxhYmVsQ2xhc3NOYW1lfSB7XG4gICAgICAgIGNvbG9yOiAke2F1dG9Db2xvcih0aGVtZSwgJyMwMDAnKX07XG4gICAgICB9XG4gICAgICAmOmhvdmVyIC4ke25hbWVXcmFwcGVyQ2xhc3NOYW1lfSwgOmhvdmVyIC4ke3ZpZXdDbGFzc05hbWV9IHtcbiAgICAgICAgYmFja2dyb3VuZDogJHthdXRvQ29sb3IodGhlbWUsICcjZDVlYmZmJyl9O1xuICAgICAgICBib3gtc2hhZG93OiAwIDFweCAwICR7YXV0b0NvbG9yKHRoZW1lLCAnI2RkZCcpfTtcbiAgICAgIH1cbiAgICBgLFxuXG4gICAgcm93RXhwYW5kZWRBbmRNYXRjaGluZ0ZpbHRlcjogY3NzYFxuICAgICAgbGFiZWw6IHJvd0V4cGFuZGVkQW5kTWF0Y2hpbmdGaWx0ZXI7XG4gICAgICAmOmhvdmVyIC4ke3ZpZXdDbGFzc05hbWV9IHtcbiAgICAgICAgYmFja2dyb3VuZDogJHthdXRvQ29sb3IodGhlbWUsICcjZmZlY2NmJyl9O1xuICAgICAgfVxuICAgIGAsXG5cbiAgICBuYW1lOiBjc3NgXG4gICAgICBsYWJlbDogbmFtZTtcbiAgICAgIGNvbG9yOiAke2F1dG9Db2xvcih0aGVtZSwgJyMwMDAnKX07XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICBmbGV4OiAxIDEgYXV0bztcbiAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgICBvdmVyZmxvdy15OiBoaWRkZW47XG4gICAgICBvdmVyZmxvdy14OiBhdXRvO1xuICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgICBwYWRkaW5nLWxlZnQ6IDRweDtcbiAgICAgIHBhZGRpbmctcmlnaHQ6IDAuMjVlbTtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIC1tcy1vdmVyZmxvdy1zdHlsZTogbm9uZTtcbiAgICAgIHNjcm9sbGJhci13aWR0aDogbm9uZTtcbiAgICAgICY6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cbiAgICAgICY6OmJlZm9yZSB7XG4gICAgICAgIGNvbnRlbnQ6ICcgJztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB0b3A6IDRweDtcbiAgICAgICAgYm90dG9tOiA0cHg7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICAgIGJvcmRlci1sZWZ0OiA0cHggc29saWQ7XG4gICAgICAgIGJvcmRlci1sZWZ0LWNvbG9yOiBpbmhlcml0O1xuICAgICAgfVxuICAgICAgJjpmb2N1cyB7XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgIH1cbiAgICAgICY6aG92ZXIgPiBzbWFsbCB7XG4gICAgICAgIGNvbG9yOiAke2F1dG9Db2xvcih0aGVtZSwgJyMwMDAnKX07XG4gICAgICB9XG4gICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICBib3JkZXI6IG5vbmU7XG4gICAgYCxcbiAgICBuYW1lRGV0YWlsRXhwYW5kZWQ6IGNzc2BcbiAgICAgIGxhYmVsOiBuYW1lRGV0YWlsRXhwYW5kZWQ7XG4gICAgICAmOjpiZWZvcmUge1xuICAgICAgICBib3R0b206IDA7XG4gICAgICB9XG4gICAgYCxcbiAgICBzdmNOYW1lOiBjc3NgXG4gICAgICBsYWJlbDogc3ZjTmFtZTtcbiAgICAgIHBhZGRpbmc6IDAgMC4yNXJlbSAwIDAuNXJlbTtcbiAgICAgIGZvbnQtc2l6ZTogMS4wNWVtO1xuICAgIGAsXG4gICAgc3ZjTmFtZUNoaWxkcmVuQ29sbGFwc2VkOiBjc3NgXG4gICAgICBsYWJlbDogc3ZjTmFtZUNoaWxkcmVuQ29sbGFwc2VkO1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgYCxcbiAgICBlcnJvckljb246IGNzc2BcbiAgICAgIGxhYmVsOiBlcnJvckljb247XG4gICAgICBib3JkZXItcmFkaXVzOiA2LjVweDtcbiAgICAgIGNvbG9yOiAke2F1dG9Db2xvcih0aGVtZSwgJyNmZmYnKX07XG4gICAgICBmb250LXNpemU6IDAuODVlbTtcbiAgICAgIG1hcmdpbi1yaWdodDogMC4yNXJlbTtcbiAgICAgIHBhZGRpbmc6IDFweDtcbiAgICBgLFxuICAgIHJwY0NvbG9yTWFya2VyOiBjc3NgXG4gICAgICBsYWJlbDogcnBjQ29sb3JNYXJrZXI7XG4gICAgICBib3JkZXItcmFkaXVzOiA2LjVweDtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIGZvbnQtc2l6ZTogMC44NWVtO1xuICAgICAgaGVpZ2h0OiAxZW07XG4gICAgICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW07XG4gICAgICBwYWRkaW5nOiAxcHg7XG4gICAgICB3aWR0aDogMWVtO1xuICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICBgLFxuICAgIGxhYmVsUmlnaHQ6IGNzc2BcbiAgICAgIGxhYmVsOiBsYWJlbFJpZ2h0O1xuICAgICAgbGVmdDogMTAwJTtcbiAgICBgLFxuICAgIGxhYmVsTGVmdDogY3NzYFxuICAgICAgbGFiZWw6IGxhYmVsTGVmdDtcbiAgICAgIHJpZ2h0OiAxMDAlO1xuICAgIGAsXG4gIH07XG59KTtcblxuZXhwb3J0IHR5cGUgU3BhbkJhclJvd1Byb3BzID0ge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHRoZW1lOiBHcmFmYW5hVGhlbWUyO1xuICBjb2xvcjogc3RyaW5nO1xuICBzcGFuQmFyT3B0aW9uczogU3BhbkJhck9wdGlvbnMgfCB1bmRlZmluZWQ7XG4gIGNvbHVtbkRpdmlzaW9uOiBudW1iZXI7XG4gIGlzQ2hpbGRyZW5FeHBhbmRlZDogYm9vbGVhbjtcbiAgaXNEZXRhaWxFeHBhbmRlZDogYm9vbGVhbjtcbiAgaXNNYXRjaGluZ0ZpbHRlcjogYm9vbGVhbjtcbiAgaXNGb2N1c2VkOiBib29sZWFuO1xuICBvbkRldGFpbFRvZ2dsZWQ6IChzcGFuSUQ6IHN0cmluZykgPT4gdm9pZDtcbiAgb25DaGlsZHJlblRvZ2dsZWQ6IChzcGFuSUQ6IHN0cmluZykgPT4gdm9pZDtcbiAgbnVtVGlja3M6IG51bWJlcjtcbiAgcnBjPzpcbiAgICB8IHtcbiAgICAgICAgdmlld1N0YXJ0OiBudW1iZXI7XG4gICAgICAgIHZpZXdFbmQ6IG51bWJlcjtcbiAgICAgICAgY29sb3I6IHN0cmluZztcbiAgICAgICAgb3BlcmF0aW9uTmFtZTogc3RyaW5nO1xuICAgICAgICBzZXJ2aWNlTmFtZTogc3RyaW5nO1xuICAgICAgfVxuICAgIHwgVE5pbDtcbiAgbm9JbnN0cnVtZW50ZWRTZXJ2ZXI/OlxuICAgIHwge1xuICAgICAgICBjb2xvcjogc3RyaW5nO1xuICAgICAgICBzZXJ2aWNlTmFtZTogc3RyaW5nO1xuICAgICAgfVxuICAgIHwgVE5pbDtcbiAgc2hvd0Vycm9ySWNvbjogYm9vbGVhbjtcbiAgZ2V0Vmlld2VkQm91bmRzOiBWaWV3ZWRCb3VuZHNGdW5jdGlvblR5cGU7XG4gIHRyYWNlU3RhcnRUaW1lOiBudW1iZXI7XG4gIHNwYW46IFRyYWNlU3BhbjtcbiAgaG92ZXJJbmRlbnRHdWlkZUlkczogU2V0PHN0cmluZz47XG4gIGFkZEhvdmVySW5kZW50R3VpZGVJZDogKHNwYW5JRDogc3RyaW5nKSA9PiB2b2lkO1xuICByZW1vdmVIb3ZlckluZGVudEd1aWRlSWQ6IChzcGFuSUQ6IHN0cmluZykgPT4gdm9pZDtcbiAgY2xpcHBpbmdMZWZ0PzogYm9vbGVhbjtcbiAgY2xpcHBpbmdSaWdodD86IGJvb2xlYW47XG4gIGNyZWF0ZVNwYW5MaW5rPzogU3BhbkxpbmtGdW5jO1xuICBkYXRhc291cmNlVHlwZTogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBUaGlzIHdhcyBvcmlnaW5hbGx5IGEgc3RhdGVsZXNzIGZ1bmN0aW9uLCBidXQgY2hhbmdpbmcgdG8gYSBQdXJlQ29tcG9uZW50XG4gKiByZWR1Y2VkIHRoZSByZW5kZXIgdGltZSBvZiBleHBhbmRpbmcgYSBzcGFuIHJvdyBkZXRhaWwgYnkgfjUwJS4gVGhpcyBpc1xuICogZXZlbiB0cnVlIGluIHRoZSBjYXNlIHdoZXJlIHRoZSBzdGF0ZWxlc3MgZnVuY3Rpb24gaGFzIHRoZSBzYW1lIHByb3AgdHlwZXMgYXNcbiAqIHRoaXMgY2xhc3MgYW5kIGFycm93IGZ1bmN0aW9ucyBhcmUgY3JlYXRlZCBpbiB0aGUgc3RhdGVsZXNzIGZ1bmN0aW9uIGFzXG4gKiBoYW5kbGVycyB0byB0aGUgb25DbGljayBwcm9wcy4gRS5nLiBmb3Igbm93LCB0aGUgUHVyZUNvbXBvbmVudCBpcyBtb3JlXG4gKiBwZXJmb3JtYW5jZSB0aGFuIHRoZSBzdGF0ZWxlc3MgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBVbnRoZW1lZFNwYW5CYXJSb3cgZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PFNwYW5CYXJSb3dQcm9wcz4ge1xuICBzdGF0aWMgZGlzcGxheU5hbWUgPSAnVW50aGVtZWRTcGFuQmFyUm93JztcbiAgc3RhdGljIGRlZmF1bHRQcm9wczogUGFydGlhbDxTcGFuQmFyUm93UHJvcHM+ID0ge1xuICAgIGNsYXNzTmFtZTogJycsXG4gICAgcnBjOiBudWxsLFxuICB9O1xuXG4gIF9kZXRhaWxUb2dnbGUgPSAoKSA9PiB7XG4gICAgdGhpcy5wcm9wcy5vbkRldGFpbFRvZ2dsZWQodGhpcy5wcm9wcy5zcGFuLnNwYW5JRCk7XG4gIH07XG5cbiAgX2NoaWxkcmVuVG9nZ2xlID0gKCkgPT4ge1xuICAgIHRoaXMucHJvcHMub25DaGlsZHJlblRvZ2dsZWQodGhpcy5wcm9wcy5zcGFuLnNwYW5JRCk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNvbG9yLFxuICAgICAgc3BhbkJhck9wdGlvbnMsXG4gICAgICBjb2x1bW5EaXZpc2lvbixcbiAgICAgIGlzQ2hpbGRyZW5FeHBhbmRlZCxcbiAgICAgIGlzRGV0YWlsRXhwYW5kZWQsXG4gICAgICBpc01hdGNoaW5nRmlsdGVyLFxuICAgICAgaXNGb2N1c2VkLFxuICAgICAgbnVtVGlja3MsXG4gICAgICBycGMsXG4gICAgICBub0luc3RydW1lbnRlZFNlcnZlcixcbiAgICAgIHNob3dFcnJvckljb24sXG4gICAgICBnZXRWaWV3ZWRCb3VuZHMsXG4gICAgICB0cmFjZVN0YXJ0VGltZSxcbiAgICAgIHNwYW4sXG4gICAgICBob3ZlckluZGVudEd1aWRlSWRzLFxuICAgICAgYWRkSG92ZXJJbmRlbnRHdWlkZUlkLFxuICAgICAgcmVtb3ZlSG92ZXJJbmRlbnRHdWlkZUlkLFxuICAgICAgY2xpcHBpbmdMZWZ0LFxuICAgICAgY2xpcHBpbmdSaWdodCxcbiAgICAgIHRoZW1lLFxuICAgICAgY3JlYXRlU3BhbkxpbmssXG4gICAgICBkYXRhc291cmNlVHlwZSxcbiAgICB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7XG4gICAgICBkdXJhdGlvbixcbiAgICAgIGhhc0NoaWxkcmVuOiBpc1BhcmVudCxcbiAgICAgIG9wZXJhdGlvbk5hbWUsXG4gICAgICBwcm9jZXNzOiB7IHNlcnZpY2VOYW1lIH0sXG4gICAgfSA9IHNwYW47XG4gICAgY29uc3QgbGFiZWwgPSBmb3JtYXREdXJhdGlvbihkdXJhdGlvbik7XG5cbiAgICBjb25zdCB2aWV3Qm91bmRzID0gZ2V0Vmlld2VkQm91bmRzKHNwYW4uc3RhcnRUaW1lLCBzcGFuLnN0YXJ0VGltZSArIHNwYW4uZHVyYXRpb24pO1xuICAgIGNvbnN0IHZpZXdTdGFydCA9IHZpZXdCb3VuZHMuc3RhcnQ7XG4gICAgY29uc3Qgdmlld0VuZCA9IHZpZXdCb3VuZHMuZW5kO1xuICAgIGNvbnN0IHN0eWxlcyA9IGdldFN0eWxlcyh0aGVtZSk7XG5cbiAgICBjb25zdCBsYWJlbERldGFpbCA9IGAke3NlcnZpY2VOYW1lfTo6JHtvcGVyYXRpb25OYW1lfWA7XG4gICAgbGV0IGxvbmdMYWJlbDtcbiAgICBsZXQgaGludENsYXNzTmFtZTtcbiAgICBpZiAodmlld1N0YXJ0ID4gMSAtIHZpZXdFbmQpIHtcbiAgICAgIGxvbmdMYWJlbCA9IGAke2xhYmVsRGV0YWlsfSB8ICR7bGFiZWx9YDtcbiAgICAgIGhpbnRDbGFzc05hbWUgPSBzdHlsZXMubGFiZWxMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBsb25nTGFiZWwgPSBgJHtsYWJlbH0gfCAke2xhYmVsRGV0YWlsfWA7XG4gICAgICBoaW50Q2xhc3NOYW1lID0gc3R5bGVzLmxhYmVsUmlnaHQ7XG4gICAgfVxuXG4gICAgY29uc3QgY291bnRMaW5rcyA9IChsaW5rcz86IFNwYW5MaW5rcyk6IG51bWJlciA9PiB7XG4gICAgICBpZiAoIWxpbmtzKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhsaW5rcykucmVkdWNlKChjb3VudCwgYXJyKSA9PiBjb3VudCArIGFyci5sZW5ndGgsIDApO1xuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRpbWVsaW5lUm93XG4gICAgICAgIGNsYXNzTmFtZT17Y3goXG4gICAgICAgICAgc3R5bGVzLnJvdyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBbc3R5bGVzLnJvd0V4cGFuZGVkXTogaXNEZXRhaWxFeHBhbmRlZCxcbiAgICAgICAgICAgIFtzdHlsZXMucm93TWF0Y2hpbmdGaWx0ZXJdOiBpc01hdGNoaW5nRmlsdGVyLFxuICAgICAgICAgICAgW3N0eWxlcy5yb3dFeHBhbmRlZEFuZE1hdGNoaW5nRmlsdGVyXTogaXNNYXRjaGluZ0ZpbHRlciAmJiBpc0RldGFpbEV4cGFuZGVkLFxuICAgICAgICAgICAgW3N0eWxlcy5yb3dGb2N1c2VkXTogaXNGb2N1c2VkLFxuICAgICAgICAgICAgW3N0eWxlcy5yb3dDbGlwcGluZ0xlZnRdOiBjbGlwcGluZ0xlZnQsXG4gICAgICAgICAgICBbc3R5bGVzLnJvd0NsaXBwaW5nUmlnaHRdOiBjbGlwcGluZ1JpZ2h0LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2xhc3NOYW1lXG4gICAgICAgICl9XG4gICAgICA+XG4gICAgICAgIDxUaW1lbGluZVJvdy5DZWxsIGNsYXNzTmFtZT17Y3goc3R5bGVzLm5hbWVDb2x1bW4sIG5hbWVDb2x1bW5DbGFzc05hbWUpfSB3aWR0aD17Y29sdW1uRGl2aXNpb259PlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y3goc3R5bGVzLm5hbWVXcmFwcGVyLCBuYW1lV3JhcHBlckNsYXNzTmFtZSwge1xuICAgICAgICAgICAgICBbc3R5bGVzLm5hbWVXcmFwcGVyTWF0Y2hpbmdGaWx0ZXJdOiBpc01hdGNoaW5nRmlsdGVyLFxuICAgICAgICAgICAgICBuYW1lV3JhcHBlck1hdGNoaW5nRmlsdGVyOiBpc01hdGNoaW5nRmlsdGVyLFxuICAgICAgICAgICAgfSl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPFNwYW5UcmVlT2Zmc2V0XG4gICAgICAgICAgICAgIG9uQ2xpY2s9e2lzUGFyZW50ID8gdGhpcy5fY2hpbGRyZW5Ub2dnbGUgOiB1bmRlZmluZWR9XG4gICAgICAgICAgICAgIGNoaWxkcmVuVmlzaWJsZT17aXNDaGlsZHJlbkV4cGFuZGVkfVxuICAgICAgICAgICAgICBzcGFuPXtzcGFufVxuICAgICAgICAgICAgICBob3ZlckluZGVudEd1aWRlSWRzPXtob3ZlckluZGVudEd1aWRlSWRzfVxuICAgICAgICAgICAgICBhZGRIb3ZlckluZGVudEd1aWRlSWQ9e2FkZEhvdmVySW5kZW50R3VpZGVJZH1cbiAgICAgICAgICAgICAgcmVtb3ZlSG92ZXJJbmRlbnRHdWlkZUlkPXtyZW1vdmVIb3ZlckluZGVudEd1aWRlSWR9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeChzdHlsZXMubmFtZSwgeyBbc3R5bGVzLm5hbWVEZXRhaWxFeHBhbmRlZF06IGlzRGV0YWlsRXhwYW5kZWQgfSl9XG4gICAgICAgICAgICAgIGFyaWEtY2hlY2tlZD17aXNEZXRhaWxFeHBhbmRlZH1cbiAgICAgICAgICAgICAgdGl0bGU9e2xhYmVsRGV0YWlsfVxuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLl9kZXRhaWxUb2dnbGV9XG4gICAgICAgICAgICAgIHJvbGU9XCJzd2l0Y2hcIlxuICAgICAgICAgICAgICBzdHlsZT17eyBib3JkZXJDb2xvcjogY29sb3IgfX1cbiAgICAgICAgICAgICAgdGFiSW5kZXg9ezB9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjeChzdHlsZXMuc3ZjTmFtZSwge1xuICAgICAgICAgICAgICAgICAgW3N0eWxlcy5zdmNOYW1lQ2hpbGRyZW5Db2xsYXBzZWRdOiBpc1BhcmVudCAmJiAhaXNDaGlsZHJlbkV4cGFuZGVkLFxuICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3Nob3dFcnJvckljb24gJiYgKFxuICAgICAgICAgICAgICAgICAgPElvQWxlcnRcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHNwYW4uZXJyb3JJY29uQ29sb3JcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYXV0b0NvbG9yKHRoZW1lLCBzcGFuLmVycm9ySWNvbkNvbG9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBhdXRvQ29sb3IodGhlbWUsICcjZGIyODI4JyksXG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17c3R5bGVzLmVycm9ySWNvbn1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICB7c2VydmljZU5hbWV9eycgJ31cbiAgICAgICAgICAgICAgICB7cnBjICYmIChcbiAgICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICA8SW9BcnJvd1JpZ2h0QSAvPiA8aSBjbGFzc05hbWU9e3N0eWxlcy5ycGNDb2xvck1hcmtlcn0gc3R5bGU9e3sgYmFja2dyb3VuZDogcnBjLmNvbG9yIH19IC8+XG4gICAgICAgICAgICAgICAgICAgIHtycGMuc2VydmljZU5hbWV9XG4gICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICB7bm9JbnN0cnVtZW50ZWRTZXJ2ZXIgJiYgKFxuICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxJb0Fycm93UmlnaHRBIC8+eycgJ31cbiAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPXtzdHlsZXMucnBjQ29sb3JNYXJrZXJ9IHN0eWxlPXt7IGJhY2tncm91bmQ6IG5vSW5zdHJ1bWVudGVkU2VydmVyLmNvbG9yIH19IC8+XG4gICAgICAgICAgICAgICAgICAgIHtub0luc3RydW1lbnRlZFNlcnZlci5zZXJ2aWNlTmFtZX1cbiAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgIDxzbWFsbCBjbGFzc05hbWU9e3N0eWxlcy5lbmRwb2ludE5hbWV9PntycGMgPyBycGMub3BlcmF0aW9uTmFtZSA6IG9wZXJhdGlvbk5hbWV9PC9zbWFsbD5cbiAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzTmFtZT17c3R5bGVzLmVuZHBvaW50TmFtZX0+IHt0aGlzLmdldFNwYW5CYXJMYWJlbChzcGFuLCBzcGFuQmFyT3B0aW9ucywgbGFiZWwpfTwvc21hbGw+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIHtjcmVhdGVTcGFuTGluayAmJlxuICAgICAgICAgICAgICAoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmtzID0gY3JlYXRlU3Bhbkxpbmsoc3Bhbik7XG4gICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSBjb3VudExpbmtzKGxpbmtzKTtcbiAgICAgICAgICAgICAgICBpZiAobGlua3MgJiYgY291bnQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmsgPSBsaW5rcy5sb2dMaW5rcz8uWzBdID8/IGxpbmtzLm1ldHJpY0xpbmtzPy5bMF0gPz8gbGlua3MudHJhY2VMaW5rcz8uWzBdID8/IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgIGlmICghbGluaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgICAgICBocmVmPXtsaW5rLmhyZWZ9XG4gICAgICAgICAgICAgICAgICAgICAgLy8gTmVlZHMgdG8gaGF2ZSB0YXJnZXQgb3RoZXJ3aXNlIHByZXZlbnREZWZhdWx0IHdvdWxkIG5vdCB3b3JrIGR1ZSB0byBhbmd1bGFyUm91dGVyLlxuICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD17J19ibGFuayd9XG4gICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgbWFyZ2luUmlnaHQ6ICc1cHgnIH19XG4gICAgICAgICAgICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5rLm9uQ2xpY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPyAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSB8fCBldmVudC5zaGlmdEtleSkgJiYgbGluay5vbkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsub25DbGljayhldmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIHtsaW5rLmNvbnRlbnR9XG4gICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaW5rcyAmJiBjb3VudCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiA8U3BhbkxpbmtzTWVudSBsaW5rcz17bGlua3N9IGRhdGFzb3VyY2VUeXBlPXtkYXRhc291cmNlVHlwZX0gLz47XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkoKX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9UaW1lbGluZVJvdy5DZWxsPlxuICAgICAgICA8VGltZWxpbmVSb3cuQ2VsbFxuICAgICAgICAgIGNsYXNzTmFtZT17Y3goc3R5bGVzLnZpZXcsIHZpZXdDbGFzc05hbWUsIHtcbiAgICAgICAgICAgIFtzdHlsZXMudmlld0V4cGFuZGVkXTogaXNEZXRhaWxFeHBhbmRlZCxcbiAgICAgICAgICAgIFtzdHlsZXMudmlld0V4cGFuZGVkQW5kTWF0Y2hpbmdGaWx0ZXJdOiBpc01hdGNoaW5nRmlsdGVyICYmIGlzRGV0YWlsRXhwYW5kZWQsXG4gICAgICAgICAgfSl9XG4gICAgICAgICAgZGF0YS10ZXN0aWQ9XCJzcGFuLXZpZXdcIlxuICAgICAgICAgIHN0eWxlPXt7IGN1cnNvcjogJ3BvaW50ZXInIH19XG4gICAgICAgICAgd2lkdGg9ezEgLSBjb2x1bW5EaXZpc2lvbn1cbiAgICAgICAgICBvbkNsaWNrPXt0aGlzLl9kZXRhaWxUb2dnbGV9XG4gICAgICAgID5cbiAgICAgICAgICA8VGlja3MgbnVtVGlja3M9e251bVRpY2tzfSAvPlxuICAgICAgICAgIDxTcGFuQmFyXG4gICAgICAgICAgICBycGM9e3JwY31cbiAgICAgICAgICAgIHZpZXdTdGFydD17dmlld1N0YXJ0fVxuICAgICAgICAgICAgdmlld0VuZD17dmlld0VuZH1cbiAgICAgICAgICAgIGdldFZpZXdlZEJvdW5kcz17Z2V0Vmlld2VkQm91bmRzfVxuICAgICAgICAgICAgY29sb3I9e2NvbG9yfVxuICAgICAgICAgICAgc2hvcnRMYWJlbD17bGFiZWx9XG4gICAgICAgICAgICBsb25nTGFiZWw9e2xvbmdMYWJlbH1cbiAgICAgICAgICAgIHRyYWNlU3RhcnRUaW1lPXt0cmFjZVN0YXJ0VGltZX1cbiAgICAgICAgICAgIHNwYW49e3NwYW59XG4gICAgICAgICAgICBsYWJlbENsYXNzTmFtZT17YCR7c3BhbkJhckxhYmVsQ2xhc3NOYW1lfSAke2hpbnRDbGFzc05hbWV9YH1cbiAgICAgICAgICAgIGNsYXNzTmFtZT17c3BhbkJhckNsYXNzTmFtZX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L1RpbWVsaW5lUm93LkNlbGw+XG4gICAgICA8L1RpbWVsaW5lUm93PlxuICAgICk7XG4gIH1cblxuICBnZXRTcGFuQmFyTGFiZWwgPSAoc3BhbjogVHJhY2VTcGFuLCBzcGFuQmFyT3B0aW9uczogU3BhbkJhck9wdGlvbnMgfCB1bmRlZmluZWQsIGR1cmF0aW9uOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCB0eXBlID0gc3BhbkJhck9wdGlvbnM/LnR5cGUgPz8gJyc7XG5cbiAgICBpZiAodHlwZSA9PT0gTk9ORSkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJycgfHwgdHlwZSA9PT0gRFVSQVRJT04pIHtcbiAgICAgIHJldHVybiBgKCR7ZHVyYXRpb259KWA7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBUQUcpIHtcbiAgICAgIGNvbnN0IHRhZ0tleSA9IHNwYW5CYXJPcHRpb25zPy50YWc/LnRyaW0oKSA/PyAnJztcbiAgICAgIGlmICh0YWdLZXkgIT09ICcnICYmIHNwYW4udGFncykge1xuICAgICAgICBjb25zdCB0YWcgPSBzcGFuLnRhZ3M/LmZpbmQoKHRhZzogVHJhY2VLZXlWYWx1ZVBhaXIpID0+IHtcbiAgICAgICAgICByZXR1cm4gdGFnLmtleSA9PT0gdGFnS2V5O1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcHJvY2VzcyA9IHNwYW4ucHJvY2Vzcz8udGFncz8uZmluZCgocHJvY2VzczogVHJhY2VLZXlWYWx1ZVBhaXIpID0+IHtcbiAgICAgICAgICByZXR1cm4gcHJvY2Vzcy5rZXkgPT09IHRhZ0tleTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRhZykge1xuICAgICAgICAgIHJldHVybiBgKCR7dGFnLnZhbHVlfSlgO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9jZXNzKSB7XG4gICAgICAgICAgcmV0dXJuIGAoJHtwcm9jZXNzLnZhbHVlfSlgO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICcnO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUyKFVudGhlbWVkU3BhbkJhclJvdyk7XG4iXSwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEdBQUcsRUFBRUMsU0FBUyxRQUFRLGNBQWM7QUFDN0MsT0FBT0MsRUFBRSxNQUFNLFlBQVk7QUFDM0IsT0FBTyxLQUFLQyxLQUFLLE1BQU0sT0FBTztBQUM5QixPQUFPQyxPQUFPLE1BQU0sMEJBQTBCO0FBQzlDLE9BQU9DLGFBQWEsTUFBTSxrQ0FBa0M7QUFHNUQsU0FBU0MsYUFBYSxFQUFFQyxVQUFVLFFBQVEsYUFBYTtBQUV2RCxTQUFTQyxTQUFTLFFBQVEsVUFBVTtBQUNwQyxTQUFTQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsR0FBRyxRQUFRLDZCQUE2QjtBQUtqRSxPQUFPQyxPQUFPLE1BQU0sV0FBVztBQUMvQixTQUFTQyxhQUFhLFFBQVEsYUFBYTtBQUMzQyxPQUFPQyxjQUFjLE1BQU0sa0JBQWtCO0FBQzdDLE9BQU9DLEtBQUssTUFBTSxTQUFTO0FBQzNCLE9BQU9DLFdBQVcsTUFBTSxlQUFlO0FBQ3ZDLFNBQVNDLGNBQWMsUUFBa0MsU0FBUztBQUFDLFNBQUFDLEdBQUEsSUFBQUMsSUFBQSxFQUFBQyxJQUFBLElBQUFDLEtBQUE7QUFFbkUsSUFBTUMsZ0JBQWdCLEdBQUcsU0FBUztBQUNsQyxJQUFNQyxxQkFBcUIsR0FBRyxjQUFjO0FBQzVDLElBQU1DLG9CQUFvQixHQUFHLGFBQWE7QUFDMUMsSUFBTUMsa0NBQWtDLEdBQUcsMkJBQTJCO0FBQ3RFLElBQU1DLGFBQWEsR0FBRyxZQUFZO0FBQ2xDLElBQU1DLG1CQUFtQixHQUFHLFlBQVk7QUFFeEMsSUFBTUMsU0FBUyxHQUFHdEIsYUFBYSxDQUFDLFVBQUN1QixLQUFvQixFQUFLO0VBQ3hELElBQU1DLFVBQVUsR0FBRztJQUNqQkMsS0FBSyxFQUFFOUIsU0FBUyxDQUFBK0IsZUFBQSxLQUFBQSxlQUFBLEdBQUFDLDJCQUFBLHFJQUdNekIsU0FBUyxDQUFDcUIsS0FBSyxFQUFFLFNBQVMsQ0FBQztFQU1uRCxDQUFDO0VBRUQsT0FBTztJQUNMSyxXQUFXLEVBQUVsQyxHQUFHLENBQUFtQyxnQkFBQSxLQUFBQSxnQkFBQSxHQUFBRiwyQkFBQSxrSEFLZjtJQUNERyx5QkFBeUIsRUFBRXBDLEdBQUcsQ0FBQXFDLGdCQUFBLEtBQUFBLGdCQUFBLEdBQUFKLDJCQUFBLHVGQUVSekIsU0FBUyxDQUFDcUIsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUNoRDtJQUNEUyxVQUFVLEVBQUV0QyxHQUFHLENBQUF1QyxnQkFBQSxLQUFBQSxnQkFBQSxHQUFBTiwyQkFBQSxpS0FRZDtJQUNETyxZQUFZLEVBQUV4QyxHQUFHLENBQUF5QyxnQkFBQSxLQUFBQSxnQkFBQSxHQUFBUiwyQkFBQSwrREFFTnpCLFNBQVMsQ0FBQ3FCLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FDckM7SUFDRGEsSUFBSSxFQUFFMUMsR0FBRyxDQUFBMkMsZ0JBQUEsS0FBQUEsZ0JBQUEsR0FBQVYsMkJBQUEsNkRBR1I7SUFDRFcsWUFBWSxFQUFFNUMsR0FBRyxDQUFBNkMsZ0JBQUEsS0FBQUEsZ0JBQUEsR0FBQVosMkJBQUEsb0dBRUR6QixTQUFTLENBQUNxQixLQUFLLEVBQUUsU0FBUyxDQUFDLEVBQ3BCckIsU0FBUyxDQUFDcUIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUM5QztJQUNEaUIsNkJBQTZCLEVBQUU5QyxHQUFHLENBQUErQyxnQkFBQSxLQUFBQSxnQkFBQSxHQUFBZCwyQkFBQSxxSEFFbEJ6QixTQUFTLENBQUNxQixLQUFLLEVBQUUsU0FBUyxDQUFDLEVBQ3BCckIsU0FBUyxDQUFDcUIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUM5QztJQUNEbUIsR0FBRyxFQUFFaEQsR0FBRyxDQUFBaUQsZ0JBQUEsS0FBQUEsZ0JBQUEsR0FBQWhCLDJCQUFBLHdhQUVLWCxnQkFBZ0IsRUFHaEJDLHFCQUFxQixFQUNyQmYsU0FBUyxDQUFDcUIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUV4Qkwsb0JBQW9CLEVBSXpCaEIsU0FBUyxDQUFDcUIsS0FBSyxFQUFFLFNBQVMsQ0FBQyxFQUMzQnJCLFNBQVMsQ0FBQ3FCLEtBQUssRUFBRSxTQUFTLENBQUMsRUFDM0JyQixTQUFTLENBQUNxQixLQUFLLEVBQUUsTUFBTSxDQUFDLEVBR25CSCxhQUFhLEVBQ0ZsQixTQUFTLENBQUNxQixLQUFLLEVBQUUsU0FBUyxDQUFDLEVBQzFCckIsU0FBUyxDQUFDcUIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUVoRDtJQUNEcUIsZUFBZSxFQUFFbEQsR0FBRyxDQUFBbUQsaUJBQUEsS0FBQUEsaUJBQUEsR0FBQWxCLDJCQUFBLHlVQUViTixtQkFBbUIsRUFPbEJuQixTQUFTLENBQUNxQixLQUFLLEVBQUUsd0JBQXdCLENBQUMsRUFDMUNyQixTQUFTLENBQUNxQixLQUFLLEVBQUUscUJBQXFCLENBQUMsQ0FLOUM7SUFDRHVCLGdCQUFnQixFQUFFcEQsR0FBRyxDQUFBcUQsaUJBQUEsS0FBQUEsaUJBQUEsR0FBQXBCLDJCQUFBLHVVQUVkUCxhQUFhLEVBT1psQixTQUFTLENBQUNxQixLQUFLLEVBQUUsd0JBQXdCLENBQUMsRUFDMUNyQixTQUFTLENBQUNxQixLQUFLLEVBQUUsd0JBQXdCLENBQUMsQ0FLakQ7SUFDRHlCLFdBQVcsRUFBRXRELEdBQUcsQ0FBQXVELGlCQUFBLEtBQUFBLGlCQUFBLEdBQUF0QiwyQkFBQSxnV0FFVFgsZ0JBQWdCLEVBR2hCQyxxQkFBcUIsRUFDZmYsU0FBUyxDQUFDcUIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUU5Qkwsb0JBQW9CLEVBQWNBLG9CQUFvQixFQUMzQ2hCLFNBQVMsQ0FBQ3FCLEtBQUssRUFBRSxTQUFTLENBQUMsRUFDbkJyQixTQUFTLENBQUNxQixLQUFLLEVBQUUsTUFBTSxDQUFDLEVBRTNDSixrQ0FBa0MsRUFDdkJqQixTQUFTLENBQUNxQixLQUFLLEVBQUUsU0FBUyxDQUFDLEVBRWhDSCxhQUFhLEVBQ1JsQixTQUFTLENBQUNxQixLQUFLLEVBQUUsTUFBTSxDQUFDLENBRXpDO0lBQ0QyQixpQkFBaUIsRUFBRXhELEdBQUcsQ0FBQXlELGlCQUFBLEtBQUFBLGlCQUFBLEdBQUF4QiwyQkFBQSw0VUFFQXpCLFNBQVMsQ0FBQ3FCLEtBQUssRUFBRSxTQUFTLENBQUMsRUFDcENMLG9CQUFvQixFQUd6QmhCLFNBQVMsQ0FBQ3FCLEtBQUssRUFBRSxTQUFTLENBQUMsRUFDM0JyQixTQUFTLENBQUNxQixLQUFLLEVBQUUsU0FBUyxDQUFDLEVBQzNCckIsU0FBUyxDQUFDcUIsS0FBSyxFQUFFLFNBQVMsQ0FBQyxFQUd0QkgsYUFBYSxFQUNGbEIsU0FBUyxDQUFDcUIsS0FBSyxFQUFFLFNBQVMsQ0FBQyxFQUMxQnJCLFNBQVMsQ0FBQ3FCLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FFaEQ7SUFDRDZCLFVBQVUsRUFBRTFELEdBQUcsQ0FBQTJELGlCQUFBLEtBQUFBLGlCQUFBLEdBQUExQiwyQkFBQSxrZEFFT3pCLFNBQVMsQ0FBQ3FCLEtBQUssRUFBRSxTQUFTLENBQUMsRUFDbENDLFVBQVUsQ0FBQ0MsS0FBSyxFQUN4QlAsb0JBQW9CLEVBQU1FLGFBQWEsRUFBTUQsa0NBQWtDLEVBQzlEakIsU0FBUyxDQUFDcUIsS0FBSyxFQUFFLFNBQVMsQ0FBQyxFQUNsQ0MsVUFBVSxDQUFDQyxLQUFLLEVBRTFCVCxnQkFBZ0IsRUFHaEJDLHFCQUFxQixFQUNmZixTQUFTLENBQUNxQixLQUFLLEVBQUUsTUFBTSxDQUFDLEVBRXhCTCxvQkFBb0IsRUFBYUUsYUFBYSxFQUN6Q2xCLFNBQVMsQ0FBQ3FCLEtBQUssRUFBRSxTQUFTLENBQUMsRUFDbkJyQixTQUFTLENBQUNxQixLQUFLLEVBQUUsTUFBTSxDQUFDLENBRWpEO0lBRUQrQiw0QkFBNEIsRUFBRTVELEdBQUcsQ0FBQTZELGlCQUFBLEtBQUFBLGlCQUFBLEdBQUE1QiwyQkFBQSxzSEFFcEJQLGFBQWEsRUFDUmxCLFNBQVMsQ0FBQ3FCLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FFNUM7SUFFRGlDLElBQUksRUFBRTlELEdBQUcsQ0FBQStELGlCQUFBLEtBQUFBLGlCQUFBLEdBQUE5QiwyQkFBQSw0eUJBRUV6QixTQUFTLENBQUNxQixLQUFLLEVBQUUsTUFBTSxDQUFDLEVBNEJ0QnJCLFNBQVMsQ0FBQ3FCLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FLcEM7SUFDRG1DLGtCQUFrQixFQUFFaEUsR0FBRyxDQUFBaUUsaUJBQUEsS0FBQUEsaUJBQUEsR0FBQWhDLDJCQUFBLGdHQUt0QjtJQUNEaUMsT0FBTyxFQUFFbEUsR0FBRyxDQUFBbUUsaUJBQUEsS0FBQUEsaUJBQUEsR0FBQWxDLDJCQUFBLG1HQUlYO0lBQ0RtQyx3QkFBd0IsRUFBRXBFLEdBQUcsQ0FBQXFFLGlCQUFBLEtBQUFBLGlCQUFBLEdBQUFwQywyQkFBQSwyR0FJNUI7SUFDRHFDLFNBQVMsRUFBRXRFLEdBQUcsQ0FBQXVFLGlCQUFBLEtBQUFBLGlCQUFBLEdBQUF0QywyQkFBQSxzS0FHSHpCLFNBQVMsQ0FBQ3FCLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FJbEM7SUFDRDJDLGNBQWMsRUFBRXhFLEdBQUcsQ0FBQXlFLGlCQUFBLEtBQUFBLGlCQUFBLEdBQUF4QywyQkFBQSwwUEFVbEI7SUFDRHlDLFVBQVUsRUFBRTFFLEdBQUcsQ0FBQTJFLGlCQUFBLEtBQUFBLGlCQUFBLEdBQUExQywyQkFBQSwyREFHZDtJQUNEMkMsU0FBUyxFQUFFNUUsR0FBRyxDQUFBNkUsaUJBQUEsS0FBQUEsaUJBQUEsR0FBQTVDLDJCQUFBO0VBSWhCLENBQUM7QUFDSCxDQUFDLENBQUM7QUEyQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQWE2QyxrQkFBa0IsMEJBQUFDLG9CQUFBO0VBQUEsU0FBQUQsbUJBQUE7SUFBQSxJQUFBRSxLQUFBO0lBQUEsU0FBQUMsSUFBQSxHQUFBQyxTQUFBLENBQUFDLE1BQUEsRUFBQUMsSUFBQSxPQUFBQyxLQUFBLENBQUFKLElBQUEsR0FBQUssSUFBQSxNQUFBQSxJQUFBLEdBQUFMLElBQUEsRUFBQUssSUFBQTtNQUFBRixJQUFBLENBQUFFLElBQUEsSUFBQUosU0FBQSxDQUFBSSxJQUFBO0lBQUE7SUFBQU4sS0FBQSxHQUFBRCxvQkFBQSxDQUFBUSxJQUFBLENBQUFDLEtBQUEsQ0FBQVQsb0JBQUEsU0FBQVUsTUFBQSxDQUFBTCxJQUFBO0lBQUFKLEtBQUEsQ0FPN0JVLGFBQWEsR0FBRyxZQUFNO01BQ3BCVixLQUFBLENBQUtXLEtBQUssQ0FBQ0MsZUFBZSxDQUFDWixLQUFBLENBQUtXLEtBQUssQ0FBQ0UsSUFBSSxDQUFDQyxNQUFNLENBQUM7SUFDcEQsQ0FBQztJQUFBZCxLQUFBLENBRURlLGVBQWUsR0FBRyxZQUFNO01BQ3RCZixLQUFBLENBQUtXLEtBQUssQ0FBQ0ssaUJBQWlCLENBQUNoQixLQUFBLENBQUtXLEtBQUssQ0FBQ0UsSUFBSSxDQUFDQyxNQUFNLENBQUM7SUFDdEQsQ0FBQztJQUFBZCxLQUFBLENBeU1EaUIsZUFBZSxHQUFHLFVBQUNKLElBQWUsRUFBRUssY0FBMEMsRUFBRUMsUUFBZ0IsRUFBSztNQUFBLElBQUFDLG9CQUFBO01BQ25HLElBQU1DLElBQUksSUFBQUQsb0JBQUEsR0FBR0YsY0FBYyxvQkFBZEEsY0FBYyxDQUFFRyxJQUFJLFlBQUFELG9CQUFBLEdBQUksRUFBRTtNQUV2QyxJQUFJQyxJQUFJLEtBQUszRixJQUFJLEVBQUU7UUFDakIsT0FBTyxFQUFFO01BQ1gsQ0FBQyxNQUFNLElBQUkyRixJQUFJLEtBQUssRUFBRSxJQUFJQSxJQUFJLEtBQUs1RixRQUFRLEVBQUU7UUFDM0MsYUFBVzBGLFFBQVE7TUFDckIsQ0FBQyxNQUFNLElBQUlFLElBQUksS0FBSzFGLEdBQUcsRUFBRTtRQUFBLElBQUEyRixxQkFBQSxFQUFBQyxtQkFBQTtRQUN2QixJQUFNQyxNQUFNLElBQUFGLHFCQUFBLEdBQUdKLGNBQWMsYUFBQUssbUJBQUEsR0FBZEwsY0FBYyxDQUFFTyxHQUFHLHFCQUFuQkYsbUJBQUEsQ0FBcUJHLElBQUksQ0FBQyxDQUFDLFlBQUFKLHFCQUFBLEdBQUksRUFBRTtRQUNoRCxJQUFJRSxNQUFNLEtBQUssRUFBRSxJQUFJWCxJQUFJLENBQUNjLElBQUksRUFBRTtVQUFBLElBQUFDLFVBQUEsRUFBQUMsYUFBQTtVQUM5QixJQUFNSixHQUFHLElBQUFHLFVBQUEsR0FBR2YsSUFBSSxDQUFDYyxJQUFJLHFCQUFUQyxVQUFBLENBQVdFLElBQUksQ0FBQyxVQUFDTCxHQUFzQixFQUFLO1lBQ3RELE9BQU9BLEdBQUcsQ0FBQ00sR0FBRyxLQUFLUCxNQUFNO1VBQzNCLENBQUMsQ0FBQztVQUNGLElBQU1RLE9BQU8sSUFBQUgsYUFBQSxHQUFHaEIsSUFBSSxDQUFDbUIsT0FBTyxjQUFBSCxhQUFBLEdBQVpBLGFBQUEsQ0FBY0YsSUFBSSxxQkFBbEJFLGFBQUEsQ0FBb0JDLElBQUksQ0FBQyxVQUFDRSxPQUEwQixFQUFLO1lBQ3ZFLE9BQU9BLE9BQU8sQ0FBQ0QsR0FBRyxLQUFLUCxNQUFNO1VBQy9CLENBQUMsQ0FBQztVQUVGLElBQUlDLEdBQUcsRUFBRTtZQUNQLGFBQVdBLEdBQUcsQ0FBQ1EsS0FBSztVQUN0QjtVQUNBLElBQUlELE9BQU8sRUFBRTtZQUNYLGFBQVdBLE9BQU8sQ0FBQ0MsS0FBSztVQUMxQjtRQUNGO01BQ0Y7TUFFQSxPQUFPLEVBQUU7SUFDWCxDQUFDO0lBQUEsT0FBQWpDLEtBQUE7RUFBQTtFQUFBa0MsY0FBQSxDQUFBcEMsa0JBQUEsRUFBQUMsb0JBQUE7RUFBQSxJQUFBb0MsTUFBQSxHQUFBckMsa0JBQUEsQ0FBQXNDLFNBQUE7RUFBQUQsTUFBQSxDQWxPREUsTUFBTSxHQUFOLFNBQUFBLE9BQUEsRUFBUztJQUFBLElBQUFDLEdBQUEsRUFBQUMsSUFBQSxFQUFBQyxJQUFBLEVBQUFDLElBQUEsRUFBQUMsSUFBQTtJQUNQLElBQUFDLFdBQUEsR0F3QkksSUFBSSxDQUFDaEMsS0FBSztNQXZCWmlDLFNBQVMsR0FBQUQsV0FBQSxDQUFUQyxTQUFTO01BQ1RDLEtBQUssR0FBQUYsV0FBQSxDQUFMRSxLQUFLO01BQ0wzQixjQUFjLEdBQUF5QixXQUFBLENBQWR6QixjQUFjO01BQ2Q0QixjQUFjLEdBQUFILFdBQUEsQ0FBZEcsY0FBYztNQUNkQyxrQkFBa0IsR0FBQUosV0FBQSxDQUFsQkksa0JBQWtCO01BQ2xCQyxnQkFBZ0IsR0FBQUwsV0FBQSxDQUFoQkssZ0JBQWdCO01BQ2hCQyxnQkFBZ0IsR0FBQU4sV0FBQSxDQUFoQk0sZ0JBQWdCO01BQ2hCQyxTQUFTLEdBQUFQLFdBQUEsQ0FBVE8sU0FBUztNQUNUQyxRQUFRLEdBQUFSLFdBQUEsQ0FBUlEsUUFBUTtNQUNSQyxHQUFHLEdBQUFULFdBQUEsQ0FBSFMsR0FBRztNQUNIQyxvQkFBb0IsR0FBQVYsV0FBQSxDQUFwQlUsb0JBQW9CO01BQ3BCQyxhQUFhLEdBQUFYLFdBQUEsQ0FBYlcsYUFBYTtNQUNiQyxlQUFlLEdBQUFaLFdBQUEsQ0FBZlksZUFBZTtNQUNmQyxjQUFjLEdBQUFiLFdBQUEsQ0FBZGEsY0FBYztNQUNkM0MsSUFBSSxHQUFBOEIsV0FBQSxDQUFKOUIsSUFBSTtNQUNKNEMsbUJBQW1CLEdBQUFkLFdBQUEsQ0FBbkJjLG1CQUFtQjtNQUNuQkMscUJBQXFCLEdBQUFmLFdBQUEsQ0FBckJlLHFCQUFxQjtNQUNyQkMsd0JBQXdCLEdBQUFoQixXQUFBLENBQXhCZ0Isd0JBQXdCO01BQ3hCQyxZQUFZLEdBQUFqQixXQUFBLENBQVppQixZQUFZO01BQ1pDLGFBQWEsR0FBQWxCLFdBQUEsQ0FBYmtCLGFBQWE7TUFDYmhILEtBQUssR0FBQThGLFdBQUEsQ0FBTDlGLEtBQUs7TUFDTGlILGNBQWMsR0FBQW5CLFdBQUEsQ0FBZG1CLGNBQWM7TUFDZEMsY0FBYyxHQUFBcEIsV0FBQSxDQUFkb0IsY0FBYztJQUVoQixJQUNFNUMsUUFBUSxHQUlOTixJQUFJLENBSk5NLFFBQVE7TUFDSzZDLFFBQVEsR0FHbkJuRCxJQUFJLENBSE5vRCxXQUFXO01BQ1hDLGFBQWEsR0FFWHJELElBQUksQ0FGTnFELGFBQWE7TUFDRkMsV0FBVyxHQUNwQnRELElBQUksQ0FETm1CLE9BQU8sQ0FBSW1DLFdBQVc7SUFFeEIsSUFBTUMsS0FBSyxHQUFHbkksY0FBYyxDQUFDa0YsUUFBUSxDQUFDO0lBRXRDLElBQU1rRCxVQUFVLEdBQUdkLGVBQWUsQ0FBQzFDLElBQUksQ0FBQ3lELFNBQVMsRUFBRXpELElBQUksQ0FBQ3lELFNBQVMsR0FBR3pELElBQUksQ0FBQ00sUUFBUSxDQUFDO0lBQ2xGLElBQU1vRCxTQUFTLEdBQUdGLFVBQVUsQ0FBQ0csS0FBSztJQUNsQyxJQUFNQyxPQUFPLEdBQUdKLFVBQVUsQ0FBQ0ssR0FBRztJQUM5QixJQUFNQyxNQUFNLEdBQUcvSCxTQUFTLENBQUNDLEtBQUssQ0FBQztJQUUvQixJQUFNK0gsV0FBVyxHQUFNVCxXQUFXLFVBQUtELGFBQWU7SUFDdEQsSUFBSVcsU0FBUztJQUNiLElBQUlDLGFBQWE7SUFDakIsSUFBSVAsU0FBUyxHQUFHLENBQUMsR0FBR0UsT0FBTyxFQUFFO01BQzNCSSxTQUFTLEdBQU1ELFdBQVcsV0FBTVIsS0FBTztNQUN2Q1UsYUFBYSxHQUFHSCxNQUFNLENBQUMvRSxTQUFTO0lBQ2xDLENBQUMsTUFBTTtNQUNMaUYsU0FBUyxHQUFNVCxLQUFLLFdBQU1RLFdBQWE7TUFDdkNFLGFBQWEsR0FBR0gsTUFBTSxDQUFDakYsVUFBVTtJQUNuQztJQUVBLElBQU1xRixVQUFVLEdBQUcsU0FBYkEsVUFBVUEsQ0FBSUMsS0FBaUIsRUFBYTtNQUNoRCxJQUFJLENBQUNBLEtBQUssRUFBRTtRQUNWLE9BQU8sQ0FBQztNQUNWO01BRUEsT0FBT0MsTUFBTSxDQUFDQyxNQUFNLENBQUNGLEtBQUssQ0FBQyxDQUFDRyxNQUFNLENBQUMsVUFBQ0MsS0FBSyxFQUFFQyxHQUFHO1FBQUEsT0FBS0QsS0FBSyxHQUFHQyxHQUFHLENBQUNsRixNQUFNO01BQUEsR0FBRSxDQUFDLENBQUM7SUFDM0UsQ0FBQztJQUVELG9CQUNFOUQsS0FBQSxDQUFDTCxXQUFXO01BQ1Y0RyxTQUFTLEVBQUUxSCxFQUFFLENBQ1h5SixNQUFNLENBQUMzRyxHQUFHLEdBQUFzRSxHQUFBLE9BQUFBLEdBQUEsQ0FFUHFDLE1BQU0sQ0FBQ3JHLFdBQVcsSUFBRzBFLGdCQUFnQixFQUFBVixHQUFBLENBQ3JDcUMsTUFBTSxDQUFDbkcsaUJBQWlCLElBQUd5RSxnQkFBZ0IsRUFBQVgsR0FBQSxDQUMzQ3FDLE1BQU0sQ0FBQy9GLDRCQUE0QixJQUFHcUUsZ0JBQWdCLElBQUlELGdCQUFnQixFQUFBVixHQUFBLENBQzFFcUMsTUFBTSxDQUFDakcsVUFBVSxJQUFHd0UsU0FBUyxFQUFBWixHQUFBLENBQzdCcUMsTUFBTSxDQUFDekcsZUFBZSxJQUFHMEYsWUFBWSxFQUFBdEIsR0FBQSxDQUNyQ3FDLE1BQU0sQ0FBQ3ZHLGdCQUFnQixJQUFHeUYsYUFBYSxFQUFBdkIsR0FBQSxHQUUxQ00sU0FDRixDQUFFO01BQUEwQyxRQUFBLGdCQUVGbkosSUFBQSxDQUFDSCxXQUFXLENBQUN1SixJQUFJO1FBQUMzQyxTQUFTLEVBQUUxSCxFQUFFLENBQUN5SixNQUFNLENBQUNySCxVQUFVLEVBQUVYLG1CQUFtQixDQUFFO1FBQUM2SSxLQUFLLEVBQUUxQyxjQUFlO1FBQUF3QyxRQUFBLGVBQzdGakosS0FBQTtVQUNFdUcsU0FBUyxFQUFFMUgsRUFBRSxDQUFDeUosTUFBTSxDQUFDekgsV0FBVyxFQUFFVixvQkFBb0IsR0FBQStGLElBQUEsT0FBQUEsSUFBQSxDQUNuRG9DLE1BQU0sQ0FBQ3ZILHlCQUF5QixJQUFHNkYsZ0JBQWdCLEVBQUFWLElBQUEsQ0FDcERuRix5QkFBeUIsR0FBRTZGLGdCQUFnQixFQUFBVixJQUFBLENBQzVDLENBQUU7VUFBQStDLFFBQUEsZ0JBRUhuSixJQUFBLENBQUNMLGNBQWM7WUFDYjJKLE9BQU8sRUFBRXpCLFFBQVEsR0FBRyxJQUFJLENBQUNqRCxlQUFlLEdBQUcyRSxTQUFVO1lBQ3JEQyxlQUFlLEVBQUU1QyxrQkFBbUI7WUFDcENsQyxJQUFJLEVBQUVBLElBQUs7WUFDWDRDLG1CQUFtQixFQUFFQSxtQkFBb0I7WUFDekNDLHFCQUFxQixFQUFFQSxxQkFBc0I7WUFDN0NDLHdCQUF3QixFQUFFQTtVQUF5QixDQUNwRCxDQUFDLGVBQ0Z0SCxLQUFBO1lBQ0VnRixJQUFJLEVBQUMsUUFBUTtZQUNidUIsU0FBUyxFQUFFMUgsRUFBRSxDQUFDeUosTUFBTSxDQUFDN0YsSUFBSSxHQUFBMEQsSUFBQSxPQUFBQSxJQUFBLENBQUttQyxNQUFNLENBQUMzRixrQkFBa0IsSUFBR2dFLGdCQUFnQixFQUFBUixJQUFBLENBQUUsQ0FBRTtZQUM5RSxnQkFBY1EsZ0JBQWlCO1lBQy9CNEMsS0FBSyxFQUFFaEIsV0FBWTtZQUNuQmEsT0FBTyxFQUFFLElBQUksQ0FBQy9FLGFBQWM7WUFDNUJtRixJQUFJLEVBQUMsUUFBUTtZQUNiQyxLQUFLLEVBQUU7Y0FBRUMsV0FBVyxFQUFFbEQ7WUFBTSxDQUFFO1lBQzlCbUQsUUFBUSxFQUFFLENBQUU7WUFBQVYsUUFBQSxnQkFFWmpKLEtBQUE7Y0FDRXVHLFNBQVMsRUFBRTFILEVBQUUsQ0FBQ3lKLE1BQU0sQ0FBQ3pGLE9BQU8sR0FBQXVELElBQUEsT0FBQUEsSUFBQSxDQUN6QmtDLE1BQU0sQ0FBQ3ZGLHdCQUF3QixJQUFHNEUsUUFBUSxJQUFJLENBQUNqQixrQkFBa0IsRUFBQU4sSUFBQSxDQUNuRSxDQUFFO2NBQUE2QyxRQUFBLEdBRUZoQyxhQUFhLGlCQUNabkgsSUFBQSxDQUFDZixPQUFPO2dCQUNOMEssS0FBSyxFQUFFO2tCQUNMRyxlQUFlLEVBQUVwRixJQUFJLENBQUNxRixjQUFjLEdBQ2hDMUssU0FBUyxDQUFDcUIsS0FBSyxFQUFFZ0UsSUFBSSxDQUFDcUYsY0FBYyxDQUFDLEdBQ3JDMUssU0FBUyxDQUFDcUIsS0FBSyxFQUFFLFNBQVM7Z0JBQ2hDLENBQUU7Z0JBQ0YrRixTQUFTLEVBQUUrQixNQUFNLENBQUNyRjtjQUFVLENBQzdCLENBQ0YsRUFDQTZFLFdBQVcsRUFBRSxHQUFHLEVBQ2hCZixHQUFHLGlCQUNGL0csS0FBQTtnQkFBQWlKLFFBQUEsZ0JBQ0VuSixJQUFBLENBQUNkLGFBQWEsSUFBRSxDQUFDLEtBQUMsZUFBQWMsSUFBQTtrQkFBR3lHLFNBQVMsRUFBRStCLE1BQU0sQ0FBQ25GLGNBQWU7a0JBQUNzRyxLQUFLLEVBQUU7b0JBQUVLLFVBQVUsRUFBRS9DLEdBQUcsQ0FBQ1A7a0JBQU07Z0JBQUUsQ0FBRSxDQUFDLEVBQzFGTyxHQUFHLENBQUNlLFdBQVc7Y0FBQSxDQUNaLENBQ1AsRUFDQWQsb0JBQW9CLGlCQUNuQmhILEtBQUE7Z0JBQUFpSixRQUFBLGdCQUNFbkosSUFBQSxDQUFDZCxhQUFhLElBQUUsQ0FBQyxFQUFDLEdBQUcsZUFDckJjLElBQUE7a0JBQUd5RyxTQUFTLEVBQUUrQixNQUFNLENBQUNuRixjQUFlO2tCQUFDc0csS0FBSyxFQUFFO29CQUFFSyxVQUFVLEVBQUU5QyxvQkFBb0IsQ0FBQ1I7a0JBQU07Z0JBQUUsQ0FBRSxDQUFDLEVBQ3pGUSxvQkFBb0IsQ0FBQ2MsV0FBVztjQUFBLENBQzdCLENBQ1A7WUFBQSxDQUNHLENBQUMsZUFDUGhJLElBQUE7Y0FBT3lHLFNBQVMsRUFBRStCLE1BQU0sQ0FBQ25ILFlBQWE7Y0FBQThILFFBQUEsRUFBRWxDLEdBQUcsR0FBR0EsR0FBRyxDQUFDYyxhQUFhLEdBQUdBO1lBQWEsQ0FBUSxDQUFDLGVBQ3hGN0gsS0FBQTtjQUFPdUcsU0FBUyxFQUFFK0IsTUFBTSxDQUFDbkgsWUFBYTtjQUFBOEgsUUFBQSxHQUFDLEdBQUMsRUFBQyxJQUFJLENBQUNyRSxlQUFlLENBQUNKLElBQUksRUFBRUssY0FBYyxFQUFFa0QsS0FBSyxDQUFDO1lBQUEsQ0FBUSxDQUFDO1VBQUEsQ0FDN0YsQ0FBQyxFQUNSTixjQUFjLElBQ1osWUFBTTtZQUNMLElBQU1rQixLQUFLLEdBQUdsQixjQUFjLENBQUNqRCxJQUFJLENBQUM7WUFDbEMsSUFBTXVFLEtBQUssR0FBR0wsVUFBVSxDQUFDQyxLQUFLLENBQUM7WUFDL0IsSUFBSUEsS0FBSyxJQUFJSSxLQUFLLEtBQUssQ0FBQyxFQUFFO2NBQUEsSUFBQWdCLElBQUEsRUFBQUMsS0FBQSxFQUFBQyxnQkFBQSxFQUFBQyxlQUFBLEVBQUFDLGtCQUFBLEVBQUFDLGlCQUFBO2NBQ3hCLElBQU1DLElBQUksSUFBQU4sSUFBQSxJQUFBQyxLQUFBLElBQUFDLGdCQUFBLElBQUFDLGVBQUEsR0FBR3ZCLEtBQUssQ0FBQzJCLFFBQVEscUJBQWRKLGVBQUEsQ0FBaUIsQ0FBQyxDQUFDLFlBQUFELGdCQUFBLElBQUFFLGtCQUFBLEdBQUl4QixLQUFLLENBQUM0QixXQUFXLHFCQUFqQkosa0JBQUEsQ0FBb0IsQ0FBQyxDQUFDLFlBQUFILEtBQUEsSUFBQUksaUJBQUEsR0FBSXpCLEtBQUssQ0FBQzZCLFVBQVUscUJBQWhCSixpQkFBQSxDQUFtQixDQUFDLENBQUMsWUFBQUwsSUFBQSxHQUFJVixTQUFTO2NBQ2hHLElBQUksQ0FBQ2dCLElBQUksRUFBRTtnQkFDVCxPQUFPLElBQUk7Y0FDYjtjQUVBLG9CQUNFdkssSUFBQTtnQkFDRTJLLElBQUksRUFBRUosSUFBSSxDQUFDSTtnQkFDWDtnQkFBQTtnQkFDQUMsTUFBTSxFQUFFLFFBQVM7Z0JBQ2pCakIsS0FBSyxFQUFFO2tCQUFFa0IsV0FBVyxFQUFFO2dCQUFNLENBQUU7Z0JBQzlCQyxHQUFHLEVBQUMscUJBQXFCO2dCQUN6QnhCLE9BQU8sRUFDTGlCLElBQUksQ0FBQ2pCLE9BQU8sR0FDUixVQUFDeUIsS0FBSyxFQUFLO2tCQUNULElBQUksRUFBRUEsS0FBSyxDQUFDQyxPQUFPLElBQUlELEtBQUssQ0FBQ0UsT0FBTyxJQUFJRixLQUFLLENBQUNHLFFBQVEsQ0FBQyxJQUFJWCxJQUFJLENBQUNqQixPQUFPLEVBQUU7b0JBQ3ZFeUIsS0FBSyxDQUFDSSxjQUFjLENBQUMsQ0FBQztvQkFDdEJaLElBQUksQ0FBQ2pCLE9BQU8sQ0FBQ3lCLEtBQUssQ0FBQztrQkFDckI7Z0JBQ0YsQ0FBQyxHQUNEeEIsU0FDTDtnQkFBQUosUUFBQSxFQUVBb0IsSUFBSSxDQUFDYTtjQUFPLENBQ1osQ0FBQztZQUVSLENBQUMsTUFBTSxJQUFJdkMsS0FBSyxJQUFJSSxLQUFLLEdBQUcsQ0FBQyxFQUFFO2NBQzdCLG9CQUFPakosSUFBQSxDQUFDTixhQUFhO2dCQUFDbUosS0FBSyxFQUFFQSxLQUFNO2dCQUFDakIsY0FBYyxFQUFFQTtjQUFlLENBQUUsQ0FBQztZQUN4RSxDQUFDLE1BQU07Y0FDTCxPQUFPLElBQUk7WUFDYjtVQUNGLENBQUMsQ0FBRSxDQUFDO1FBQUEsQ0FDSDtNQUFDLENBQ1UsQ0FBQyxlQUNuQjFILEtBQUEsQ0FBQ0wsV0FBVyxDQUFDdUosSUFBSTtRQUNmM0MsU0FBUyxFQUFFMUgsRUFBRSxDQUFDeUosTUFBTSxDQUFDakgsSUFBSSxFQUFFaEIsYUFBYSxHQUFBZ0csSUFBQSxPQUFBQSxJQUFBLENBQ3JDaUMsTUFBTSxDQUFDL0csWUFBWSxJQUFHb0YsZ0JBQWdCLEVBQUFOLElBQUEsQ0FDdENpQyxNQUFNLENBQUM3Ryw2QkFBNkIsSUFBR21GLGdCQUFnQixJQUFJRCxnQkFBZ0IsRUFBQU4sSUFBQSxDQUM3RSxDQUFFO1FBQ0gsZUFBWSxXQUFXO1FBQ3ZCb0QsS0FBSyxFQUFFO1VBQUUwQixNQUFNLEVBQUU7UUFBVSxDQUFFO1FBQzdCaEMsS0FBSyxFQUFFLENBQUMsR0FBRzFDLGNBQWU7UUFDMUIyQyxPQUFPLEVBQUUsSUFBSSxDQUFDL0UsYUFBYztRQUFBNEUsUUFBQSxnQkFFNUJuSixJQUFBLENBQUNKLEtBQUs7VUFBQ29ILFFBQVEsRUFBRUE7UUFBUyxDQUFFLENBQUMsZUFDN0JoSCxJQUFBLENBQUNQLE9BQU87VUFDTndILEdBQUcsRUFBRUEsR0FBSTtVQUNUbUIsU0FBUyxFQUFFQSxTQUFVO1VBQ3JCRSxPQUFPLEVBQUVBLE9BQVE7VUFDakJsQixlQUFlLEVBQUVBLGVBQWdCO1VBQ2pDVixLQUFLLEVBQUVBLEtBQU07VUFDYjRFLFVBQVUsRUFBRXJELEtBQU07VUFDbEJTLFNBQVMsRUFBRUEsU0FBVTtVQUNyQnJCLGNBQWMsRUFBRUEsY0FBZTtVQUMvQjNDLElBQUksRUFBRUEsSUFBSztVQUNYNkcsY0FBYyxFQUFLbkwscUJBQXFCLFNBQUl1SSxhQUFnQjtVQUM1RGxDLFNBQVMsRUFBRXRHO1FBQWlCLENBQzdCLENBQUM7TUFBQSxDQUNjLENBQUM7SUFBQSxDQUNSLENBQUM7RUFFbEIsQ0FBQztFQUFBLE9BQUF3RCxrQkFBQTtBQUFBLEVBcE5xQzNFLEtBQUssQ0FBQ3dNLGFBQWE7QUFBOUM3SCxrQkFBa0IsQ0FDdEI4SCxXQUFXLEdBQUcsb0JBQW9CO0FBRDlCOUgsa0JBQWtCLENBRXRCK0gsWUFBWSxHQUE2QjtFQUM5Q2pGLFNBQVMsRUFBRSxFQUFFO0VBQ2JRLEdBQUcsRUFBRTtBQUNQLENBQUM7QUErT0gsZUFBZTdILFVBQVUsQ0FBQ3VFLGtCQUFrQixDQUFDIiwiaWdub3JlTGlzdCI6W119