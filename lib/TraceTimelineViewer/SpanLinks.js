import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _templateObject, _templateObject2;
import { css } from '@emotion/css';
import React, { useState } from 'react';
import { config, reportInteraction } from '@grafana/runtime';
import { useStyles2, MenuGroup, MenuItem, Icon, ContextMenu } from '@grafana/ui';
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
var _renderMenuItems = function renderMenuItems(links, styles, closeMenu, datasourceType) {
  var _links$logLinks, _links$metricLinks, _links$traceLinks;
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [!!((_links$logLinks = links.logLinks) != null && _links$logLinks.length) ? /*#__PURE__*/_jsx(MenuGroup, {
      label: "Logs",
      children: links.logLinks.map(function (link, i) {
        return /*#__PURE__*/_jsx(MenuItem, {
          label: "Logs for this span",
          onClick: link.onClick ? function (event) {
            reportInteraction('grafana_traces_trace_view_span_link_clicked', {
              datasourceType: datasourceType,
              grafana_version: config.buildInfo.version,
              type: 'log',
              location: 'menu'
            });
            event == null || event.preventDefault();
            link.onClick(event);
            closeMenu();
          } : undefined,
          url: link.href,
          className: styles.menuItem
        }, i);
      })
    }) : null, !!((_links$metricLinks = links.metricLinks) != null && _links$metricLinks.length) ? /*#__PURE__*/_jsx(MenuGroup, {
      label: "Metrics",
      children: links.metricLinks.map(function (link, i) {
        var _link$title;
        return /*#__PURE__*/_jsx(MenuItem, {
          label: (_link$title = link.title) != null ? _link$title : 'Metrics for this span',
          onClick: link.onClick ? function (event) {
            reportInteraction('grafana_traces_trace_view_span_link_clicked', {
              datasourceType: datasourceType,
              grafana_version: config.buildInfo.version,
              type: 'metric',
              location: 'menu'
            });
            event == null || event.preventDefault();
            link.onClick(event);
            closeMenu();
          } : undefined,
          url: link.href,
          className: styles.menuItem
        }, i);
      })
    }) : null, !!((_links$traceLinks = links.traceLinks) != null && _links$traceLinks.length) ? /*#__PURE__*/_jsx(MenuGroup, {
      label: "Traces",
      children: links.traceLinks.map(function (link, i) {
        var _link$title2;
        return /*#__PURE__*/_jsx(MenuItem, {
          label: (_link$title2 = link.title) != null ? _link$title2 : 'View linked span',
          onClick: link.onClick ? function (event) {
            reportInteraction('grafana_traces_trace_view_span_link_clicked', {
              datasourceType: datasourceType,
              grafana_version: config.buildInfo.version,
              type: 'trace',
              location: 'menu'
            });
            event == null || event.preventDefault();
            link.onClick(event);
            closeMenu();
          } : undefined,
          url: link.href,
          className: styles.menuItem
        }, i);
      })
    }) : null]
  });
};
export var SpanLinksMenu = function SpanLinksMenu(_ref) {
  var links = _ref.links,
    datasourceType = _ref.datasourceType;
  var styles = useStyles2(getStyles);
  var _useState = useState(false),
    isMenuOpen = _useState[0],
    setIsMenuOpen = _useState[1];
  var _useState2 = useState({
      x: 0,
      y: 0
    }),
    menuPosition = _useState2[0],
    setMenuPosition = _useState2[1];
  var closeMenu = function closeMenu() {
    return setIsMenuOpen(false);
  };
  return /*#__PURE__*/_jsxs("div", {
    "data-testid": "SpanLinksMenu",
    children: [/*#__PURE__*/_jsx("button", {
      onClick: function onClick(e) {
        setIsMenuOpen(true);
        setMenuPosition({
          x: e.pageX,
          y: e.pageY
        });
      },
      className: styles.button,
      children: /*#__PURE__*/_jsx(Icon, {
        name: "link",
        className: styles.button
      })
    }), isMenuOpen ? /*#__PURE__*/_jsx(ContextMenu, {
      onClose: function onClose() {
        return setIsMenuOpen(false);
      },
      renderMenuItems: function renderMenuItems() {
        return _renderMenuItems(links, styles, closeMenu, datasourceType);
      },
      focusOnOpen: true,
      x: menuPosition.x,
      y: menuPosition.y
    }) : null]
  });
};
var getStyles = function getStyles() {
  return {
    button: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n      background: transparent;\n      border: none;\n      padding: 0;\n      margin: 0 3px 0 0;\n    "]))),
    menuItem: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose(["\n      max-width: 60ch;\n      overflow: hidden;\n    "])))
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,