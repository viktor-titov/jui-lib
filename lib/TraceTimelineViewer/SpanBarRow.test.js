import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _extends from "@babel/runtime/helpers/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import React from 'react';
import { NONE, DURATION, TAG } from '../settings/SpanBarSettings';
import SpanBarRow from './SpanBarRow';
import { jsx as _jsx } from "react/jsx-runtime";
describe('<SpanBarRow>', function () {
  var spanID = 'some-id';
  var props = {
    addHoverIndentGuideId: jest.fn(),
    className: 'a-class-name',
    color: 'color-a',
    columnDivision: '0.5',
    hoverIndentGuideIds: new Set(),
    isChildrenExpanded: true,
    isDetailExpanded: false,
    isFilteredOut: false,
    onDetailToggled: jest.fn(),
    onChildrenToggled: jest.fn(),
    operationName: 'op-name',
    numTicks: 5,
    rpc: {
      viewStart: 0.25,
      viewEnd: 0.75,
      color: 'color-b',
      operationName: 'rpc-op-name',
      serviceName: 'rpc-service-name'
    },
    showErrorIcon: false,
    getViewedBounds: function getViewedBounds() {
      return {
        start: 0,
        end: 1
      };
    },
    span: {
      duration: 9000,
      hasChildren: true,
      process: {
        serviceName: 'service-name'
      },
      spanID: spanID,
      logs: [],
      references: []
    }
  };
  beforeEach(function () {
    props.onDetailToggled.mockReset();
    props.onChildrenToggled.mockReset();
  });
  it('renders without exploding', function () {
    expect(function () {
      return render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props)));
    }).not.toThrow();
  });
  it('escalates detail toggling', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var onDetailToggled;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props)));
          onDetailToggled = props.onDetailToggled;
          expect(onDetailToggled.mock.calls.length).toBe(0);
          _context.next = 5;
          return userEvent.click(screen.getByTestId('span-view'));
        case 5:
          expect(onDetailToggled.mock.calls).toEqual([[spanID]]);
        case 6:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
  it('escalates children toggling', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var onChildrenToggled;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props)));
          onChildrenToggled = props.onChildrenToggled;
          expect(onChildrenToggled.mock.calls.length).toBe(0);
          _context2.next = 5;
          return userEvent.click(screen.getByTestId('icon-wrapper'));
        case 5:
          expect(onChildrenToggled.mock.calls.length).toBe(1);
        case 6:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  })));
  it('render references button', function () {
    render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props)));
    var newSpan = Object.assign({}, props.span);
    var span = Object.assign(newSpan, {
      references: [{
        refType: 'FOLLOWS_FROM',
        traceID: 'trace1',
        spanID: 'span0',
        span: {
          spanID: 'span0'
        }
      }, {
        refType: 'FOLLOWS_FROM',
        traceID: 'otherTrace',
        spanID: 'span1',
        span: {
          spanID: 'span1'
        }
      }]
    });
    render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props, {
      span: span,
      createSpanLink: function createSpanLink() {
        return {
          traceLinks: [{
            href: 'href'
          }, {
            href: 'href'
          }]
        };
      }
    })));
    expect(screen.getAllByTestId('SpanLinksMenu')).toHaveLength(1);
  });
  it('render referenced to by single span', function () {
    render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props)));
    var span = Object.assign({
      subsidiarilyReferencedBy: [{
        refType: 'FOLLOWS_FROM',
        traceID: 'trace1',
        spanID: 'span0',
        span: {
          spanID: 'span0'
        }
      }]
    }, props.span);
    render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props, {
      span: span,
      createSpanLink: function createSpanLink() {
        return {
          traceLinks: [{
            content: 'This span is referenced by another span',
            href: 'href'
          }]
        };
      }
    })));
    expect(screen.getByRole('link', {
      name: 'This span is referenced by another span'
    })).toBeInTheDocument();
  });
  it('render referenced to by multiple span', function () {
    render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props)));
    var span = Object.assign({
      subsidiarilyReferencedBy: [{
        refType: 'FOLLOWS_FROM',
        traceID: 'trace1',
        spanID: 'span0',
        span: {
          spanID: 'span0'
        }
      }, {
        refType: 'FOLLOWS_FROM',
        traceID: 'trace1',
        spanID: 'span1',
        span: {
          spanID: 'span1'
        }
      }]
    }, props.span);
    render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props, {
      span: span,
      createSpanLink: function createSpanLink() {
        return {
          traceLinks: [{
            href: 'href'
          }, {
            href: 'href'
          }]
        };
      }
    })));
    expect(screen.getAllByTestId('SpanLinksMenu')).toHaveLength(1);
  });
  describe('render span bar label', function () {
    it('with default value', function () {
      render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props)));
      expect(screen.getByText('(9ms)')).toBeInTheDocument();
    });
    it('with none value', function () {
      var testProps = Object.assign({
        spanBarOptions: {
          type: NONE
        }
      }, props);
      render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, testProps)));
      expect(screen.queryByText('(9ms)')).not.toBeInTheDocument();
    });
    it('with duration value', function () {
      var testProps = Object.assign({
        spanBarOptions: {
          type: DURATION
        }
      }, props);
      render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, testProps)));
      expect(screen.getByText('(9ms)')).toBeInTheDocument();
    });
    it('with tag value', function () {
      var testProps = Object.assign({
        spanBarOptions: {
          type: TAG,
          tag: 'tag'
        }
      }, _extends({}, props, {
        span: {
          process: {},
          tags: [{
            key: 'tag',
            value: 'tag-value'
          }]
        }
      }));
      render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, testProps)));
      expect(screen.getByText('(tag-value)')).toBeInTheDocument();
    });
    it('with process value', function () {
      var testProps = Object.assign({
        spanBarOptions: {
          type: TAG,
          tag: 'tag'
        }
      }, _extends({}, props, {
        span: {
          process: {
            tags: [{
              key: 'tag',
              value: 'process-value'
            }]
          },
          tags: []
        }
      }));
      render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, testProps)));
      expect(screen.getByText('(process-value)')).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZW5kZXIiLCJzY3JlZW4iLCJ1c2VyRXZlbnQiLCJSZWFjdCIsIk5PTkUiLCJEVVJBVElPTiIsIlRBRyIsIlNwYW5CYXJSb3ciLCJqc3giLCJfanN4IiwiZGVzY3JpYmUiLCJzcGFuSUQiLCJwcm9wcyIsImFkZEhvdmVySW5kZW50R3VpZGVJZCIsImplc3QiLCJmbiIsImNsYXNzTmFtZSIsImNvbG9yIiwiY29sdW1uRGl2aXNpb24iLCJob3ZlckluZGVudEd1aWRlSWRzIiwiU2V0IiwiaXNDaGlsZHJlbkV4cGFuZGVkIiwiaXNEZXRhaWxFeHBhbmRlZCIsImlzRmlsdGVyZWRPdXQiLCJvbkRldGFpbFRvZ2dsZWQiLCJvbkNoaWxkcmVuVG9nZ2xlZCIsIm9wZXJhdGlvbk5hbWUiLCJudW1UaWNrcyIsInJwYyIsInZpZXdTdGFydCIsInZpZXdFbmQiLCJzZXJ2aWNlTmFtZSIsInNob3dFcnJvckljb24iLCJnZXRWaWV3ZWRCb3VuZHMiLCJzdGFydCIsImVuZCIsInNwYW4iLCJkdXJhdGlvbiIsImhhc0NoaWxkcmVuIiwicHJvY2VzcyIsImxvZ3MiLCJyZWZlcmVuY2VzIiwiYmVmb3JlRWFjaCIsIm1vY2tSZXNldCIsIml0IiwiZXhwZWN0IiwiX2V4dGVuZHMiLCJub3QiLCJ0b1Rocm93IiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJfcmVnZW5lcmF0b3JSdW50aW1lIiwibWFyayIsIl9jYWxsZWUiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwibW9jayIsImNhbGxzIiwibGVuZ3RoIiwidG9CZSIsImNsaWNrIiwiZ2V0QnlUZXN0SWQiLCJ0b0VxdWFsIiwic3RvcCIsIl9jYWxsZWUyIiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwibmV3U3BhbiIsIk9iamVjdCIsImFzc2lnbiIsInJlZlR5cGUiLCJ0cmFjZUlEIiwiY3JlYXRlU3BhbkxpbmsiLCJ0cmFjZUxpbmtzIiwiaHJlZiIsImdldEFsbEJ5VGVzdElkIiwidG9IYXZlTGVuZ3RoIiwic3Vic2lkaWFyaWx5UmVmZXJlbmNlZEJ5IiwiY29udGVudCIsImdldEJ5Um9sZSIsIm5hbWUiLCJ0b0JlSW5UaGVEb2N1bWVudCIsImdldEJ5VGV4dCIsInRlc3RQcm9wcyIsInNwYW5CYXJPcHRpb25zIiwidHlwZSIsInF1ZXJ5QnlUZXh0IiwidGFnIiwidGFncyIsImtleSIsInZhbHVlIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL1RyYWNlVGltZWxpbmVWaWV3ZXIvU3BhbkJhclJvdy50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4gfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCB1c2VyRXZlbnQgZnJvbSAnQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTcGFuTGlua3MgfSBmcm9tICdzcmMvdHlwZXMvbGlua3MnO1xuaW1wb3J0IHsgVHJhY2VTcGFuIH0gZnJvbSAnc3JjL3R5cGVzL3RyYWNlJztcblxuaW1wb3J0IHsgTk9ORSwgRFVSQVRJT04sIFRBRyB9IGZyb20gJy4uL3NldHRpbmdzL1NwYW5CYXJTZXR0aW5ncyc7XG5cbmltcG9ydCBTcGFuQmFyUm93LCB7IFNwYW5CYXJSb3dQcm9wcyB9IGZyb20gJy4vU3BhbkJhclJvdyc7XG5cbmRlc2NyaWJlKCc8U3BhbkJhclJvdz4nLCAoKSA9PiB7XG4gIGNvbnN0IHNwYW5JRCA9ICdzb21lLWlkJztcbiAgY29uc3QgcHJvcHMgPSB7XG4gICAgYWRkSG92ZXJJbmRlbnRHdWlkZUlkOiBqZXN0LmZuKCksXG4gICAgY2xhc3NOYW1lOiAnYS1jbGFzcy1uYW1lJyxcbiAgICBjb2xvcjogJ2NvbG9yLWEnLFxuICAgIGNvbHVtbkRpdmlzaW9uOiAnMC41JyxcbiAgICBob3ZlckluZGVudEd1aWRlSWRzOiBuZXcgU2V0KCksXG4gICAgaXNDaGlsZHJlbkV4cGFuZGVkOiB0cnVlLFxuICAgIGlzRGV0YWlsRXhwYW5kZWQ6IGZhbHNlLFxuICAgIGlzRmlsdGVyZWRPdXQ6IGZhbHNlLFxuICAgIG9uRGV0YWlsVG9nZ2xlZDogamVzdC5mbigpLFxuICAgIG9uQ2hpbGRyZW5Ub2dnbGVkOiBqZXN0LmZuKCksXG4gICAgb3BlcmF0aW9uTmFtZTogJ29wLW5hbWUnLFxuICAgIG51bVRpY2tzOiA1LFxuICAgIHJwYzoge1xuICAgICAgdmlld1N0YXJ0OiAwLjI1LFxuICAgICAgdmlld0VuZDogMC43NSxcbiAgICAgIGNvbG9yOiAnY29sb3ItYicsXG4gICAgICBvcGVyYXRpb25OYW1lOiAncnBjLW9wLW5hbWUnLFxuICAgICAgc2VydmljZU5hbWU6ICdycGMtc2VydmljZS1uYW1lJyxcbiAgICB9LFxuICAgIHNob3dFcnJvckljb246IGZhbHNlLFxuICAgIGdldFZpZXdlZEJvdW5kczogKCkgPT4gKHsgc3RhcnQ6IDAsIGVuZDogMSB9KSxcbiAgICBzcGFuOiB7XG4gICAgICBkdXJhdGlvbjogOTAwMCxcbiAgICAgIGhhc0NoaWxkcmVuOiB0cnVlLFxuICAgICAgcHJvY2Vzczoge1xuICAgICAgICBzZXJ2aWNlTmFtZTogJ3NlcnZpY2UtbmFtZScsXG4gICAgICB9LFxuICAgICAgc3BhbklELFxuICAgICAgbG9nczogW10sXG4gICAgICByZWZlcmVuY2VzOiBbXSxcbiAgICB9LFxuICB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHByb3BzLm9uRGV0YWlsVG9nZ2xlZC5tb2NrUmVzZXQoKTtcbiAgICBwcm9wcy5vbkNoaWxkcmVuVG9nZ2xlZC5tb2NrUmVzZXQoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgd2l0aG91dCBleHBsb2RpbmcnLCAoKSA9PiB7XG4gICAgZXhwZWN0KCgpID0+IHJlbmRlcig8U3BhbkJhclJvdyB7Li4uKHByb3BzIGFzIHVua25vd24gYXMgU3BhbkJhclJvd1Byb3BzKX0gLz4pKS5ub3QudG9UaHJvdygpO1xuICB9KTtcblxuICBpdCgnZXNjYWxhdGVzIGRldGFpbCB0b2dnbGluZycsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXIoPFNwYW5CYXJSb3cgey4uLihwcm9wcyBhcyB1bmtub3duIGFzIFNwYW5CYXJSb3dQcm9wcyl9IC8+KTtcbiAgICBjb25zdCB7IG9uRGV0YWlsVG9nZ2xlZCB9ID0gcHJvcHM7XG4gICAgZXhwZWN0KG9uRGV0YWlsVG9nZ2xlZC5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgwKTtcbiAgICBhd2FpdCB1c2VyRXZlbnQuY2xpY2soc2NyZWVuLmdldEJ5VGVzdElkKCdzcGFuLXZpZXcnKSk7XG4gICAgZXhwZWN0KG9uRGV0YWlsVG9nZ2xlZC5tb2NrLmNhbGxzKS50b0VxdWFsKFtbc3BhbklEXV0pO1xuICB9KTtcblxuICBpdCgnZXNjYWxhdGVzIGNoaWxkcmVuIHRvZ2dsaW5nJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlbmRlcig8U3BhbkJhclJvdyB7Li4uKHByb3BzIGFzIHVua25vd24gYXMgU3BhbkJhclJvd1Byb3BzKX0gLz4pO1xuICAgIGNvbnN0IHsgb25DaGlsZHJlblRvZ2dsZWQgfSA9IHByb3BzO1xuICAgIGV4cGVjdChvbkNoaWxkcmVuVG9nZ2xlZC5tb2NrLmNhbGxzLmxlbmd0aCkudG9CZSgwKTtcbiAgICBhd2FpdCB1c2VyRXZlbnQuY2xpY2soc2NyZWVuLmdldEJ5VGVzdElkKCdpY29uLXdyYXBwZXInKSk7XG4gICAgZXhwZWN0KG9uQ2hpbGRyZW5Ub2dnbGVkLm1vY2suY2FsbHMubGVuZ3RoKS50b0JlKDEpO1xuICB9KTtcblxuICBpdCgncmVuZGVyIHJlZmVyZW5jZXMgYnV0dG9uJywgKCkgPT4ge1xuICAgIHJlbmRlcig8U3BhbkJhclJvdyB7Li4uKHByb3BzIGFzIHVua25vd24gYXMgU3BhbkJhclJvd1Byb3BzKX0gLz4pO1xuICAgIGNvbnN0IG5ld1NwYW4gPSBPYmplY3QuYXNzaWduKHt9LCBwcm9wcy5zcGFuKTtcbiAgICBjb25zdCBzcGFuID0gT2JqZWN0LmFzc2lnbihuZXdTcGFuLCB7XG4gICAgICByZWZlcmVuY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICByZWZUeXBlOiAnRk9MTE9XU19GUk9NJyxcbiAgICAgICAgICB0cmFjZUlEOiAndHJhY2UxJyxcbiAgICAgICAgICBzcGFuSUQ6ICdzcGFuMCcsXG4gICAgICAgICAgc3Bhbjoge1xuICAgICAgICAgICAgc3BhbklEOiAnc3BhbjAnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICByZWZUeXBlOiAnRk9MTE9XU19GUk9NJyxcbiAgICAgICAgICB0cmFjZUlEOiAnb3RoZXJUcmFjZScsXG4gICAgICAgICAgc3BhbklEOiAnc3BhbjEnLFxuICAgICAgICAgIHNwYW46IHtcbiAgICAgICAgICAgIHNwYW5JRDogJ3NwYW4xJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9KSBhcyB1bmtub3duIGFzIFRyYWNlU3BhbjtcblxuICAgIHJlbmRlcihcbiAgICAgIDxTcGFuQmFyUm93XG4gICAgICAgIHsuLi4ocHJvcHMgYXMgdW5rbm93biBhcyBTcGFuQmFyUm93UHJvcHMpfVxuICAgICAgICBzcGFuPXtzcGFufVxuICAgICAgICBjcmVhdGVTcGFuTGluaz17KCkgPT5cbiAgICAgICAgICAoe1xuICAgICAgICAgICAgdHJhY2VMaW5rczogW3sgaHJlZjogJ2hyZWYnIH0sIHsgaHJlZjogJ2hyZWYnIH1dLFxuICAgICAgICAgIH0gYXMgU3BhbkxpbmtzKVxuICAgICAgICB9XG4gICAgICAvPlxuICAgICk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRBbGxCeVRlc3RJZCgnU3BhbkxpbmtzTWVudScpKS50b0hhdmVMZW5ndGgoMSk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXIgcmVmZXJlbmNlZCB0byBieSBzaW5nbGUgc3BhbicsICgpID0+IHtcbiAgICByZW5kZXIoPFNwYW5CYXJSb3cgey4uLihwcm9wcyBhcyB1bmtub3duIGFzIFNwYW5CYXJSb3dQcm9wcyl9IC8+KTtcbiAgICBjb25zdCBzcGFuID0gT2JqZWN0LmFzc2lnbihcbiAgICAgIHtcbiAgICAgICAgc3Vic2lkaWFyaWx5UmVmZXJlbmNlZEJ5OiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgcmVmVHlwZTogJ0ZPTExPV1NfRlJPTScsXG4gICAgICAgICAgICB0cmFjZUlEOiAndHJhY2UxJyxcbiAgICAgICAgICAgIHNwYW5JRDogJ3NwYW4wJyxcbiAgICAgICAgICAgIHNwYW46IHtcbiAgICAgICAgICAgICAgc3BhbklEOiAnc3BhbjAnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIHByb3BzLnNwYW5cbiAgICApIGFzIHVua25vd24gYXMgVHJhY2VTcGFuO1xuICAgIHJlbmRlcihcbiAgICAgIDxTcGFuQmFyUm93XG4gICAgICAgIHsuLi4ocHJvcHMgYXMgdW5rbm93biBhcyBTcGFuQmFyUm93UHJvcHMpfVxuICAgICAgICBzcGFuPXtzcGFufVxuICAgICAgICBjcmVhdGVTcGFuTGluaz17KCkgPT5cbiAgICAgICAgICAoe1xuICAgICAgICAgICAgdHJhY2VMaW5rczogW3sgY29udGVudDogJ1RoaXMgc3BhbiBpcyByZWZlcmVuY2VkIGJ5IGFub3RoZXIgc3BhbicsIGhyZWY6ICdocmVmJyB9XSxcbiAgICAgICAgICB9IGFzIFNwYW5MaW5rcylcbiAgICAgICAgfVxuICAgICAgLz5cbiAgICApO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdsaW5rJywgeyBuYW1lOiAnVGhpcyBzcGFuIGlzIHJlZmVyZW5jZWQgYnkgYW5vdGhlciBzcGFuJyB9KSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlciByZWZlcmVuY2VkIHRvIGJ5IG11bHRpcGxlIHNwYW4nLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxTcGFuQmFyUm93IHsuLi4ocHJvcHMgYXMgdW5rbm93biBhcyBTcGFuQmFyUm93UHJvcHMpfSAvPik7XG4gICAgY29uc3Qgc3BhbiA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7XG4gICAgICAgIHN1YnNpZGlhcmlseVJlZmVyZW5jZWRCeTogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJlZlR5cGU6ICdGT0xMT1dTX0ZST00nLFxuICAgICAgICAgICAgdHJhY2VJRDogJ3RyYWNlMScsXG4gICAgICAgICAgICBzcGFuSUQ6ICdzcGFuMCcsXG4gICAgICAgICAgICBzcGFuOiB7XG4gICAgICAgICAgICAgIHNwYW5JRDogJ3NwYW4wJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICByZWZUeXBlOiAnRk9MTE9XU19GUk9NJyxcbiAgICAgICAgICAgIHRyYWNlSUQ6ICd0cmFjZTEnLFxuICAgICAgICAgICAgc3BhbklEOiAnc3BhbjEnLFxuICAgICAgICAgICAgc3Bhbjoge1xuICAgICAgICAgICAgICBzcGFuSUQ6ICdzcGFuMScsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAgcHJvcHMuc3BhblxuICAgICkgYXMgdW5rbm93biBhcyBUcmFjZVNwYW47XG4gICAgcmVuZGVyKFxuICAgICAgPFNwYW5CYXJSb3dcbiAgICAgICAgey4uLihwcm9wcyBhcyB1bmtub3duIGFzIFNwYW5CYXJSb3dQcm9wcyl9XG4gICAgICAgIHNwYW49e3NwYW59XG4gICAgICAgIGNyZWF0ZVNwYW5MaW5rPXsoKSA9PlxuICAgICAgICAgICh7XG4gICAgICAgICAgICB0cmFjZUxpbmtzOiBbeyBocmVmOiAnaHJlZicgfSwgeyBocmVmOiAnaHJlZicgfV0sXG4gICAgICAgICAgfSBhcyBTcGFuTGlua3MpXG4gICAgICAgIH1cbiAgICAgIC8+XG4gICAgKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEFsbEJ5VGVzdElkKCdTcGFuTGlua3NNZW51JykpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3JlbmRlciBzcGFuIGJhciBsYWJlbCcsICgpID0+IHtcbiAgICBpdCgnd2l0aCBkZWZhdWx0IHZhbHVlJywgKCkgPT4ge1xuICAgICAgcmVuZGVyKDxTcGFuQmFyUm93IHsuLi4ocHJvcHMgYXMgdW5rbm93biBhcyBTcGFuQmFyUm93UHJvcHMpfSAvPik7XG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnKDltcyknKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIGl0KCd3aXRoIG5vbmUgdmFsdWUnLCAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0UHJvcHMgPSBPYmplY3QuYXNzaWduKFxuICAgICAgICB7XG4gICAgICAgICAgc3BhbkJhck9wdGlvbnM6IHtcbiAgICAgICAgICAgIHR5cGU6IE5PTkUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgcHJvcHNcbiAgICAgICk7XG4gICAgICByZW5kZXIoPFNwYW5CYXJSb3cgey4uLih0ZXN0UHJvcHMgYXMgdW5rbm93biBhcyBTcGFuQmFyUm93UHJvcHMpfSAvPik7XG4gICAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXh0KCcoOW1zKScpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICB9KTtcblxuICAgIGl0KCd3aXRoIGR1cmF0aW9uIHZhbHVlJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFByb3BzID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAge1xuICAgICAgICAgIHNwYW5CYXJPcHRpb25zOiB7XG4gICAgICAgICAgICB0eXBlOiBEVVJBVElPTixcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBwcm9wc1xuICAgICAgKTtcbiAgICAgIHJlbmRlcig8U3BhbkJhclJvdyB7Li4uKHRlc3RQcm9wcyBhcyB1bmtub3duIGFzIFNwYW5CYXJSb3dQcm9wcyl9IC8+KTtcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCcoOW1zKScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3dpdGggdGFnIHZhbHVlJywgKCkgPT4ge1xuICAgICAgY29uc3QgdGVzdFByb3BzID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAge1xuICAgICAgICAgIHNwYW5CYXJPcHRpb25zOiB7XG4gICAgICAgICAgICB0eXBlOiBUQUcsXG4gICAgICAgICAgICB0YWc6ICd0YWcnLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5wcm9wcyxcbiAgICAgICAgICBzcGFuOiB7XG4gICAgICAgICAgICBwcm9jZXNzOiB7fSxcbiAgICAgICAgICAgIHRhZ3M6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGtleTogJ3RhZycsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICd0YWctdmFsdWUnLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgcmVuZGVyKDxTcGFuQmFyUm93IHsuLi4odGVzdFByb3BzIGFzIHVua25vd24gYXMgU3BhbkJhclJvd1Byb3BzKX0gLz4pO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJyh0YWctdmFsdWUpJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG5cbiAgICBpdCgnd2l0aCBwcm9jZXNzIHZhbHVlJywgKCkgPT4ge1xuICAgICAgbGV0IHRlc3RQcm9wcyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgIHtcbiAgICAgICAgICBzcGFuQmFyT3B0aW9uczoge1xuICAgICAgICAgICAgdHlwZTogVEFHLFxuICAgICAgICAgICAgdGFnOiAndGFnJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgICAgc3Bhbjoge1xuICAgICAgICAgICAgcHJvY2Vzczoge1xuICAgICAgICAgICAgICB0YWdzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAga2V5OiAndGFnJyxcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiAncHJvY2Vzcy12YWx1ZScsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0YWdzOiBbXSxcbiAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgcmVuZGVyKDxTcGFuQmFyUm93IHsuLi4odGVzdFByb3BzIGFzIHVua25vd24gYXMgU3BhbkJhclJvd1Byb3BzKX0gLz4pO1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJyhwcm9jZXNzLXZhbHVlKScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxNQUFNLEVBQUVDLE1BQU0sUUFBUSx3QkFBd0I7QUFDdkQsT0FBT0MsU0FBUyxNQUFNLDZCQUE2QjtBQUNuRCxPQUFPQyxLQUFLLE1BQU0sT0FBTztBQUl6QixTQUFTQyxJQUFJLEVBQUVDLFFBQVEsRUFBRUMsR0FBRyxRQUFRLDZCQUE2QjtBQUVqRSxPQUFPQyxVQUFVLE1BQTJCLGNBQWM7QUFBQyxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFFM0RDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM3QixJQUFNQyxNQUFNLEdBQUcsU0FBUztFQUN4QixJQUFNQyxLQUFLLEdBQUc7SUFDWkMscUJBQXFCLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDaENDLFNBQVMsRUFBRSxjQUFjO0lBQ3pCQyxLQUFLLEVBQUUsU0FBUztJQUNoQkMsY0FBYyxFQUFFLEtBQUs7SUFDckJDLG1CQUFtQixFQUFFLElBQUlDLEdBQUcsQ0FBQyxDQUFDO0lBQzlCQyxrQkFBa0IsRUFBRSxJQUFJO0lBQ3hCQyxnQkFBZ0IsRUFBRSxLQUFLO0lBQ3ZCQyxhQUFhLEVBQUUsS0FBSztJQUNwQkMsZUFBZSxFQUFFVixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzFCVSxpQkFBaUIsRUFBRVgsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUM1QlcsYUFBYSxFQUFFLFNBQVM7SUFDeEJDLFFBQVEsRUFBRSxDQUFDO0lBQ1hDLEdBQUcsRUFBRTtNQUNIQyxTQUFTLEVBQUUsSUFBSTtNQUNmQyxPQUFPLEVBQUUsSUFBSTtNQUNiYixLQUFLLEVBQUUsU0FBUztNQUNoQlMsYUFBYSxFQUFF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