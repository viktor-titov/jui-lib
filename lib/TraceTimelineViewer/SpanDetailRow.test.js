import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _extends from "@babel/runtime/helpers/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import React from 'react';
import { createTheme } from '@grafana/data';
import DetailState from './SpanDetail/DetailState';
import { UnthemedSpanDetailRow } from './SpanDetailRow';
import { jsx as _jsx } from "react/jsx-runtime";
var testSpan = {
  spanID: 'testSpanID',
  traceID: 'testTraceID',
  depth: 3,
  process: {
    serviceName: 'some-service',
    tags: [{
      key: 'tag-key',
      value: 'tag-value'
    }]
  }
};
var setup = function setup(propOverrides) {
  var props = _extends({
    color: 'some-color',
    columnDivision: 0.5,
    detailState: new DetailState(),
    onDetailToggled: jest.fn(),
    isFilteredOut: false,
    logItemToggle: jest.fn(),
    logsToggle: jest.fn(),
    processToggle: jest.fn(),
    createFocusSpanLink: jest.fn(),
    hoverIndentGuideIds: new Map(),
    span: testSpan,
    tagsToggle: jest.fn(),
    traceStartTime: 1000,
    theme: createTheme()
  }, propOverrides);
  return render( /*#__PURE__*/_jsx(UnthemedSpanDetailRow, _extends({}, props)));
};
describe('SpanDetailRow tests', function () {
  it('renders without exploding', function () {
    expect(function () {
      return setup();
    }).not.toThrow();
  });
  it('calls toggle on click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var mockToggle, detailRow;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          mockToggle = jest.fn();
          setup({
            onDetailToggled: mockToggle
          });
          expect(mockToggle).not.toHaveBeenCalled();
          detailRow = screen.getByTestId('detail-row-expanded-accent');
          _context.next = 6;
          return userEvent.click(detailRow);
        case 6:
          expect(mockToggle).toHaveBeenCalled();
        case 7:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
  it('renders the span tree offset', function () {
    setup();
    expect(screen.getByTestId('SpanTreeOffset--indentGuide')).toBeInTheDocument();
  });
  it('renders the SpanDetail', function () {
    setup();
    expect(screen.getByTestId('span-detail-component')).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZW5kZXIiLCJzY3JlZW4iLCJ1c2VyRXZlbnQiLCJSZWFjdCIsImNyZWF0ZVRoZW1lIiwiRGV0YWlsU3RhdGUiLCJVbnRoZW1lZFNwYW5EZXRhaWxSb3ciLCJqc3giLCJfanN4IiwidGVzdFNwYW4iLCJzcGFuSUQiLCJ0cmFjZUlEIiwiZGVwdGgiLCJwcm9jZXNzIiwic2VydmljZU5hbWUiLCJ0YWdzIiwia2V5IiwidmFsdWUiLCJzZXR1cCIsInByb3BPdmVycmlkZXMiLCJwcm9wcyIsIl9leHRlbmRzIiwiY29sb3IiLCJjb2x1bW5EaXZpc2lvbiIsImRldGFpbFN0YXRlIiwib25EZXRhaWxUb2dnbGVkIiwiamVzdCIsImZuIiwiaXNGaWx0ZXJlZE91dCIsImxvZ0l0ZW1Ub2dnbGUiLCJsb2dzVG9nZ2xlIiwicHJvY2Vzc1RvZ2dsZSIsImNyZWF0ZUZvY3VzU3BhbkxpbmsiLCJob3ZlckluZGVudEd1aWRlSWRzIiwiTWFwIiwic3BhbiIsInRhZ3NUb2dnbGUiLCJ0cmFjZVN0YXJ0VGltZSIsInRoZW1lIiwiZGVzY3JpYmUiLCJpdCIsImV4cGVjdCIsIm5vdCIsInRvVGhyb3ciLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZSIsIm1vY2tUb2dnbGUiLCJkZXRhaWxSb3ciLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwidG9IYXZlQmVlbkNhbGxlZCIsImdldEJ5VGVzdElkIiwiY2xpY2siLCJzdG9wIiwidG9CZUluVGhlRG9jdW1lbnQiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvVHJhY2VUaW1lbGluZVZpZXdlci9TcGFuRGV0YWlsUm93LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IHVzZXJFdmVudCBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3VzZXItZXZlbnQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgY3JlYXRlVGhlbWUgfSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcblxuaW1wb3J0IERldGFpbFN0YXRlIGZyb20gJy4vU3BhbkRldGFpbC9EZXRhaWxTdGF0ZSc7XG5pbXBvcnQgeyBVbnRoZW1lZFNwYW5EZXRhaWxSb3csIFNwYW5EZXRhaWxSb3dQcm9wcyB9IGZyb20gJy4vU3BhbkRldGFpbFJvdyc7XG5cbmNvbnN0IHRlc3RTcGFuID0ge1xuICBzcGFuSUQ6ICd0ZXN0U3BhbklEJyxcbiAgdHJhY2VJRDogJ3Rlc3RUcmFjZUlEJyxcbiAgZGVwdGg6IDMsXG4gIHByb2Nlc3M6IHtcbiAgICBzZXJ2aWNlTmFtZTogJ3NvbWUtc2VydmljZScsXG4gICAgdGFnczogW3sga2V5OiAndGFnLWtleScsIHZhbHVlOiAndGFnLXZhbHVlJyB9XSxcbiAgfSxcbn07XG5jb25zdCBzZXR1cCA9IChwcm9wT3ZlcnJpZGVzPzogU3BhbkRldGFpbFJvd1Byb3BzKSA9PiB7XG4gIGNvbnN0IHByb3BzID0ge1xuICAgIGNvbG9yOiAnc29tZS1jb2xvcicsXG4gICAgY29sdW1uRGl2aXNpb246IDAuNSxcbiAgICBkZXRhaWxTdGF0ZTogbmV3IERldGFpbFN0YXRlKCksXG4gICAgb25EZXRhaWxUb2dnbGVkOiBqZXN0LmZuKCksXG4gICAgaXNGaWx0ZXJlZE91dDogZmFsc2UsXG4gICAgbG9nSXRlbVRvZ2dsZTogamVzdC5mbigpLFxuICAgIGxvZ3NUb2dnbGU6IGplc3QuZm4oKSxcbiAgICBwcm9jZXNzVG9nZ2xlOiBqZXN0LmZuKCksXG4gICAgY3JlYXRlRm9jdXNTcGFuTGluazogamVzdC5mbigpLFxuICAgIGhvdmVySW5kZW50R3VpZGVJZHM6IG5ldyBNYXAoKSxcbiAgICBzcGFuOiB0ZXN0U3BhbixcbiAgICB0YWdzVG9nZ2xlOiBqZXN0LmZuKCksXG4gICAgdHJhY2VTdGFydFRpbWU6IDEwMDAsXG4gICAgdGhlbWU6IGNyZWF0ZVRoZW1lKCksXG4gICAgLi4ucHJvcE92ZXJyaWRlcyxcbiAgfTtcbiAgcmV0dXJuIHJlbmRlcig8VW50aGVtZWRTcGFuRGV0YWlsUm93IHsuLi4ocHJvcHMgYXMgU3BhbkRldGFpbFJvd1Byb3BzKX0gLz4pO1xufTtcblxuZGVzY3JpYmUoJ1NwYW5EZXRhaWxSb3cgdGVzdHMnLCAoKSA9PiB7XG4gIGl0KCdyZW5kZXJzIHdpdGhvdXQgZXhwbG9kaW5nJywgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiBzZXR1cCgpKS5ub3QudG9UaHJvdygpO1xuICB9KTtcblxuICBpdCgnY2FsbHMgdG9nZ2xlIG9uIGNsaWNrJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IG1vY2tUb2dnbGUgPSBqZXN0LmZuKCk7XG4gICAgc2V0dXAoeyBvbkRldGFpbFRvZ2dsZWQ6IG1vY2tUb2dnbGUgfSBhcyB1bmtub3duIGFzIFNwYW5EZXRhaWxSb3dQcm9wcyk7XG4gICAgZXhwZWN0KG1vY2tUb2dnbGUpLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG5cbiAgICBjb25zdCBkZXRhaWxSb3cgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ2RldGFpbC1yb3ctZXhwYW5kZWQtYWNjZW50Jyk7XG4gICAgYXdhaXQgdXNlckV2ZW50LmNsaWNrKGRldGFpbFJvdyk7XG4gICAgZXhwZWN0KG1vY2tUb2dnbGUpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgdGhlIHNwYW4gdHJlZSBvZmZzZXQnLCAoKSA9PiB7XG4gICAgc2V0dXAoKTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ1NwYW5UcmVlT2Zmc2V0LS1pbmRlbnRHdWlkZScpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgncmVuZGVycyB0aGUgU3BhbkRldGFpbCcsICgpID0+IHtcbiAgICBzZXR1cCgpO1xuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnc3Bhbi1kZXRhaWwtY29tcG9uZW50JykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLE1BQU0sRUFBRUMsTUFBTSxRQUFRLHdCQUF3QjtBQUN2RCxPQUFPQyxTQUFTLE1BQU0sNkJBQTZCO0FBQ25ELE9BQU9DLEtBQUssTUFBTSxPQUFPO0FBRXpCLFNBQVNDLFdBQVcsUUFBUSxlQUFlO0FBRTNDLE9BQU9DLFdBQVcsTUFBTSwwQkFBMEI7QUFDbEQsU0FBU0MscUJBQXFCLFFBQTRCLGlCQUFpQjtBQUFDLFNBQUFDLEdBQUEsSUFBQUMsSUFBQTtBQUU1RSxJQUFNQyxRQUFRLEdBQUc7RUFDZkMsTUFBTSxFQUFFLFlBQVk7RUFDcEJDLE9BQU8sRUFBRSxhQUFhO0VBQ3RCQyxLQUFLLEVBQUUsQ0FBQztFQUNSQyxPQUFPLEVBQUU7SUFDUEMsV0FBVyxFQUFFLGNBQWM7SUFDM0JDLElBQUksRUFBRSxDQUFDO01BQUVDLEdBQUcsRUFBRSxTQUFTO01BQUVDLEtBQUssRUFBRTtJQUFZLENBQUM7RUFDL0M7QUFDRixDQUFDO0FBQ0QsSUFBTUMsS0FBSyxHQUFHLFNBQVJBLEtBQUtBLENBQUlDLGFBQWtDLEVBQUs7RUFDcEQsSUFBTUMsS0FBSyxHQUFBQyxRQUFBO0lBQ1RDLEtBQUssRUFBRSxZQUFZO0lBQ25CQyxjQUFjLEVBQUUsR0FBRztJQUNuQkMsV0FBVyxFQUFFLElBQUluQixXQUFXLENBQUMsQ0FBQztJQUM5Qm9CLGVBQWUsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUMxQkMsYUFBYSxFQUFFLEtBQUs7SUFDcEJDLGFBQWEsRUFBRUgsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztJQUN4QkcsVUFBVSxFQUFFSixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JCSSxhQUFhLEVBQUVMLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFDeEJLLG1CQUFtQixFQUFFTixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQzlCTSxtQkFBbUIsRUFBRSxJQUFJQyxHQUFHLENBQUMsQ0FBQztJQUM5QkMsSUFBSSxFQUFFMUIsUUFBUTtJQUNkMkIsVUFBVSxFQUFFVixJQUFJLENBQUNDLEVBQUUsQ0FBQyxDQUFDO0lBQ3JCVSxjQUFjLEVBQUUsSUFBSTtJQUNwQkMsS0FBSyxFQUFFbEMsV0FBVyxDQUFDO0VBQUMsR0FDakJlLGFBQWEsQ0FDakI7RUFDRCxPQUFPbkIsTUFBTSxlQUFDUSxJQUFBLENBQUNGLHFCQUFxQixFQUFBZSxRQUFBLEtBQU1ELEtBQUssQ0FBMEIsQ0FBQyxDQUFDO0FBQzdFLENBQUM7QUFFRG1CLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxZQUFNO0VBQ3BDQyxFQUFFLENBQUMsMkJBQTJCLEVBQUUsWUFBTTtJQUNwQ0MsTUFBTSxDQUFDO01BQUEsT0FBTXZCLEtBQUssQ0FBQyxDQUFDO0lBQUEsRUFBQyxDQUFDd0IsR0FBRyxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUNyQyxDQUFDLENBQUM7RUFFRkgsRUFBRSxDQUFDLHVCQUF1QixlQUFBSSxpQkFBQSxlQUFBQyxtQkFBQSxDQUFBQyxJQUFBLENBQUUsU0FBQUMsUUFBQTtJQUFBLElBQUFDLFVBQUEsRUFBQUMsU0FBQTtJQUFBLE9BQUFKLG1CQUFBLENBQUFLLElBQUEsVUFBQUMsU0FBQUMsUUFBQTtNQUFBLGtCQUFBQSxRQUFBLENBQUFDLElBQUEsR0FBQUQsUUFBQSxDQUFBRSxJQUFBO1FBQUE7VUFDcEJOLFVBQVUsR0FBR3RCLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7VUFDNUJULEtBQUssQ0FBQztZQUFFTyxlQUFlLEVBQUV1QjtVQUFXLENBQWtDLENBQUM7VUFDdkVQLE1BQU0sQ0FBQ08sVUFBVSxDQUFDLENBQUNOLEdBQUcsQ0FBQ2EsZ0JBQWdCLENBQUMsQ0FBQztVQUVuQ04sU0FBUyxHQUFHaEQsTUFBTSxDQUFDdUQsV0FBVyxDQUFDLDRCQUE0QixDQUFDO1VBQUFKLFFBQUEsQ0FBQUUsSUFBQTtVQUFBLE9BQzVEcEQsU0FBUyxDQUFDdUQsS0FBSyxDQUFDUixTQUFTLENBQUM7UUFBQTtVQUNoQ1IsTUFBTSxDQUFDTyxVQUFVLENBQUMsQ0FBQ08sZ0JBQWdCLENBQUMsQ0FBQztRQUFDO1FBQUE7VUFBQSxPQUFBSCxRQUFBLENBQUFNLElBQUE7TUFBQTtJQUFBLEdBQUFYLE9BQUE7RUFBQSxDQUN2QyxHQUFDO0VBRUZQLEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxZQUFNO0lBQ3ZDdEIsS0FBSyxDQUFDLENBQUM7SUFFUHVCLE1BQU0sQ0FBQ3hDLE1BQU0sQ0FBQ3VELFdBQVcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUNHLGlCQUFpQixDQUFDLENBQUM7RUFDL0UsQ0FBQyxDQUFDO0VBRUZuQixFQUFFLENBQUMsd0JBQXdCLEVBQUUsWUFBTTtJQUNqQ3RCLEtBQUssQ0FBQyxDQUFDO0lBRVB1QixNQUFNLENBQUN4QyxNQUFNLENBQUN1RCxXQUFXLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDRyxpQkFBaUIsQ0FBQyxDQUFDO0VBQ3pFLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==