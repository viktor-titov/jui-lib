import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Chance from 'chance';
import { getSpanId } from '../selectors/span';
var chance = new Chance();
export var SERVICE_LIST = ['serviceA', 'serviceB', 'serviceC', 'serviceD', 'serviceE', 'serviceF'];
export var OPERATIONS_LIST = ['GET', 'PUT', 'POST', 'DELETE', 'MySQL::SELECT', 'MySQL::INSERT', 'MongoDB::find', 'MongoDB::update'];
function setupParentSpan(spans, parentSpanValues) {
  Object.assign(spans[0], parentSpanValues);
  return spans;
}
function getParentSpanId(span, levels) {
  var nestingLevel = chance.integer({
    min: 1,
    max: levels.length
  });

  // pick the correct nesting level if allocated by the levels calculation
  levels.forEach(function (level, idx) {
    if (level.indexOf(getSpanId(span)) >= 0) {
      nestingLevel = idx;
    }
  });
  return nestingLevel - 1 >= 0 ? chance.pickone(levels[nestingLevel - 1]) : null;
}

/* this simulates the hierarchy created by CHILD_OF tags */
function attachReferences(spans, depth, spansPerLevel) {
  var levels = [[getSpanId(spans[0])]];
  var duplicateLevelFilter = function duplicateLevelFilter(currentLevels) {
    return function (span) {
      return !currentLevels.find(function (level) {
        return level.indexOf(span.spanID) >= 0;
      });
    };
  };
  while (levels.length < depth) {
    var remainingSpans = spans.filter(duplicateLevelFilter(levels));
    if (remainingSpans.length <= 0) {
      break;
    }
    var newLevel = chance.pickset(remainingSpans, spansPerLevel || chance.integer({
      min: 4,
      max: 8
    })).map(getSpanId);
    levels.push(newLevel);
  }

  // filter out empty levels
  levels = levels.filter(function (level) {
    return level.length > 0;
  });
  return spans.map(function (span) {
    var parentSpanId = getParentSpanId(span, levels);
    return parentSpanId ? _extends({}, span, {
      references: [{
        refType: 'CHILD_OF',
        traceID: span.traceID,
        spanID: parentSpanId
      }]
    }) : span;
  });
}
export default chance.mixin({
  trace: function trace(_ref) {
    var _ref$numberOfSpans = _ref.numberOfSpans,
      numberOfSpans = _ref$numberOfSpans === void 0 ? chance.pickone([Math.ceil(chance.normal({
        mean: 200,
        dev: 10
      })) + 1, Math.ceil(chance.integer({
        min: 3,
        max: 10
      })), Math.ceil(chance.normal({
        mean: 45,
        dev: 15
      })) + 1]) : _ref$numberOfSpans,
      _ref$numberOfProcesse = _ref.numberOfProcesses,
      numberOfProcesses = _ref$numberOfProcesse === void 0 ? chance.integer({
        min: 1,
        max: 10
      }) : _ref$numberOfProcesse,
      _ref$maxDepth = _ref.maxDepth,
      maxDepth = _ref$maxDepth === void 0 ? chance.integer({
        min: 1,
        max: 10
      }) : _ref$maxDepth,
      _ref$spansPerLevel = _ref.spansPerLevel,
      spansPerLevel = _ref$spansPerLevel === void 0 ? null : _ref$spansPerLevel;
    var traceID = chance.guid();
    var duration = chance.integer({
      min: 10000,
      max: 5000000
    });
    var timestamp = (new Date().getTime() - chance.integer({
      min: 0,
      max: 1000
    }) * 1000) * 1000;
    var processArray = chance.processes({
      numberOfProcesses: numberOfProcesses
    });
    var processes = processArray.reduce(function (pMap, p) {
      var _extends2;
      return _extends({}, pMap, (_extends2 = {}, _extends2[p.processID] = p, _extends2));
    }, {});
    var spans = chance.n(chance.span, numberOfSpans, {
      traceID: traceID,
      processes: processes,
      traceStartTime: timestamp,
      traceEndTime: timestamp + duration
    });
    spans = attachReferences(spans, maxDepth, spansPerLevel);
    if (spans.length > 1) {
      // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
      spans = setupParentSpan(spans, {
        startTime: timestamp,
        duration: duration
      });
    }
    return {
      traceID: traceID,
      spans: spans,
      processes: processes
    };
  },
  tag: function tag() {
    return {
      key: 'http.url',
      type: 'String',
      value: "/v2/" + chance.pickone(['alpha', 'beta', 'gamma']) + "/" + chance.guid()
    };
  },
  span: function span(_ref2) {
    var _ref2$traceID = _ref2.traceID,
      traceID = _ref2$traceID === void 0 ? chance.guid() : _ref2$traceID,
      _ref2$processes = _ref2.processes,
      processes = _ref2$processes === void 0 ? {} : _ref2$processes,
      _ref2$traceStartTime = _ref2.traceStartTime,
      traceStartTime = _ref2$traceStartTime === void 0 ? 0 : _ref2$traceStartTime,
      _ref2$traceEndTime = _ref2.traceEndTime,
      traceEndTime = _ref2$traceEndTime === void 0 ? 0 : _ref2$traceEndTime,
      _ref2$operations = _ref2.operations,
      operations = _ref2$operations === void 0 ? OPERATIONS_LIST : _ref2$operations;
    // Set default values for trace start/end time.
    traceStartTime = traceStartTime || chance.timestamp() * 1000 * 1000;
    traceEndTime = traceEndTime || traceStartTime + 100000;
    var startTime = chance.integer({
      min: traceStartTime,
      max: traceEndTime
    });
    var maxDuration = traceEndTime - startTime;
    return {
      traceID: traceID,
      processID: chance.pickone(Object.keys(processes)),
      spanID: chance.guid(),
      flags: 0,
      operationName: chance.pickone(operations),
      references: [],
      startTime: startTime,
      duration: chance.integer({
        min: 1,
        max: maxDuration <= 1 ? 2 : maxDuration
      }),
      tags: chance.tags(),
      logs: []
    };
  },
  process: function process(_ref3) {
    var _ref3$services = _ref3.services,
      services = _ref3$services === void 0 ? SERVICE_LIST : _ref3$services;
    return {
      processID: chance.guid(),
      serviceName: chance.pickone(services),
      tags: chance.tags()
    };
  },
  traces: function traces(_ref4) {
    var _ref4$numberOfTraces = _ref4.numberOfTraces,
      numberOfTraces = _ref4$numberOfTraces === void 0 ? chance.integer({
        min: 5,
        max: 15
      }) : _ref4$numberOfTraces;
    return chance.n(chance.trace, numberOfTraces, {});
  },
  tags: function tags() {
    return chance.n(chance.tag, chance.integer({
      min: 1,
      max: 10
    }), {});
  },
  processes: function processes(_ref5) {
    var _ref5$numberOfProcess = _ref5.numberOfProcesses,
      numberOfProcesses = _ref5$numberOfProcess === void 0 ? chance.integer({
        min: 1,
        max: 25
      }) : _ref5$numberOfProcess;
    return chance.n(chance.process, numberOfProcesses, {});
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,