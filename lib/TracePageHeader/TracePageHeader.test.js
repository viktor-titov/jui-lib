import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { render, screen } from '@testing-library/react';
import React from 'react';
import traceGenerator from '../demo/trace-generators';
import { getTraceName } from '../model/trace-viewer';
import transformTraceData from '../model/transform-trace-data';
import TracePageHeader from './TracePageHeader';
import { jsx as _jsx } from "react/jsx-runtime";
var trace = transformTraceData(traceGenerator.trace({}));
var setup = function setup(propOverrides) {
  var defaultProps = _extends({
    canCollapse: false,
    hideSummary: false,
    onSlimViewClicked: function onSlimViewClicked() {},
    onTraceGraphViewClicked: function onTraceGraphViewClicked() {},
    slimView: false,
    trace: trace,
    hideMap: false,
    timeZone: '',
    viewRange: {
      time: {
        current: [10, 20]
      }
    },
    updateNextViewRangeTime: function updateNextViewRangeTime() {},
    updateViewRangeTime: function updateViewRangeTime() {}
  }, propOverrides);
  return render( /*#__PURE__*/_jsx(TracePageHeader, _extends({}, defaultProps)));
};
describe('TracePageHeader test', function () {
  it('should render a header ', function () {
    setup();
    expect(screen.getByRole('banner')).toBeInTheDocument();
  });
  it('should render nothing if a trace is not present', function () {
    setup({
      trace: null
    });
    expect(screen.queryByRole('banner')).not.toBeInTheDocument();
    expect(screen.queryAllByRole('listitem')).toHaveLength(0);
    expect(screen.queryByText(/Reset Selection/)).not.toBeInTheDocument();
  });
  it('should render the trace title', function () {
    setup();
    expect(screen.getByRole('heading', {
      name: function name(content) {
        return content.replace(/ /g, '').startsWith(getTraceName(trace.spans).replace(/ /g, ''));
      }
    })).toBeInTheDocument();
  });
  it('should render the header items', function () {
    var _headerItems$0$textCo, _headerItems$1$textCo, _headerItems$2$textCo, _headerItems$3$textCo, _headerItems$4$textCo;
    setup();
    var headerItems = screen.queryAllByRole('listitem');
    expect(headerItems).toHaveLength(5);
    //                                                        Year-month-day hour-minute-second
    expect((_headerItems$0$textCo = headerItems[0].textContent) == null ? void 0 : _headerItems$0$textCo.match(/Trace Start:\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\.\d{3}/g)).toBeTruthy();
    expect((_headerItems$1$textCo = headerItems[1].textContent) == null ? void 0 : _headerItems$1$textCo.match(/Duration:[\d|\.][\.|\d|s][\.|\d|s]?[\d]?/)).toBeTruthy();
    expect((_headerItems$2$textCo = headerItems[2].textContent) == null ? void 0 : _headerItems$2$textCo.match(/Services:\d\d?/g)).toBeTruthy();
    expect((_headerItems$3$textCo = headerItems[3].textContent) == null ? void 0 : _headerItems$3$textCo.match(/Depth:\d\d?/)).toBeTruthy();
    expect((_headerItems$4$textCo = headerItems[4].textContent) == null ? void 0 : _headerItems$4$textCo.match(/Total Spans:\d\d?\d?\d?/)).toBeTruthy();
  });
  it('should render a <SpanGraph>', function () {
    setup();
    expect(screen.getByText(/Reset Selection/)).toBeInTheDocument();
  });
  describe('observes the visibility toggles for various UX elements', function () {
    it('hides the minimap when hideMap === true', function () {
      setup({
        hideMap: true
      });
      expect(screen.queryByText(/Reset Selection/)).not.toBeInTheDocument();
    });
    it('hides the summary when hideSummary === true', function () {
      var _setup = setup({
          hideSummary: false
        }),
        rerender = _setup.rerender;
      expect(screen.queryAllByRole('listitem')).toHaveLength(5);
      rerender( /*#__PURE__*/_jsx(TracePageHeader, {
        hideSummary: false,
        trace: null
      }));
      expect(screen.queryAllByRole('listitem')).toHaveLength(0);
      rerender( /*#__PURE__*/_jsx(TracePageHeader, {
        trace: trace,
        hideSummary: true,
        hideMap: false,
        viewRange: {
          time: {
            current: [10, 20]
          }
        }
      }));
      expect(screen.queryAllByRole('listitem')).toHaveLength(0);
      rerender( /*#__PURE__*/_jsx(TracePageHeader, {
        trace: trace,
        hideSummary: false,
        hideMap: false,
        viewRange: {
          time: {
            current: [10, 20]
          }
        }
      }));
      expect(screen.queryAllByRole('listitem')).toHaveLength(5);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,