import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _extends from "@babel/runtime/helpers/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { getAllByTestId, render, screen } from '@testing-library/react';
import React from 'react';
import traceGenerator from '../../demo/trace-generators';
import transformTraceData from '../../model/transform-trace-data';
import { polyfill as polyfillAnimationFrame } from '../../utils/test/requestAnimationFrame';
import SpanGraph, { TIMELINE_TICK_INTERVAL } from './index';
import { jsx as _jsx } from "react/jsx-runtime";
describe('<SpanGraph>', function () {
  polyfillAnimationFrame(window);
  var trace = transformTraceData(traceGenerator.trace({}));
  var props = {
    trace: trace,
    updateViewRangeTime: function updateViewRangeTime() {},
    viewRange: {
      time: {
        current: [0, 1]
      }
    }
  };
  beforeEach(function () {
    render( /*#__PURE__*/_jsx(SpanGraph, _extends({}, props)));
  });
  it('renders <CanvasSpanGraph />', function () {
    var canvasSpanGraphComponent = screen.getByTestId('CanvasSpanGraph');
    expect(canvasSpanGraphComponent).toBeTruthy();
  });
  it('renders <TickLabels />', function () {
    var tickLabelsComponent = screen.getByTestId('TickLabels');
    expect(tickLabelsComponent).toBeTruthy();
  });
  it('returns an empty div if a trace is not provided', function () {
    var _render = render( /*#__PURE__*/_jsx(SpanGraph, _extends({}, _extends({}, props, {
        trace: null
      })))),
      container = _render.container;
    expect(container.firstChild).toBeEmptyDOMElement();
  });
  it('renders <TickLabels /> with the correct numnber of ticks', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var tickLabelsDiv;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          tickLabelsDiv = screen.getByTestId('TickLabels');
          expect(getAllByTestId(tickLabelsDiv, 'tick').length).toBe(TIMELINE_TICK_INTERVAL + 1);
        case 2:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRBbGxCeVRlc3RJZCIsInJlbmRlciIsInNjcmVlbiIsIlJlYWN0IiwidHJhY2VHZW5lcmF0b3IiLCJ0cmFuc2Zvcm1UcmFjZURhdGEiLCJwb2x5ZmlsbCIsInBvbHlmaWxsQW5pbWF0aW9uRnJhbWUiLCJTcGFuR3JhcGgiLCJUSU1FTElORV9USUNLX0lOVEVSVkFMIiwianN4IiwiX2pzeCIsImRlc2NyaWJlIiwid2luZG93IiwidHJhY2UiLCJwcm9wcyIsInVwZGF0ZVZpZXdSYW5nZVRpbWUiLCJ2aWV3UmFuZ2UiLCJ0aW1lIiwiY3VycmVudCIsImJlZm9yZUVhY2giLCJfZXh0ZW5kcyIsIml0IiwiY2FudmFzU3BhbkdyYXBoQ29tcG9uZW50IiwiZ2V0QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwidGlja0xhYmVsc0NvbXBvbmVudCIsIl9yZW5kZXIiLCJjb250YWluZXIiLCJmaXJzdENoaWxkIiwidG9CZUVtcHR5RE9NRWxlbWVudCIsIl9hc3luY1RvR2VuZXJhdG9yIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsIm1hcmsiLCJfY2FsbGVlIiwidGlja0xhYmVsc0RpdiIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJsZW5ndGgiLCJ0b0JlIiwic3RvcCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9UcmFjZVBhZ2VIZWFkZXIvU3BhbkdyYXBoL2luZGV4LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBnZXRBbGxCeVRlc3RJZCwgcmVuZGVyLCBzY3JlZW4gfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB0cmFjZUdlbmVyYXRvciBmcm9tICcuLi8uLi9kZW1vL3RyYWNlLWdlbmVyYXRvcnMnO1xuaW1wb3J0IHRyYW5zZm9ybVRyYWNlRGF0YSBmcm9tICcuLi8uLi9tb2RlbC90cmFuc2Zvcm0tdHJhY2UtZGF0YSc7XG5pbXBvcnQgeyBwb2x5ZmlsbCBhcyBwb2x5ZmlsbEFuaW1hdGlvbkZyYW1lIH0gZnJvbSAnLi4vLi4vdXRpbHMvdGVzdC9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUnO1xuXG5pbXBvcnQgU3BhbkdyYXBoLCB7IFNwYW5HcmFwaFByb3BzLCBUSU1FTElORV9USUNLX0lOVEVSVkFMIH0gZnJvbSAnLi9pbmRleCc7XG5cbmRlc2NyaWJlKCc8U3BhbkdyYXBoPicsICgpID0+IHtcbiAgcG9seWZpbGxBbmltYXRpb25GcmFtZSh3aW5kb3cpO1xuXG4gIGNvbnN0IHRyYWNlID0gdHJhbnNmb3JtVHJhY2VEYXRhKHRyYWNlR2VuZXJhdG9yLnRyYWNlKHt9KSkhO1xuICBjb25zdCBwcm9wcyA9IHtcbiAgICB0cmFjZSxcbiAgICB1cGRhdGVWaWV3UmFuZ2VUaW1lOiAoKSA9PiB7fSxcbiAgICB2aWV3UmFuZ2U6IHtcbiAgICAgIHRpbWU6IHtcbiAgICAgICAgY3VycmVudDogWzAsIDFdLFxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHJlbmRlcig8U3BhbkdyYXBoIHsuLi4ocHJvcHMgYXMgdW5rbm93biBhcyBTcGFuR3JhcGhQcm9wcyl9IC8+KTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgPENhbnZhc1NwYW5HcmFwaCAvPicsICgpID0+IHtcbiAgICBjb25zdCBjYW52YXNTcGFuR3JhcGhDb21wb25lbnQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ0NhbnZhc1NwYW5HcmFwaCcpO1xuICAgIGV4cGVjdChjYW52YXNTcGFuR3JhcGhDb21wb25lbnQpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgPFRpY2tMYWJlbHMgLz4nLCAoKSA9PiB7XG4gICAgY29uc3QgdGlja0xhYmVsc0NvbXBvbmVudCA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnVGlja0xhYmVscycpO1xuICAgIGV4cGVjdCh0aWNrTGFiZWxzQ29tcG9uZW50KS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIGFuIGVtcHR5IGRpdiBpZiBhIHRyYWNlIGlzIG5vdCBwcm92aWRlZCcsICgpID0+IHtcbiAgICBjb25zdCB7IGNvbnRhaW5lciB9ID0gcmVuZGVyKDxTcGFuR3JhcGggey4uLih7IC4uLnByb3BzLCB0cmFjZTogbnVsbCB9IGFzIHVua25vd24gYXMgU3BhbkdyYXBoUHJvcHMpfSAvPik7XG4gICAgZXhwZWN0KGNvbnRhaW5lci5maXJzdENoaWxkKS50b0JlRW1wdHlET01FbGVtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIDxUaWNrTGFiZWxzIC8+IHdpdGggdGhlIGNvcnJlY3QgbnVtbmJlciBvZiB0aWNrcycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCB0aWNrTGFiZWxzRGl2ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdUaWNrTGFiZWxzJyk7XG4gICAgZXhwZWN0KGdldEFsbEJ5VGVzdElkKHRpY2tMYWJlbHNEaXYsICd0aWNrJykubGVuZ3RoKS50b0JlKFRJTUVMSU5FX1RJQ0tfSU5URVJWQUwgKyAxKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsY0FBYyxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sUUFBUSx3QkFBd0I7QUFDdkUsT0FBT0MsS0FBSyxNQUFNLE9BQU87QUFFekIsT0FBT0MsY0FBYyxNQUFNLDZCQUE2QjtBQUN4RCxPQUFPQyxrQkFBa0IsTUFBTSxrQ0FBa0M7QUFDakUsU0FBU0MsUUFBUSxJQUFJQyxzQkFBc0IsUUFBUSx3Q0FBd0M7QUFFM0YsT0FBT0MsU0FBUyxJQUFvQkMsc0JBQXNCLFFBQVEsU0FBUztBQUFDLFNBQUFDLEdBQUEsSUFBQUMsSUFBQTtBQUU1RUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFNO0VBQzVCTCxzQkFBc0IsQ0FBQ00sTUFBTSxDQUFDO0VBRTlCLElBQU1DLEtBQUssR0FBR1Qsa0JBQWtCLENBQUNELGNBQWMsQ0FBQ1UsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUU7RUFDM0QsSUFBTUMsS0FBSyxHQUFHO0lBQ1pELEtBQUssRUFBTEEsS0FBSztJQUNMRSxtQkFBbUIsRUFBRSxTQUFBQSxvQkFBQSxFQUFNLENBQUMsQ0FBQztJQUM3QkMsU0FBUyxFQUFFO01BQ1RDLElBQUksRUFBRTtRQUNKQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztNQUNoQjtJQUNGO0VBQ0YsQ0FBQztFQUVEQyxVQUFVLENBQUMsWUFBTTtJQUNmbkIsTUFBTSxlQUFDVSxJQUFBLENBQUNILFNBQVMsRUFBQWEsUUFBQSxLQUFNTixLQUFLLENBQWlDLENBQUMsQ0FBQztFQUNqRSxDQUFDLENBQUM7RUFFRk8sRUFBRSxDQUFDLDZCQUE2QixFQUFFLFlBQU07SUFDdEMsSUFBTUMsd0JBQXdCLEdBQUdyQixNQUFNLENBQUNzQixXQUFXLENBQUMsaUJBQWlCLENBQUM7SUFDdEVDLE1BQU0sQ0FBQ0Ysd0JBQXdCLENBQUMsQ0FBQ0csVUFBVSxDQUFDLENBQUM7RUFDL0MsQ0FBQyxDQUFDO0VBRUZKLEVBQUUsQ0FBQyx3QkFBd0IsRUFBRSxZQUFNO0lBQ2pDLElBQU1LLG1CQUFtQixHQUFHekIsTUFBTSxDQUFDc0IsV0FBVyxDQUFDLFlBQVksQ0FBQztJQUM1REMsTUFBTSxDQUFDRSxtQkFBbUIsQ0FBQyxDQUFDRCxVQUFVLENBQUMsQ0FBQztFQUMxQyxDQUFDLENBQUM7RUFFRkosRUFBRSxDQUFDLGlEQUFpRCxFQUFFLFlBQU07SUFDMUQsSUFBQU0sT0FBQSxHQUFzQjNCLE1BQU0sZUFBQ1UsSUFBQSxDQUFDSCxTQUFTLEVBQUFhLFFBQUEsS0FBQUEsUUFBQSxLQUFXTixLQUFLO1FBQUVELEtBQUssRUFBRTtNQUFJLEdBQW1DLENBQUMsQ0FBQztNQUFqR2UsU0FBUyxHQUFBRCxPQUFBLENBQVRDLFNBQVM7SUFDakJKLE1BQU0sQ0FBQ0ksU0FBUyxDQUFDQyxVQUFVLENBQUMsQ0FBQ0MsbUJBQW1CLENBQUMsQ0FBQztFQUNwRCxDQUFDLENBQUM7RUFFRlQsRUFBRSxDQUFDLDBEQUEwRCxlQUFBVSxpQkFBQSxlQUFBQyxtQkFBQSxDQUFBQyxJQUFBLENBQUUsU0FBQUMsUUFBQTtJQUFBLElBQUFDLGFBQUE7SUFBQSxPQUFBSCxtQkFBQSxDQUFBSSxJQUFBLFVBQUFDLFNBQUFDLFFBQUE7TUFBQSxrQkFBQUEsUUFBQSxDQUFBQyxJQUFBLEdBQUFELFFBQUEsQ0FBQUUsSUFBQTtRQUFBO1VBQ3ZETCxhQUFhLEdBQUdsQyxNQUFNLENBQUNzQixXQUFXLENBQUMsWUFBWSxDQUFDO1VBQ3REQyxNQUFNLENBQUN6QixjQUFjLENBQUNvQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUNNLE1BQU0sQ0FBQyxDQUFDQyxJQUFJLENBQUNsQyxzQkFBc0IsR0FBRyxDQUFDLENBQUM7UUFBQztRQUFBO1VBQUEsT0FBQThCLFFBQUEsQ0FBQUssSUFBQTtNQUFBO0lBQUEsR0FBQVQsT0FBQTtFQUFBLENBQ3ZGLEdBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=