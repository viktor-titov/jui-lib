import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _templateObject;
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { css } from '@emotion/css';
import * as React from 'react';
import { withTheme2, stylesFactory } from '@grafana/ui';
import { autoColor } from '../../Theme';
import { getRgbColorByKey } from '../../utils/color-generator';
import renderIntoCanvas from './render-into-canvas';
import { jsx as _jsx } from "react/jsx-runtime";
var getStyles = stylesFactory(function (theme) {
  return {
    CanvasSpanGraph: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n      label: CanvasSpanGraph;\n      background: ", ";\n      height: 60px;\n      position: absolute;\n      width: 100%;\n    "])), autoColor(theme, '#fafafa'))
  };
});
export var UnthemedCanvasSpanGraph = /*#__PURE__*/function (_React$PureComponent) {
  function UnthemedCanvasSpanGraph(props) {
    var _this;
    _this = _React$PureComponent.call(this, props) || this;
    _this.getColor = function (key) {
      return getRgbColorByKey(key, _this.props.theme);
    };
    _this._setCanvasRef = function (elm) {
      _this._canvasElm = elm;
    };
    _this._canvasElm = undefined;
    return _this;
  }
  _inheritsLoose(UnthemedCanvasSpanGraph, _React$PureComponent);
  var _proto = UnthemedCanvasSpanGraph.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this._draw();
  };
  _proto.componentDidUpdate = function componentDidUpdate() {
    this._draw();
  };
  _proto._draw = function _draw() {
    if (this._canvasElm) {
      var _this$props = this.props,
        totalValueWidth = _this$props.valueWidth,
        items = _this$props.items;
      renderIntoCanvas(this._canvasElm, items, totalValueWidth, this.getColor, autoColor(this.props.theme, '#fff'));
    }
  };
  _proto.render = function render() {
    return /*#__PURE__*/_jsx("canvas", {
      className: getStyles(this.props.theme).CanvasSpanGraph,
      ref: this._setCanvasRef,
      "data-testid": "CanvasSpanGraph"
    });
  };
  return UnthemedCanvasSpanGraph;
}(React.PureComponent);
export default withTheme2(UnthemedCanvasSpanGraph);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjc3MiLCJSZWFjdCIsIndpdGhUaGVtZTIiLCJzdHlsZXNGYWN0b3J5IiwiYXV0b0NvbG9yIiwiZ2V0UmdiQ29sb3JCeUtleSIsInJlbmRlckludG9DYW52YXMiLCJqc3giLCJfanN4IiwiZ2V0U3R5bGVzIiwidGhlbWUiLCJDYW52YXNTcGFuR3JhcGgiLCJfdGVtcGxhdGVPYmplY3QiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UiLCJVbnRoZW1lZENhbnZhc1NwYW5HcmFwaCIsIl9SZWFjdCRQdXJlQ29tcG9uZW50IiwicHJvcHMiLCJfdGhpcyIsImNhbGwiLCJnZXRDb2xvciIsImtleSIsIl9zZXRDYW52YXNSZWYiLCJlbG0iLCJfY2FudmFzRWxtIiwidW5kZWZpbmVkIiwiX2luaGVyaXRzTG9vc2UiLCJfcHJvdG8iLCJwcm90b3R5cGUiLCJjb21wb25lbnREaWRNb3VudCIsIl9kcmF3IiwiY29tcG9uZW50RGlkVXBkYXRlIiwiX3RoaXMkcHJvcHMiLCJ0b3RhbFZhbHVlV2lkdGgiLCJ2YWx1ZVdpZHRoIiwiaXRlbXMiLCJyZW5kZXIiLCJjbGFzc05hbWUiLCJyZWYiLCJQdXJlQ29tcG9uZW50Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL1RyYWNlUGFnZUhlYWRlci9TcGFuR3JhcGgvQ2FudmFzU3BhbkdyYXBoLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY3NzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgR3JhZmFuYVRoZW1lMiB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHsgd2l0aFRoZW1lMiwgc3R5bGVzRmFjdG9yeSB9IGZyb20gJ0BncmFmYW5hL3VpJztcblxuaW1wb3J0IHsgYXV0b0NvbG9yIH0gZnJvbSAnLi4vLi4vVGhlbWUnO1xuaW1wb3J0IHsgVE5pbCB9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7IGdldFJnYkNvbG9yQnlLZXkgfSBmcm9tICcuLi8uLi91dGlscy9jb2xvci1nZW5lcmF0b3InO1xuXG5pbXBvcnQgcmVuZGVySW50b0NhbnZhcyBmcm9tICcuL3JlbmRlci1pbnRvLWNhbnZhcyc7XG5cbmNvbnN0IGdldFN0eWxlcyA9IHN0eWxlc0ZhY3RvcnkoKHRoZW1lOiBHcmFmYW5hVGhlbWUyKSA9PiB7XG4gIHJldHVybiB7XG4gICAgQ2FudmFzU3BhbkdyYXBoOiBjc3NgXG4gICAgICBsYWJlbDogQ2FudmFzU3BhbkdyYXBoO1xuICAgICAgYmFja2dyb3VuZDogJHthdXRvQ29sb3IodGhlbWUsICcjZmFmYWZhJyl9O1xuICAgICAgaGVpZ2h0OiA2MHB4O1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgYCxcbiAgfTtcbn0pO1xuXG50eXBlIENhbnZhc1NwYW5HcmFwaFByb3BzID0ge1xuICBpdGVtczogQXJyYXk8eyB2YWx1ZVdpZHRoOiBudW1iZXI7IHZhbHVlT2Zmc2V0OiBudW1iZXI7IHNlcnZpY2VOYW1lOiBzdHJpbmcgfT47XG4gIHZhbHVlV2lkdGg6IG51bWJlcjtcbiAgdGhlbWU6IEdyYWZhbmFUaGVtZTI7XG59O1xuXG5leHBvcnQgY2xhc3MgVW50aGVtZWRDYW52YXNTcGFuR3JhcGggZXh0ZW5kcyBSZWFjdC5QdXJlQ29tcG9uZW50PENhbnZhc1NwYW5HcmFwaFByb3BzPiB7XG4gIF9jYW52YXNFbG06IEhUTUxDYW52YXNFbGVtZW50IHwgVE5pbDtcblxuICBjb25zdHJ1Y3Rvcihwcm9wczogQ2FudmFzU3BhbkdyYXBoUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5fY2FudmFzRWxtID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZ2V0Q29sb3IgPSAoa2V5OiBzdHJpbmcpID0+IGdldFJnYkNvbG9yQnlLZXkoa2V5LCB0aGlzLnByb3BzLnRoZW1lKTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9kcmF3KCk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdGhpcy5fZHJhdygpO1xuICB9XG5cbiAgX3NldENhbnZhc1JlZiA9IChlbG06IEhUTUxDYW52YXNFbGVtZW50IHwgVE5pbCkgPT4ge1xuICAgIHRoaXMuX2NhbnZhc0VsbSA9IGVsbTtcbiAgfTtcblxuICBfZHJhdygpIHtcbiAgICBpZiAodGhpcy5fY2FudmFzRWxtKSB7XG4gICAgICBjb25zdCB7IHZhbHVlV2lkdGg6IHRvdGFsVmFsdWVXaWR0aCwgaXRlbXMgfSA9IHRoaXMucHJvcHM7XG4gICAgICByZW5kZXJJbnRvQ2FudmFzKHRoaXMuX2NhbnZhc0VsbSwgaXRlbXMsIHRvdGFsVmFsdWVXaWR0aCwgdGhpcy5nZXRDb2xvciwgYXV0b0NvbG9yKHRoaXMucHJvcHMudGhlbWUsICcjZmZmJykpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGNhbnZhc1xuICAgICAgICBjbGFzc05hbWU9e2dldFN0eWxlcyh0aGlzLnByb3BzLnRoZW1lKS5DYW52YXNTcGFuR3JhcGh9XG4gICAgICAgIHJlZj17dGhpcy5fc2V0Q2FudmFzUmVmfVxuICAgICAgICBkYXRhLXRlc3RpZD1cIkNhbnZhc1NwYW5HcmFwaFwiXG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lMihVbnRoZW1lZENhbnZhc1NwYW5HcmFwaCk7XG4iXSwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEdBQUcsUUFBUSxjQUFjO0FBQ2xDLE9BQU8sS0FBS0MsS0FBSyxNQUFNLE9BQU87QUFHOUIsU0FBU0MsVUFBVSxFQUFFQyxhQUFhLFFBQVEsYUFBYTtBQUV2RCxTQUFTQyxTQUFTLFFBQVEsYUFBYTtBQUV2QyxTQUFTQyxnQkFBZ0IsUUFBUSw2QkFBNkI7QUFFOUQsT0FBT0MsZ0JBQWdCLE1BQU0sc0JBQXNCO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBRXBELElBQU1DLFNBQVMsR0FBR04sYUFBYSxDQUFDLFVBQUNPLEtBQW9CLEVBQUs7RUFDeEQsT0FBTztJQUNMQyxlQUFlLEVBQUVYLEdBQUcsQ0FBQVksZUFBQSxLQUFBQSxlQUFBLEdBQUFDLDJCQUFBLDJJQUVKVCxTQUFTLENBQUNNLEtBQUssRUFBRSxTQUFTLENBQUM7RUFLN0MsQ0FBQztBQUNILENBQUMsQ0FBQztBQVFGLFdBQWFJLHVCQUF1QiwwQkFBQUMsb0JBQUE7RUFHbEMsU0FBQUQsd0JBQVlFLEtBQTJCLEVBQUU7SUFBQSxJQUFBQyxLQUFBO0lBQ3ZDQSxLQUFBLEdBQUFGLG9CQUFBLENBQUFHLElBQUEsT0FBTUYsS0FBSyxDQUFDO0lBQUNDLEtBQUEsQ0FJZkUsUUFBUSxHQUFHLFVBQUNDLEdBQVc7TUFBQSxPQUFLZixnQkFBZ0IsQ0FBQ2UsR0FBRyxFQUFFSCxLQUFBLENBQUtELEtBQUssQ0FBQ04sS0FBSyxDQUFDO0lBQUE7SUFBQU8sS0FBQSxDQVVuRUksYUFBYSxHQUFHLFVBQUNDLEdBQTZCLEVBQUs7TUFDakRMLEtBQUEsQ0FBS00sVUFBVSxHQUFHRCxHQUFHO0lBQ3ZCLENBQUM7SUFmQ0wsS0FBQSxDQUFLTSxVQUFVLEdBQUdDLFNBQVM7SUFBQyxPQUFBUCxLQUFBO0VBQzlCO0VBQUNRLGNBQUEsQ0FBQVgsdUJBQUEsRUFBQUMsb0JBQUE7RUFBQSxJQUFBVyxNQUFBLEdBQUFaLHVCQUFBLENBQUFhLFNBQUE7RUFBQUQsTUFBQSxDQUlERSxpQkFBaUIsR0FBakIsU0FBQUEsa0JBQUEsRUFBb0I7SUFDbEIsSUFBSSxDQUFDQyxLQUFLLENBQUMsQ0FBQztFQUNkLENBQUM7RUFBQUgsTUFBQSxDQUVESSxrQkFBa0IsR0FBbEIsU0FBQUEsbUJBQUEsRUFBcUI7SUFDbkIsSUFBSSxDQUFDRCxLQUFLLENBQUMsQ0FBQztFQUNkLENBQUM7RUFBQUgsTUFBQSxDQU1ERyxLQUFLLEdBQUwsU0FBQUEsTUFBQSxFQUFRO0lBQ04sSUFBSSxJQUFJLENBQUNOLFVBQVUsRUFBRTtNQUNuQixJQUFBUSxXQUFBLEdBQStDLElBQUksQ0FBQ2YsS0FBSztRQUFyQ2dCLGVBQWUsR0FBQUQsV0FBQSxDQUEzQkUsVUFBVTtRQUFtQkMsS0FBSyxHQUFBSCxXQUFBLENBQUxHLEtBQUs7TUFDMUM1QixnQkFBZ0IsQ0FBQyxJQUFJLENBQUNpQixVQUFVLEVBQUVXLEtBQUssRUFBRUYsZUFBZSxFQUFFLElBQUksQ0FBQ2IsUUFBUSxFQUFFZixTQUFTLENBQUMsSUFBSSxDQUFDWSxLQUFLLENBQUNOLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMvRztFQUNGLENBQUM7RUFBQWdCLE1BQUEsQ0FFRFMsTUFBTSxHQUFOLFNBQUFBLE9BQUEsRUFBUztJQUNQLG9CQUNFM0IsSUFBQTtNQUNFNEIsU0FBUyxFQUFFM0IsU0FBUyxDQUFDLElBQUksQ0FBQ08sS0FBSyxDQUFDTixLQUFLLENBQUMsQ0FBQ0MsZUFBZ0I7TUFDdkQwQixHQUFHLEVBQUUsSUFBSSxDQUFDaEIsYUFBYztNQUN4QixlQUFZO0lBQWlCLENBQzlCLENBQUM7RUFFTixDQUFDO0VBQUEsT0FBQVAsdUJBQUE7QUFBQSxFQXJDMENiLEtBQUssQ0FBQ3FDLGFBQWE7QUF3Q2hFLGVBQWVwQyxVQUFVLENBQUNZLHVCQUF1QixDQUFDIiwiaWdub3JlTGlzdCI6W119