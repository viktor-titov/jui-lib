// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { range as _range } from 'lodash';
import renderIntoCanvas, { ITEM_ALPHA, MIN_ITEM_HEIGHT, MAX_TOTAL_HEIGHT, MIN_ITEM_WIDTH, MIN_TOTAL_HEIGHT, MAX_ITEM_HEIGHT } from './render-into-canvas';
var BG_COLOR = '#FFFFFF';
var getCanvasWidth = function getCanvasWidth() {
  return window.innerWidth * 2;
};
var getBgFillRect = function getBgFillRect(items) {
  return {
    fillStyle: BG_COLOR,
    height: !items || items.length < MIN_TOTAL_HEIGHT ? MIN_TOTAL_HEIGHT : Math.min(MAX_TOTAL_HEIGHT, items.length),
    width: getCanvasWidth(),
    x: 0,
    y: 0
  };
};
describe('renderIntoCanvas()', function () {
  var basicItem = {
    valueWidth: 100,
    valueOffset: 50,
    serviceName: 'some-name'
  };
  var CanvasContext = /*#__PURE__*/function () {
    function CanvasContext() {
      this.fillRectAccumulator = [];
      this.fillStyle = undefined;
      this.fillRectAccumulator = [];
    }
    var _proto = CanvasContext.prototype;
    _proto.fillRect = function fillRect(x, y, width, height) {
      var fillStyle = this.fillStyle;
      this.fillRectAccumulator.push({
        fillStyle: fillStyle,
        height: height,
        width: width,
        x: x,
        y: y
      });
    };
    return CanvasContext;
  }();
  var Canvas = /*#__PURE__*/function () {
    function Canvas() {
      this.contexts = [];
      this.height = NaN;
      this.width = NaN;
      this.getContext = jest.fn(this._getContext.bind(this));
    }
    var _proto2 = Canvas.prototype;
    _proto2._getContext = function _getContext() {
      var ctx = new CanvasContext();
      this.contexts.push(ctx);
      return ctx;
    };
    return Canvas;
  }();
  function getColorFactory() {
    var i = 0;
    var inputOutput = [];
    function getFakeColor(str) {
      var rv = [i, i, i];
      i++;
      inputOutput.push({
        input: str,
        output: rv.slice()
      });
      return rv;
    }
    getFakeColor.inputOutput = inputOutput;
    return getFakeColor;
  }
  it('sets the width', function () {
    var canvas = new Canvas();
    expect(canvas.width !== canvas.width).toBe(true);
    renderIntoCanvas(canvas, [basicItem], 150, getColorFactory(), BG_COLOR);
    expect(canvas.width).toBe(getCanvasWidth());
  });
  describe('when there are limited number of items', function () {
    it('sets the height', function () {
      var canvas = new Canvas();
      expect(canvas.height !== canvas.height).toBe(true);
      renderIntoCanvas(canvas, [basicItem], 150, getColorFactory(), BG_COLOR);
      expect(canvas.height).toBe(MIN_TOTAL_HEIGHT);
    });
    it('draws the background', function () {
      var expectedDrawing = [getBgFillRect()];
      var canvas = new Canvas();
      var items = [];
      var totalValueWidth = 4000;
      var getFillColor = getColorFactory();
      renderIntoCanvas(canvas, items, totalValueWidth, getFillColor, BG_COLOR);
      expect(canvas.getContext.mock.calls).toEqual([['2d', {
        alpha: false
      }]]);
      expect(canvas.contexts.length).toBe(1);
      expect(canvas.contexts[0].fillRectAccumulator).toEqual(expectedDrawing);
    });
    it('draws the map', function () {
      var totalValueWidth = 4000;
      var items = [{
        valueWidth: 50,
        valueOffset: 50,
        serviceName: 'service-name-0'
      }, {
        valueWidth: 100,
        valueOffset: 100,
        serviceName: 'service-name-1'
      }, {
        valueWidth: 150,
        valueOffset: 150,
        serviceName: 'service-name-2'
      }];
      var expectedColors = [{
        input: items[0].serviceName,
        output: [0, 0, 0]
      }, {
        input: items[1].serviceName,
        output: [1, 1, 1]
      }, {
        input: items[2].serviceName,
        output: [2, 2, 2]
      }];
      var cHeight = items.length < MIN_TOTAL_HEIGHT ? MIN_TOTAL_HEIGHT : Math.min(items.length, MAX_TOTAL_HEIGHT);
      var expectedDrawings = [getBgFillRect()].concat(items.map(function (item, i) {
        var valueWidth = item.valueWidth,
          valueOffset = item.valueOffset;
        var color = expectedColors[i].output;
        var fillStyle = "rgba(" + color.concat(ITEM_ALPHA).join() + ")";
        var height = Math.min(MAX_ITEM_HEIGHT, Math.max(MIN_ITEM_HEIGHT, cHeight / items.length));
        var width = valueWidth / totalValueWidth * getCanvasWidth();
        var x = valueOffset / totalValueWidth * getCanvasWidth();
        var y = cHeight / items.length * i;
        return {
          fillStyle: fillStyle,
          height: height,
          width: width,
          x: x,
          y: y
        };
      }));
      var canvas = new Canvas();
      var getFillColor = getColorFactory();
      renderIntoCanvas(canvas, items, totalValueWidth, getFillColor, BG_COLOR);
      expect(getFillColor.inputOutput).toEqual(expectedColors);
      expect(canvas.getContext.mock.calls).toEqual([['2d', {
        alpha: false
      }]]);
      expect(canvas.contexts.length).toBe(1);
      expect(canvas.contexts[0].fillRectAccumulator).toEqual(expectedDrawings);
    });
  });
  describe('when there are many items', function () {
    it('sets the height when there are many items', function () {
      var canvas = new Canvas();
      var items = [];
      for (var i = 0; i < MIN_TOTAL_HEIGHT + 1; i++) {
        items.push(basicItem);
      }
      expect(canvas.height !== canvas.height).toBe(true);
      renderIntoCanvas(canvas, items, 150, getColorFactory(), BG_COLOR);
      expect(canvas.height).toBe(items.length);
    });
    it('draws the map', function () {
      var totalValueWidth = 4000;
      var items = _range(MIN_TOTAL_HEIGHT * 10).map(function (i) {
        return {
          valueWidth: i,
          valueOffset: i,
          serviceName: "service-name-" + i
        };
      });
      var expectedColors = items.map(function (item, i) {
        return {
          input: item.serviceName,
          output: [i, i, i]
        };
      });
      var expectedDrawings = [getBgFillRect(items)].concat(items.map(function (item, i) {
        var valueWidth = item.valueWidth,
          valueOffset = item.valueOffset;
        var color = expectedColors[i].output;
        var fillStyle = "rgba(" + color.concat(ITEM_ALPHA).join() + ")";
        var height = MIN_ITEM_HEIGHT;
        var width = Math.max(MIN_ITEM_WIDTH, valueWidth / totalValueWidth * getCanvasWidth());
        var x = valueOffset / totalValueWidth * getCanvasWidth();
        var y = MAX_TOTAL_HEIGHT / items.length * i;
        return {
          fillStyle: fillStyle,
          height: height,
          width: width,
          x: x,
          y: y
        };
      }));
      var canvas = new Canvas();
      var getFillColor = getColorFactory();
      renderIntoCanvas(canvas, items, totalValueWidth, getFillColor, BG_COLOR);
      expect(getFillColor.inputOutput).toEqual(expectedColors);
      expect(canvas.getContext.mock.calls).toEqual([['2d', {
        alpha: false
      }]]);
      expect(canvas.contexts.length).toBe(1);
      expect(canvas.contexts[0].fillRectAccumulator).toEqual(expectedDrawings);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,