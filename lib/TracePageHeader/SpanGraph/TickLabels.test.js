import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { render, screen } from '@testing-library/react';
import React from 'react';
import TickLabels from './TickLabels';
import { jsx as _jsx } from "react/jsx-runtime";
describe('<TickLabels>', function () {
  var defaultProps = {
    numTicks: 4,
    duration: 5000
  };
  var ticks;
  beforeEach(function () {
    render( /*#__PURE__*/_jsx(TickLabels, _extends({}, defaultProps)));
    ticks = screen.getAllByTestId('tick');
  });
  it('renders the right number of ticks', function () {
    expect(ticks).toHaveLength(defaultProps.numTicks + 1);
  });
  it('places the first tick on the left', function () {
    var firstTick = ticks[0];
    expect(firstTick).toHaveStyle("left: 0%;");
  });
  it('places the last tick on the right', function () {
    var lastTick = ticks[ticks.length - 1];
    expect(lastTick).toHaveStyle("right: 0%;");
  });
  it('places middle ticks at proper intervals', function () {
    var positions = ['25%', '50%', '75%'];
    positions.forEach(function (pos, i) {
      var tick = ticks.at(i + 1);
      expect(tick).toHaveStyle("left: " + pos + ";");
    });
  });
  it('shows the correct value above each tick', function () {
    expect(screen.getByText('0Î¼s')).toBeTruthy();
    expect(screen.getByText('1.25ms')).toBeTruthy();
    expect(screen.getByText('2.5ms')).toBeTruthy();
    expect(screen.getByText('3.75ms')).toBeTruthy();
    expect(screen.getByText('5ms')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZW5kZXIiLCJzY3JlZW4iLCJSZWFjdCIsIlRpY2tMYWJlbHMiLCJqc3giLCJfanN4IiwiZGVzY3JpYmUiLCJkZWZhdWx0UHJvcHMiLCJudW1UaWNrcyIsImR1cmF0aW9uIiwidGlja3MiLCJiZWZvcmVFYWNoIiwiX2V4dGVuZHMiLCJnZXRBbGxCeVRlc3RJZCIsIml0IiwiZXhwZWN0IiwidG9IYXZlTGVuZ3RoIiwiZmlyc3RUaWNrIiwidG9IYXZlU3R5bGUiLCJsYXN0VGljayIsImxlbmd0aCIsInBvc2l0aW9ucyIsImZvckVhY2giLCJwb3MiLCJpIiwidGljayIsImF0IiwiZ2V0QnlUZXh0IiwidG9CZVRydXRoeSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9UcmFjZVBhZ2VIZWFkZXIvU3BhbkdyYXBoL1RpY2tMYWJlbHMudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IFRpY2tMYWJlbHMgZnJvbSAnLi9UaWNrTGFiZWxzJztcblxuZGVzY3JpYmUoJzxUaWNrTGFiZWxzPicsICgpID0+IHtcbiAgY29uc3QgZGVmYXVsdFByb3BzID0ge1xuICAgIG51bVRpY2tzOiA0LFxuICAgIGR1cmF0aW9uOiA1MDAwLFxuICB9O1xuXG4gIGxldCB0aWNrczogSFRNTEVsZW1lbnRbXTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICByZW5kZXIoPFRpY2tMYWJlbHMgey4uLmRlZmF1bHRQcm9wc30gLz4pO1xuICAgIHRpY2tzID0gc2NyZWVuLmdldEFsbEJ5VGVzdElkKCd0aWNrJyk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIHRoZSByaWdodCBudW1iZXIgb2YgdGlja3MnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHRpY2tzKS50b0hhdmVMZW5ndGgoZGVmYXVsdFByb3BzLm51bVRpY2tzICsgMSk7XG4gIH0pO1xuXG4gIGl0KCdwbGFjZXMgdGhlIGZpcnN0IHRpY2sgb24gdGhlIGxlZnQnLCAoKSA9PiB7XG4gICAgY29uc3QgZmlyc3RUaWNrID0gdGlja3NbMF07XG4gICAgZXhwZWN0KGZpcnN0VGljaykudG9IYXZlU3R5bGUoYGxlZnQ6IDAlO2ApO1xuICB9KTtcblxuICBpdCgncGxhY2VzIHRoZSBsYXN0IHRpY2sgb24gdGhlIHJpZ2h0JywgKCkgPT4ge1xuICAgIGNvbnN0IGxhc3RUaWNrID0gdGlja3NbdGlja3MubGVuZ3RoIC0gMV07XG4gICAgZXhwZWN0KGxhc3RUaWNrKS50b0hhdmVTdHlsZShgcmlnaHQ6IDAlO2ApO1xuICB9KTtcblxuICBpdCgncGxhY2VzIG1pZGRsZSB0aWNrcyBhdCBwcm9wZXIgaW50ZXJ2YWxzJywgKCkgPT4ge1xuICAgIGNvbnN0IHBvc2l0aW9ucyA9IFsnMjUlJywgJzUwJScsICc3NSUnXTtcbiAgICBwb3NpdGlvbnMuZm9yRWFjaCgocG9zLCBpKSA9PiB7XG4gICAgICBjb25zdCB0aWNrID0gdGlja3MuYXQoaSArIDEpO1xuICAgICAgZXhwZWN0KHRpY2spLnRvSGF2ZVN0eWxlKGBsZWZ0OiAke3Bvc307YCk7XG4gICAgfSk7XG4gIH0pO1xuICBpdCgnc2hvd3MgdGhlIGNvcnJlY3QgdmFsdWUgYWJvdmUgZWFjaCB0aWNrJywgKCkgPT4ge1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCcwzrxzJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnMS4yNW1zJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnMi41bXMnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCczLjc1bXMnKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCc1bXMnKSkudG9CZVRydXRoeSgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxNQUFNLEVBQUVDLE1BQU0sUUFBUSx3QkFBd0I7QUFDdkQsT0FBT0MsS0FBSyxNQUFNLE9BQU87QUFFekIsT0FBT0MsVUFBVSxNQUFNLGNBQWM7QUFBQyxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFFdENDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM3QixJQUFNQyxZQUFZLEdBQUc7SUFDbkJDLFFBQVEsRUFBRSxDQUFDO0lBQ1hDLFFBQVEsRUFBRTtFQUNaLENBQUM7RUFFRCxJQUFJQyxLQUFvQjtFQUV4QkMsVUFBVSxDQUFDLFlBQU07SUFDZlgsTUFBTSxlQUFDSyxJQUFBLENBQUNGLFVBQVUsRUFBQVMsUUFBQSxLQUFLTCxZQUFZLENBQUcsQ0FBQyxDQUFDO0lBQ3hDRyxLQUFLLEdBQUdULE1BQU0sQ0FBQ1ksY0FBYyxDQUFDLE1BQU0sQ0FBQztFQUN2QyxDQUFDLENBQUM7RUFFRkMsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLFlBQU07SUFDNUNDLE1BQU0sQ0FBQ0wsS0FBSyxDQUFDLENBQUNNLFlBQVksQ0FBQ1QsWUFBWSxDQUFDQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0VBQ3ZELENBQUMsQ0FBQztFQUVGTSxFQUFFLENBQUMsbUNBQW1DLEVBQUUsWUFBTTtJQUM1QyxJQUFNRyxTQUFTLEdBQUdQLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDMUJLLE1BQU0sQ0FBQ0UsU0FBUyxDQUFDLENBQUNDLFdBQVcsWUFBWSxDQUFDO0VBQzVDLENBQUMsQ0FBQztFQUVGSixFQUFFLENBQUMsbUNBQW1DLEVBQUUsWUFBTTtJQUM1QyxJQUFNSyxRQUFRLEdBQUdULEtBQUssQ0FBQ0EsS0FBSyxDQUFDVSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDTCxNQUFNLENBQUNJLFFBQVEsQ0FBQyxDQUFDRCxXQUFXLGFBQWEsQ0FBQztFQUM1QyxDQUFDLENBQUM7RUFFRkosRUFBRSxDQUFDLHlDQUF5QyxFQUFFLFlBQU07SUFDbEQsSUFBTU8sU0FBUyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7SUFDdkNBLFNBQVMsQ0FBQ0MsT0FBTyxDQUFDLFVBQUNDLEdBQUcsRUFBRUMsQ0FBQyxFQUFLO01BQzVCLElBQU1DLElBQUksR0FBR2YsS0FBSyxDQUFDZ0IsRUFBRSxDQUFDRixDQUFDLEdBQUcsQ0FBQyxDQUFDO01BQzVCVCxNQUFNLENBQUNVLElBQUksQ0FBQyxDQUFDUCxXQUFXLFlBQVVLLEdBQUcsTUFBRyxDQUFDO0lBQzNDLENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztFQUNGVCxFQUFFLENBQUMseUNBQXlDLEVBQUUsWUFBTTtJQUNsREMsTUFBTSxDQUFDZCxNQUFNLENBQUMwQixTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQ0MsVUFBVSxDQUFDLENBQUM7SUFDNUNiLE1BQU0sQ0FBQ2QsTUFBTSxDQUFDMEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUNDLFVBQVUsQ0FBQyxDQUFDO0lBQy9DYixNQUFNLENBQUNkLE1BQU0sQ0FBQzBCLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDQyxVQUFVLENBQUMsQ0FBQztJQUM5Q2IsTUFBTSxDQUFDZCxNQUFNLENBQUMwQixTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQ0MsVUFBVSxDQUFDLENBQUM7SUFDL0NiLE1BQU0sQ0FBQ2QsTUFBTSxDQUFDMEIsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUNDLFVBQVUsQ0FBQyxDQUFDO0VBQzlDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==