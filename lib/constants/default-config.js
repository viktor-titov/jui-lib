// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import deepFreeze from 'deep-freeze';
import { FALLBACK_DAG_MAX_NUM_SERVICES } from './index';
export default deepFreeze(Object.defineProperty({
  archiveEnabled: false,
  dependencies: {
    dagMaxNumServices: FALLBACK_DAG_MAX_NUM_SERVICES,
    menuEnabled: true
  },
  linkPatterns: [],
  menu: [{
    label: 'About Jaeger',
    items: [{
      label: 'GitHub',
      url: 'https://github.com/uber/jaeger'
    }, {
      label: 'Docs',
      url: 'http://jaeger.readthedocs.io/en/latest/'
    }, {
      label: 'Twitter',
      url: 'https://twitter.com/JaegerTracing'
    }, {
      label: 'Discussion Group',
      url: 'https://groups.google.com/forum/#!forum/jaeger-tracing'
    }, {
      label: 'Gitter.im',
      url: 'https://gitter.im/jaegertracing/Lobby'
    }, {
      label: 'Blog',
      url: 'https://medium.com/jaegertracing/'
    }]
  }],
  search: {
    maxLookback: {
      label: '2 Days',
      value: '2d'
    },
    maxLimit: 1500
  },
  tracking: {
    gaID: null,
    trackErrors: true
  }
},
// fields that should be individually merged vs wholesale replaced
'__mergeFields', {
  value: ['dependencies', 'search', 'tracking']
}));
export var deprecations = [{
  formerKey: 'dependenciesMenuEnabled',
  currentKey: 'dependencies.menuEnabled'
}, {
  formerKey: 'gaTrackingID',
  currentKey: 'tracking.gaID'
}];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWVwRnJlZXplIiwiRkFMTEJBQ0tfREFHX01BWF9OVU1fU0VSVklDRVMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImFyY2hpdmVFbmFibGVkIiwiZGVwZW5kZW5jaWVzIiwiZGFnTWF4TnVtU2VydmljZXMiLCJtZW51RW5hYmxlZCIsImxpbmtQYXR0ZXJucyIsIm1lbnUiLCJsYWJlbCIsIml0ZW1zIiwidXJsIiwic2VhcmNoIiwibWF4TG9va2JhY2siLCJ2YWx1ZSIsIm1heExpbWl0IiwidHJhY2tpbmciLCJnYUlEIiwidHJhY2tFcnJvcnMiLCJkZXByZWNhdGlvbnMiLCJmb3JtZXJLZXkiLCJjdXJyZW50S2V5Il0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnN0YW50cy9kZWZhdWx0LWNvbmZpZy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCBkZWVwRnJlZXplIGZyb20gJ2RlZXAtZnJlZXplJztcblxuaW1wb3J0IHsgRkFMTEJBQ0tfREFHX01BWF9OVU1fU0VSVklDRVMgfSBmcm9tICcuL2luZGV4JztcblxuZXhwb3J0IGRlZmF1bHQgZGVlcEZyZWV6ZShcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFxuICAgIHtcbiAgICAgIGFyY2hpdmVFbmFibGVkOiBmYWxzZSxcbiAgICAgIGRlcGVuZGVuY2llczoge1xuICAgICAgICBkYWdNYXhOdW1TZXJ2aWNlczogRkFMTEJBQ0tfREFHX01BWF9OVU1fU0VSVklDRVMsXG4gICAgICAgIG1lbnVFbmFibGVkOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIGxpbmtQYXR0ZXJuczogW10sXG4gICAgICBtZW51OiBbXG4gICAgICAgIHtcbiAgICAgICAgICBsYWJlbDogJ0Fib3V0IEphZWdlcicsXG4gICAgICAgICAgaXRlbXM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbGFiZWw6ICdHaXRIdWInLFxuICAgICAgICAgICAgICB1cmw6ICdodHRwczovL2dpdGh1Yi5jb20vdWJlci9qYWVnZXInLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbGFiZWw6ICdEb2NzJyxcbiAgICAgICAgICAgICAgdXJsOiAnaHR0cDovL2phZWdlci5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGxhYmVsOiAnVHdpdHRlcicsXG4gICAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vdHdpdHRlci5jb20vSmFlZ2VyVHJhY2luZycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBsYWJlbDogJ0Rpc2N1c3Npb24gR3JvdXAnLFxuICAgICAgICAgICAgICB1cmw6ICdodHRwczovL2dyb3Vwcy5nb29nbGUuY29tL2ZvcnVtLyMhZm9ydW0vamFlZ2VyLXRyYWNpbmcnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbGFiZWw6ICdHaXR0ZXIuaW0nLFxuICAgICAgICAgICAgICB1cmw6ICdodHRwczovL2dpdHRlci5pbS9qYWVnZXJ0cmFjaW5nL0xvYmJ5JyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGxhYmVsOiAnQmxvZycsXG4gICAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vbWVkaXVtLmNvbS9qYWVnZXJ0cmFjaW5nLycsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgc2VhcmNoOiB7XG4gICAgICAgIG1heExvb2tiYWNrOiB7XG4gICAgICAgICAgbGFiZWw6ICcyIERheXMnLFxuICAgICAgICAgIHZhbHVlOiAnMmQnLFxuICAgICAgICB9LFxuICAgICAgICBtYXhMaW1pdDogMTUwMCxcbiAgICAgIH0sXG4gICAgICB0cmFja2luZzoge1xuICAgICAgICBnYUlEOiBudWxsLFxuICAgICAgICB0cmFja0Vycm9yczogdHJ1ZSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICAvLyBmaWVsZHMgdGhhdCBzaG91bGQgYmUgaW5kaXZpZHVhbGx5IG1lcmdlZCB2cyB3aG9sZXNhbGUgcmVwbGFjZWRcbiAgICAnX19tZXJnZUZpZWxkcycsXG4gICAgeyB2YWx1ZTogWydkZXBlbmRlbmNpZXMnLCAnc2VhcmNoJywgJ3RyYWNraW5nJ10gfVxuICApXG4pO1xuXG5leHBvcnQgY29uc3QgZGVwcmVjYXRpb25zID0gW1xuICB7XG4gICAgZm9ybWVyS2V5OiAnZGVwZW5kZW5jaWVzTWVudUVuYWJsZWQnLFxuICAgIGN1cnJlbnRLZXk6ICdkZXBlbmRlbmNpZXMubWVudUVuYWJsZWQnLFxuICB9LFxuICB7XG4gICAgZm9ybWVyS2V5OiAnZ2FUcmFja2luZ0lEJyxcbiAgICBjdXJyZW50S2V5OiAndHJhY2tpbmcuZ2FJRCcsXG4gIH0sXG5dO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxVQUFVLE1BQU0sYUFBYTtBQUVwQyxTQUFTQyw2QkFBNkIsUUFBUSxTQUFTO0FBRXZELGVBQWVELFVBQVUsQ0FDdkJFLE1BQU0sQ0FBQ0MsY0FBYyxDQUNuQjtFQUNFQyxjQUFjLEVBQUUsS0FBSztFQUNyQkMsWUFBWSxFQUFFO0lBQ1pDLGlCQUFpQixFQUFFTCw2QkFBNkI7SUFDaERNLFdBQVcsRUFBRTtFQUNmLENBQUM7RUFDREMsWUFBWSxFQUFFLEVBQUU7RUFDaEJDLElBQUksRUFBRSxDQUNKO0lBQ0VDLEtBQUssRUFBRSxjQUFjO0lBQ3JCQyxLQUFLLEVBQUUsQ0FDTDtNQUNFRCxLQUFLLEVBQUUsUUFBUTtNQUNmRSxHQUFHLEVBQUU7SUFDUCxDQUFDLEVBQ0Q7TUFDRUYsS0FBSyxFQUFFLE1BQU07TUFDYkUsR0FBRyxFQUFFO0lBQ1AsQ0FBQyxFQUNEO01BQ0VGLEtBQUssRUFBRSxTQUFTO01BQ2hCRSxHQUFHLEVBQUU7SUFDUCxDQUFDLEVBQ0Q7TUFDRUYsS0FBSyxFQUFFLGtCQUFrQjtNQUN6QkUsR0FBRyxFQUFFO0lBQ1AsQ0FBQyxFQUNEO01BQ0VGLEtBQUssRUFBRSxXQUFXO01BQ2xCRSxHQUFHLEVBQUU7SUFDUCxDQUFDLEVBQ0Q7TUFDRUYsS0FBSyxFQUFFLE1BQU07TUFDYkUsR0FBRyxFQUFFO0lBQ1AsQ0FBQztFQUVMLENBQUMsQ0FDRjtFQUNEQyxNQUFNLEVBQUU7SUFDTkMsV0FBVyxFQUFFO01BQ1hKLEtBQUssRUFBRSxRQUFRO01BQ2ZLLEtBQUssRUFBRTtJQUNULENBQUM7SUFDREMsUUFBUSxFQUFFO0VBQ1osQ0FBQztFQUNEQyxRQUFRLEVBQUU7SUFDUkMsSUFBSSxFQUFFLElBQUk7SUFDVkMsV0FBVyxFQUFFO0VBQ2Y7QUFDRixDQUFDO0FBQ0Q7QUFDQSxlQUFlLEVBQ2Y7RUFBRUosS0FBSyxFQUFFLENBQUMsY0FBYyxFQUFFLFFBQVEsRUFBRSxVQUFVO0FBQUUsQ0FDbEQsQ0FDRixDQUFDO0FBRUQsT0FBTyxJQUFNSyxZQUFZLEdBQUcsQ0FDMUI7RUFDRUMsU0FBUyxFQUFFLHlCQUF5QjtFQUNwQ0MsVUFBVSxFQUFFO0FBQ2QsQ0FBQyxFQUNEO0VBQ0VELFNBQVMsRUFBRSxjQUFjO0VBQ3pCQyxVQUFVLEVBQUU7QUFDZCxDQUFDLENBQ0YiLCJpZ25vcmVMaXN0IjpbXX0=