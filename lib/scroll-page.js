// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Tween from './Tween';
var DURATION_MS = 350;
var lastTween;

// TODO(joe): this util can be modified a bit to be generalized (e.g. take in
// an element as a parameter and use scrollTop instead of window.scrollTo)

function _onTweenUpdate(_ref) {
  var done = _ref.done,
    value = _ref.value;
  window.scrollTo(window.scrollX, value);
  if (done) {
    lastTween = undefined;
  }
}
export function scrollBy(yDelta, appendToLast) {
  if (appendToLast === void 0) {
    appendToLast = false;
  }
  var _window = window,
    scrollY = _window.scrollY;
  var targetFrom = scrollY;
  if (appendToLast && lastTween) {
    var currentDirection = lastTween.to < scrollY ? 'up' : 'down';
    var nextDirection = yDelta < 0 ? 'up' : 'down';
    if (currentDirection === nextDirection) {
      targetFrom = lastTween.to;
    }
  }
  var to = targetFrom + yDelta;
  lastTween = new Tween({
    to: to,
    duration: DURATION_MS,
    from: scrollY,
    onUpdate: _onTweenUpdate
  });
}
export function scrollTo(y) {
  var _window2 = window,
    scrollY = _window2.scrollY;
  lastTween = new Tween({
    duration: DURATION_MS,
    from: scrollY,
    to: y,
    onUpdate: _onTweenUpdate
  });
}
export function cancel() {
  if (lastTween) {
    lastTween.cancel();
    lastTween = undefined;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUd2VlbiIsIkRVUkFUSU9OX01TIiwibGFzdFR3ZWVuIiwiX29uVHdlZW5VcGRhdGUiLCJfcmVmIiwiZG9uZSIsInZhbHVlIiwid2luZG93Iiwic2Nyb2xsVG8iLCJzY3JvbGxYIiwidW5kZWZpbmVkIiwic2Nyb2xsQnkiLCJ5RGVsdGEiLCJhcHBlbmRUb0xhc3QiLCJfd2luZG93Iiwic2Nyb2xsWSIsInRhcmdldEZyb20iLCJjdXJyZW50RGlyZWN0aW9uIiwidG8iLCJuZXh0RGlyZWN0aW9uIiwiZHVyYXRpb24iLCJmcm9tIiwib25VcGRhdGUiLCJ5IiwiX3dpbmRvdzIiLCJjYW5jZWwiXSwic291cmNlcyI6WyIuLi9zcmMvc2Nyb2xsLXBhZ2UudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgVHdlZW4gZnJvbSAnLi9Ud2Vlbic7XG5cbmNvbnN0IERVUkFUSU9OX01TID0gMzUwO1xuXG5sZXQgbGFzdFR3ZWVuOiBUd2VlbiB8IHZvaWQ7XG5cbi8vIFRPRE8oam9lKTogdGhpcyB1dGlsIGNhbiBiZSBtb2RpZmllZCBhIGJpdCB0byBiZSBnZW5lcmFsaXplZCAoZS5nLiB0YWtlIGluXG4vLyBhbiBlbGVtZW50IGFzIGEgcGFyYW1ldGVyIGFuZCB1c2Ugc2Nyb2xsVG9wIGluc3RlYWQgb2Ygd2luZG93LnNjcm9sbFRvKVxuXG5mdW5jdGlvbiBfb25Ud2VlblVwZGF0ZSh7IGRvbmUsIHZhbHVlIH06IHsgZG9uZTogYm9vbGVhbjsgdmFsdWU6IG51bWJlciB9KSB7XG4gIHdpbmRvdy5zY3JvbGxUbyh3aW5kb3cuc2Nyb2xsWCwgdmFsdWUpO1xuICBpZiAoZG9uZSkge1xuICAgIGxhc3RUd2VlbiA9IHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2Nyb2xsQnkoeURlbHRhOiBudW1iZXIsIGFwcGVuZFRvTGFzdCA9IGZhbHNlKSB7XG4gIGNvbnN0IHsgc2Nyb2xsWSB9ID0gd2luZG93O1xuICBsZXQgdGFyZ2V0RnJvbSA9IHNjcm9sbFk7XG4gIGlmIChhcHBlbmRUb0xhc3QgJiYgbGFzdFR3ZWVuKSB7XG4gICAgY29uc3QgY3VycmVudERpcmVjdGlvbiA9IGxhc3RUd2Vlbi50byA8IHNjcm9sbFkgPyAndXAnIDogJ2Rvd24nO1xuICAgIGNvbnN0IG5leHREaXJlY3Rpb24gPSB5RGVsdGEgPCAwID8gJ3VwJyA6ICdkb3duJztcbiAgICBpZiAoY3VycmVudERpcmVjdGlvbiA9PT0gbmV4dERpcmVjdGlvbikge1xuICAgICAgdGFyZ2V0RnJvbSA9IGxhc3RUd2Vlbi50bztcbiAgICB9XG4gIH1cbiAgY29uc3QgdG8gPSB0YXJnZXRGcm9tICsgeURlbHRhO1xuICBsYXN0VHdlZW4gPSBuZXcgVHdlZW4oeyB0bywgZHVyYXRpb246IERVUkFUSU9OX01TLCBmcm9tOiBzY3JvbGxZLCBvblVwZGF0ZTogX29uVHdlZW5VcGRhdGUgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY3JvbGxUbyh5OiBudW1iZXIpIHtcbiAgY29uc3QgeyBzY3JvbGxZIH0gPSB3aW5kb3c7XG4gIGxhc3RUd2VlbiA9IG5ldyBUd2Vlbih7IGR1cmF0aW9uOiBEVVJBVElPTl9NUywgZnJvbTogc2Nyb2xsWSwgdG86IHksIG9uVXBkYXRlOiBfb25Ud2VlblVwZGF0ZSB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgaWYgKGxhc3RUd2Vlbikge1xuICAgIGxhc3RUd2Vlbi5jYW5jZWwoKTtcbiAgICBsYXN0VHdlZW4gPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLFNBQVM7QUFFM0IsSUFBTUMsV0FBVyxHQUFHLEdBQUc7QUFFdkIsSUFBSUMsU0FBdUI7O0FBRTNCO0FBQ0E7O0FBRUEsU0FBU0MsY0FBY0EsQ0FBQUMsSUFBQSxFQUFvRDtFQUFBLElBQWpEQyxJQUFJLEdBQUFELElBQUEsQ0FBSkMsSUFBSTtJQUFFQyxLQUFLLEdBQUFGLElBQUEsQ0FBTEUsS0FBSztFQUNuQ0MsTUFBTSxDQUFDQyxRQUFRLENBQUNELE1BQU0sQ0FBQ0UsT0FBTyxFQUFFSCxLQUFLLENBQUM7RUFDdEMsSUFBSUQsSUFBSSxFQUFFO0lBQ1JILFNBQVMsR0FBR1EsU0FBUztFQUN2QjtBQUNGO0FBRUEsT0FBTyxTQUFTQyxRQUFRQSxDQUFDQyxNQUFjLEVBQUVDLFlBQVksRUFBVTtFQUFBLElBQXRCQSxZQUFZO0lBQVpBLFlBQVksR0FBRyxLQUFLO0VBQUE7RUFDM0QsSUFBQUMsT0FBQSxHQUFvQlAsTUFBTTtJQUFsQlEsT0FBTyxHQUFBRCxPQUFBLENBQVBDLE9BQU87RUFDZixJQUFJQyxVQUFVLEdBQUdELE9BQU87RUFDeEIsSUFBSUYsWUFBWSxJQUFJWCxTQUFTLEVBQUU7SUFDN0IsSUFBTWUsZ0JBQWdCLEdBQUdmLFNBQVMsQ0FBQ2dCLEVBQUUsR0FBR0gsT0FBTyxHQUFHLElBQUksR0FBRyxNQUFNO0lBQy9ELElBQU1JLGFBQWEsR0FBR1AsTUFBTSxHQUFHLENBQUMsR0FBRyxJQUFJLEdBQUcsTUFBTTtJQUNoRCxJQUFJSyxnQkFBZ0IsS0FBS0UsYUFBYSxFQUFFO01BQ3RDSCxVQUFVLEdBQUdkLFNBQVMsQ0FBQ2dCLEVBQUU7SUFDM0I7RUFDRjtFQUNBLElBQU1BLEVBQUUsR0FBR0YsVUFBVSxHQUFHSixNQUFNO0VBQzlCVixTQUFTLEdBQUcsSUFBSUYsS0FBSyxDQUFDO0lBQUVrQixFQUFFLEVBQUZBLEVBQUU7SUFBRUUsUUFBUSxFQUFFbkIsV0FBVztJQUFFb0IsSUFBSSxFQUFFTixPQUFPO0lBQUVPLFFBQVEsRUFBRW5CO0VBQWUsQ0FBQyxDQUFDO0FBQy9GO0FBRUEsT0FBTyxTQUFTSyxRQUFRQSxDQUFDZSxDQUFTLEVBQUU7RUFDbEMsSUFBQUMsUUFBQSxHQUFvQmpCLE1BQU07SUFBbEJRLE9BQU8sR0FBQVMsUUFBQSxDQUFQVCxPQUFPO0VBQ2ZiLFNBQVMsR0FBRyxJQUFJRixLQUFLLENBQUM7SUFBRW9CLFFBQVEsRUFBRW5CLFdBQVc7SUFBRW9CLElBQUksRUFBRU4sT0FBTztJQUFFRyxFQUFFLEVBQUVLLENBQUM7SUFBRUQsUUFBUSxFQUFFbkI7RUFBZSxDQUFDLENBQUM7QUFDbEc7QUFFQSxPQUFPLFNBQVNzQixNQUFNQSxDQUFBLEVBQUc7RUFDdkIsSUFBSXZCLFNBQVMsRUFBRTtJQUNiQSxTQUFTLENBQUN1QixNQUFNLENBQUMsQ0FBQztJQUNsQnZCLFNBQVMsR0FBR1EsU0FBUztFQUN2QjtBQUNGIiwiaWdub3JlTGlzdCI6W119