import _extends from "@babel/runtime/helpers/extends";
import React from "react";
import { UnthemedTraceTimelineViewer } from './TraceTimelineViewer';
import { createTheme } from '@grafana/data';
import traceGenerators from "./demo/trace-generators";
import transformTraceData from "./model/transform-trace-data";
import { jsx as _jsx } from "react/jsx-runtime";
console.log(traceGenerators.trace({}));
var trace = transformTraceData(traceGenerators.trace({}));
var props = {
  trace: trace,
  viewRange: {
    time: {
      current: [0, 1]
    }
  },
  traceTimeline: {
    shouldScrollToFirstUiFindMatch: true,
    traceID: '0000',
    childrenHiddenIDs: new Set(),
    hoverIndentGuideIds: new Set(),
    spanNameColumnWidth: 0.5,
    detailStates: new Map()
  },
  expandAll: function expandAll() {},
  collapseAll: function collapseAll() {},
  expandOne: function expandOne() {},
  registerAccessors: function registerAccessors() {},
  collapseOne: function collapseOne() {},
  setTrace: function setTrace() {},
  theme: createTheme(),
  history: {
    replace: function replace() {}
  },
  location: {
    search: null
  }
};
export default function App() {
  return /*#__PURE__*/_jsx(UnthemedTraceTimelineViewer, _extends({}, props));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIlVudGhlbWVkVHJhY2VUaW1lbGluZVZpZXdlciIsImNyZWF0ZVRoZW1lIiwidHJhY2VHZW5lcmF0b3JzIiwidHJhbnNmb3JtVHJhY2VEYXRhIiwianN4IiwiX2pzeCIsImNvbnNvbGUiLCJsb2ciLCJ0cmFjZSIsInByb3BzIiwidmlld1JhbmdlIiwidGltZSIsImN1cnJlbnQiLCJ0cmFjZVRpbWVsaW5lIiwic2hvdWxkU2Nyb2xsVG9GaXJzdFVpRmluZE1hdGNoIiwidHJhY2VJRCIsImNoaWxkcmVuSGlkZGVuSURzIiwiU2V0IiwiaG92ZXJJbmRlbnRHdWlkZUlkcyIsInNwYW5OYW1lQ29sdW1uV2lkdGgiLCJkZXRhaWxTdGF0ZXMiLCJNYXAiLCJleHBhbmRBbGwiLCJjb2xsYXBzZUFsbCIsImV4cGFuZE9uZSIsInJlZ2lzdGVyQWNjZXNzb3JzIiwiY29sbGFwc2VPbmUiLCJzZXRUcmFjZSIsInRoZW1lIiwiaGlzdG9yeSIsInJlcGxhY2UiLCJsb2NhdGlvbiIsInNlYXJjaCIsIkFwcCIsIl9leHRlbmRzIl0sInNvdXJjZXMiOlsiLi4vc3JjL0FwcC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBUUHJvcHMsIFVudGhlbWVkVHJhY2VUaW1lbGluZVZpZXdlciwgfSBmcm9tICcuL1RyYWNlVGltZWxpbmVWaWV3ZXInXG5pbXBvcnQgeyBjcmVhdGVUaGVtZSB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHRyYWNlR2VuZXJhdG9ycyBmcm9tIFwiLi9kZW1vL3RyYWNlLWdlbmVyYXRvcnNcIjtcbmltcG9ydCB0cmFuc2Zvcm1UcmFjZURhdGEgZnJvbSBcIi4vbW9kZWwvdHJhbnNmb3JtLXRyYWNlLWRhdGFcIjtcblxuY29uc29sZS5sb2codHJhY2VHZW5lcmF0b3JzLnRyYWNlKHt9KSlcblxuY29uc3QgdHJhY2UgPSB0cmFuc2Zvcm1UcmFjZURhdGEodHJhY2VHZW5lcmF0b3JzLnRyYWNlKHt9KSk7XG5cbmNvbnN0IHByb3BzID0ge1xuICAgIHRyYWNlLFxuICAgIHZpZXdSYW5nZToge1xuICAgICAgICB0aW1lOiB7XG4gICAgICAgICAgICBjdXJyZW50OiBbMCwgMV0sXG4gICAgICAgIH0sXG4gICAgfSxcbiAgICB0cmFjZVRpbWVsaW5lOiB7XG4gICAgICAgIHNob3VsZFNjcm9sbFRvRmlyc3RVaUZpbmRNYXRjaDogdHJ1ZSxcbiAgICAgICAgdHJhY2VJRDogJzAwMDAnLFxuICAgICAgICBjaGlsZHJlbkhpZGRlbklEczogbmV3IFNldCgpLFxuICAgICAgICBob3ZlckluZGVudEd1aWRlSWRzOiBuZXcgU2V0KCksXG4gICAgICAgIHNwYW5OYW1lQ29sdW1uV2lkdGg6IDAuNSxcbiAgICAgICAgZGV0YWlsU3RhdGVzOiBuZXcgTWFwKCksXG4gICAgfSxcbiAgICBleHBhbmRBbGw6ICgpID0+IHsgfSxcbiAgICBjb2xsYXBzZUFsbDogKCkgPT4geyB9LFxuICAgIGV4cGFuZE9uZTogKCkgPT4geyB9LFxuICAgIHJlZ2lzdGVyQWNjZXNzb3JzOiAoKSA9PiB7IH0sXG4gICAgY29sbGFwc2VPbmU6ICgpID0+IHsgfSxcbiAgICBzZXRUcmFjZTogKCkgPT4geyB9LFxuICAgIHRoZW1lOiBjcmVhdGVUaGVtZSgpLFxuICAgIGhpc3Rvcnk6IHtcbiAgICAgICAgcmVwbGFjZTogKCkgPT4geyB9LFxuICAgIH0sXG4gICAgbG9jYXRpb246IHtcbiAgICAgICAgc2VhcmNoOiBudWxsLFxuICAgIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBBcHAoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPFVudGhlbWVkVHJhY2VUaW1lbGluZVZpZXdlciB7Li4uKHByb3BzIGFzIHVua25vd24gYXMgVFByb3BzKX0+PC9VbnRoZW1lZFRyYWNlVGltZWxpbmVWaWV3ZXI+XG4gICAgKTtcbn0iXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPQSxLQUFLLE1BQU0sT0FBTztBQUV6QixTQUFpQkMsMkJBQTJCLFFBQVMsdUJBQXVCO0FBQzVFLFNBQVNDLFdBQVcsUUFBUSxlQUFlO0FBQzNDLE9BQU9DLGVBQWUsTUFBTSx5QkFBeUI7QUFDckQsT0FBT0Msa0JBQWtCLE1BQU0sOEJBQThCO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBRTlEQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0wsZUFBZSxDQUFDTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUV0QyxJQUFNQSxLQUFLLEdBQUdMLGtCQUFrQixDQUFDRCxlQUFlLENBQUNNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTNELElBQU1DLEtBQUssR0FBRztFQUNWRCxLQUFLLEVBQUxBLEtBQUs7RUFDTEUsU0FBUyxFQUFFO0lBQ1BDLElBQUksRUFBRTtNQUNGQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNsQjtFQUNKLENBQUM7RUFDREMsYUFBYSxFQUFFO0lBQ1hDLDhCQUE4QixFQUFFLElBQUk7SUFDcENDLE9BQU8sRUFBRSxNQUFNO0lBQ2ZDLGlCQUFpQixFQUFFLElBQUlDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCQyxtQkFBbUIsRUFBRSxJQUFJRCxHQUFHLENBQUMsQ0FBQztJQUM5QkUsbUJBQW1CLEVBQUUsR0FBRztJQUN4QkMsWUFBWSxFQUFFLElBQUlDLEdBQUcsQ0FBQztFQUMxQixDQUFDO0VBQ0RDLFNBQVMsRUFBRSxTQUFBQSxVQUFBLEVBQU0sQ0FBRSxDQUFDO0VBQ3BCQyxXQUFXLEVBQUUsU0FBQUEsWUFBQSxFQUFNLENBQUUsQ0FBQztFQUN0QkMsU0FBUyxFQUFFLFNBQUFBLFVBQUEsRUFBTSxDQUFFLENBQUM7RUFDcEJDLGlCQUFpQixFQUFFLFNBQUFBLGtCQUFBLEVBQU0sQ0FBRSxDQUFDO0VBQzVCQyxXQUFXLEVBQUUsU0FBQUEsWUFBQSxFQUFNLENBQUUsQ0FBQztFQUN0QkMsUUFBUSxFQUFFLFNBQUFBLFNBQUEsRUFBTSxDQUFFLENBQUM7RUFDbkJDLEtBQUssRUFBRTNCLFdBQVcsQ0FBQyxDQUFDO0VBQ3BCNEIsT0FBTyxFQUFFO0lBQ0xDLE9BQU8sRUFBRSxTQUFBQSxRQUFBLEVBQU0sQ0FBRTtFQUNyQixDQUFDO0VBQ0RDLFFBQVEsRUFBRTtJQUNOQyxNQUFNLEVBQUU7RUFDWjtBQUNKLENBQUM7QUFFRCxlQUFlLFNBQVNDLEdBQUdBLENBQUEsRUFBRztFQUMxQixvQkFDSTVCLElBQUEsQ0FBQ0wsMkJBQTJCLEVBQUFrQyxRQUFBLEtBQU16QixLQUFLLENBQXFELENBQUM7QUFFckciLCJpZ25vcmVMaXN0IjpbXX0=