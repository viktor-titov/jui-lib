import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _templateObject;
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { css } from '@emotion/css';
import * as React from 'react';
import { useStyles2 } from '@grafana/ui';
import { jsx as _jsx } from "react/jsx-runtime";
var getStyles = function getStyles() {
  return {
    BreakableText: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n      label: BreakableText;\n      display: inline-block;\n      white-space: pre;\n    "])))
  };
};
var WORD_RX = /\W*\w+\W*/g;
// TODO typescript doesn't understand text or null as react nodes
// https://github.com/Microsoft/TypeScript/issues/21699
export default function BreakableText(props) /* React.ReactNode /* React.ReactElement | React.ReactElement[] \*\/ */{
  var className = props.className,
    text = props.text,
    _props$wordRegexp = props.wordRegexp,
    wordRegexp = _props$wordRegexp === void 0 ? WORD_RX : _props$wordRegexp;
  var styles = useStyles2(getStyles);
  if (!text) {
    return typeof text === 'string' ? text : null;
  }
  var spans = [];
  wordRegexp.exec('');
  // if the given text has no words, set the first match to the entire text
  var match = wordRegexp.exec(text) || [text];
  while (match) {
    spans.push( /*#__PURE__*/_jsx("span", {
      className: className || styles.BreakableText,
      children: match[0]
    }, text + "-" + spans.length));
    match = wordRegexp.exec(text);
  }
  return spans;
}
BreakableText.defaultProps = {
  wordRegexp: WORD_RX
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjc3MiLCJSZWFjdCIsInVzZVN0eWxlczIiLCJqc3giLCJfanN4IiwiZ2V0U3R5bGVzIiwiQnJlYWthYmxlVGV4dCIsIl90ZW1wbGF0ZU9iamVjdCIsIl90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZSIsIldPUkRfUlgiLCJwcm9wcyIsImNsYXNzTmFtZSIsInRleHQiLCJfcHJvcHMkd29yZFJlZ2V4cCIsIndvcmRSZWdleHAiLCJzdHlsZXMiLCJzcGFucyIsImV4ZWMiLCJtYXRjaCIsInB1c2giLCJjaGlsZHJlbiIsImxlbmd0aCIsImRlZmF1bHRQcm9wcyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tb24vQnJlYWthYmxlVGV4dC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IHVzZVN0eWxlczIgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5cbmNvbnN0IGdldFN0eWxlcyA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBCcmVha2FibGVUZXh0OiBjc3NgXG4gICAgICBsYWJlbDogQnJlYWthYmxlVGV4dDtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIHdoaXRlLXNwYWNlOiBwcmU7XG4gICAgYCxcbiAgfTtcbn07XG5cbmNvbnN0IFdPUkRfUlggPSAvXFxXKlxcdytcXFcqL2c7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHRleHQ6IHN0cmluZztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICB3b3JkUmVnZXhwPzogUmVnRXhwO1xufTtcblxuLy8gVE9ETyB0eXBlc2NyaXB0IGRvZXNuJ3QgdW5kZXJzdGFuZCB0ZXh0IG9yIG51bGwgYXMgcmVhY3Qgbm9kZXNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMjE2OTlcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJyZWFrYWJsZVRleHQoXG4gIHByb3BzOiBQcm9wc1xuKTogYW55IC8qIFJlYWN0LlJlYWN0Tm9kZSAvKiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBSZWFjdC5SZWFjdEVsZW1lbnRbXSBcXCpcXC8gKi8ge1xuICBjb25zdCB7IGNsYXNzTmFtZSwgdGV4dCwgd29yZFJlZ2V4cCA9IFdPUkRfUlggfSA9IHByb3BzO1xuICBjb25zdCBzdHlsZXMgPSB1c2VTdHlsZXMyKGdldFN0eWxlcyk7XG4gIGlmICghdGV4dCkge1xuICAgIHJldHVybiB0eXBlb2YgdGV4dCA9PT0gJ3N0cmluZycgPyB0ZXh0IDogbnVsbDtcbiAgfVxuICBjb25zdCBzcGFucyA9IFtdO1xuICB3b3JkUmVnZXhwLmV4ZWMoJycpO1xuICAvLyBpZiB0aGUgZ2l2ZW4gdGV4dCBoYXMgbm8gd29yZHMsIHNldCB0aGUgZmlyc3QgbWF0Y2ggdG8gdGhlIGVudGlyZSB0ZXh0XG4gIGxldCBtYXRjaDogUmVnRXhwRXhlY0FycmF5IHwgc3RyaW5nW10gfCBudWxsID0gd29yZFJlZ2V4cC5leGVjKHRleHQpIHx8IFt0ZXh0XTtcbiAgd2hpbGUgKG1hdGNoKSB7XG4gICAgc3BhbnMucHVzaChcbiAgICAgIDxzcGFuIGtleT17YCR7dGV4dH0tJHtzcGFucy5sZW5ndGh9YH0gY2xhc3NOYW1lPXtjbGFzc05hbWUgfHwgc3R5bGVzLkJyZWFrYWJsZVRleHR9PlxuICAgICAgICB7bWF0Y2hbMF19XG4gICAgICA8L3NwYW4+XG4gICAgKTtcbiAgICBtYXRjaCA9IHdvcmRSZWdleHAuZXhlYyh0ZXh0KTtcbiAgfVxuICByZXR1cm4gc3BhbnM7XG59XG5cbkJyZWFrYWJsZVRleHQuZGVmYXVsdFByb3BzID0ge1xuICB3b3JkUmVnZXhwOiBXT1JEX1JYLFxufTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxHQUFHLFFBQVEsY0FBYztBQUNsQyxPQUFPLEtBQUtDLEtBQUssTUFBTSxPQUFPO0FBRTlCLFNBQVNDLFVBQVUsUUFBUSxhQUFhO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBRXpDLElBQU1DLFNBQVMsR0FBRyxTQUFaQSxTQUFTQSxDQUFBLEVBQVM7RUFDdEIsT0FBTztJQUNMQyxhQUFhLEVBQUVOLEdBQUcsQ0FBQU8sZUFBQSxLQUFBQSxlQUFBLEdBQUFDLDJCQUFBO0VBS3BCLENBQUM7QUFDSCxDQUFDO0FBRUQsSUFBTUMsT0FBTyxHQUFHLFlBQVk7QUFRNUI7QUFDQTtBQUNBLGVBQWUsU0FBU0gsYUFBYUEsQ0FDbkNJLEtBQVksRUFDUCx1RUFBd0U7RUFDN0UsSUFBUUMsU0FBUyxHQUFpQ0QsS0FBSyxDQUEvQ0MsU0FBUztJQUFFQyxJQUFJLEdBQTJCRixLQUFLLENBQXBDRSxJQUFJO0lBQUFDLGlCQUFBLEdBQTJCSCxLQUFLLENBQTlCSSxVQUFVO0lBQVZBLFVBQVUsR0FBQUQsaUJBQUEsY0FBR0osT0FBTyxHQUFBSSxpQkFBQTtFQUM3QyxJQUFNRSxNQUFNLEdBQUdiLFVBQVUsQ0FBQ0csU0FBUyxDQUFDO0VBQ3BDLElBQUksQ0FBQ08sSUFBSSxFQUFFO0lBQ1QsT0FBTyxPQUFPQSxJQUFJLEtBQUssUUFBUSxHQUFHQSxJQUFJLEdBQUcsSUFBSTtFQUMvQztFQUNBLElBQU1JLEtBQUssR0FBRyxFQUFFO0VBQ2hCRixVQUFVLENBQUNHLElBQUksQ0FBQyxFQUFFLENBQUM7RUFDbkI7RUFDQSxJQUFJQyxLQUF3QyxHQUFHSixVQUFVLENBQUNHLElBQUksQ0FBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQ0EsSUFBSSxDQUFDO0VBQzlFLE9BQU9NLEtBQUssRUFBRTtJQUNaRixLQUFLLENBQUNHLElBQUksZUFDUmYsSUFBQTtNQUFzQ08sU0FBUyxFQUFFQSxTQUFTLElBQUlJLE1BQU0sQ0FBQ1QsYUFBYztNQUFBYyxRQUFBLEVBQ2hGRixLQUFLLENBQUMsQ0FBQztJQUFDLEdBREdOLElBQUksU0FBSUksS0FBSyxDQUFDSyxNQUV0QixDQUNSLENBQUM7SUFDREgsS0FBSyxHQUFHSixVQUFVLENBQUNHLElBQUksQ0FBQ0wsSUFBSSxDQUFDO0VBQy9CO0VBQ0EsT0FBT0ksS0FBSztBQUNkO0FBRUFWLGFBQWEsQ0FBQ2dCLFlBQVksR0FBRztFQUMzQlIsVUFBVSxFQUFFTDtBQUNkLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=