import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _excluded = ["isLarge", "className"];
var _templateObject;
// Copyright (c) 2018 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { css } from '@emotion/css';
import cx from 'classnames';
import React from 'react';
import IoAndroidOpen from 'react-icons/lib/io/android-open';
import { useStyles2 } from '@grafana/ui';
import { jsx as _jsx } from "react/jsx-runtime";
export var getStyles = function getStyles() {
  return {
    NewWindowIconLarge: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n      label: NewWindowIconLarge;\n      font-size: 1.5em;\n    "])))
  };
};
export default function NewWindowIcon(props) {
  var _cx;
  var isLarge = props.isLarge,
    className = props.className,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var styles = useStyles2(getStyles);
  var cls = cx((_cx = {}, _cx[styles.NewWindowIconLarge] = isLarge, _cx), className);
  return /*#__PURE__*/_jsx(IoAndroidOpen, _extends({
    className: cls
  }, rest));
}
NewWindowIcon.defaultProps = {
  isLarge: false
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjc3MiLCJjeCIsIlJlYWN0IiwiSW9BbmRyb2lkT3BlbiIsInVzZVN0eWxlczIiLCJqc3giLCJfanN4IiwiZ2V0U3R5bGVzIiwiTmV3V2luZG93SWNvbkxhcmdlIiwiX3RlbXBsYXRlT2JqZWN0IiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlIiwiTmV3V2luZG93SWNvbiIsInByb3BzIiwiX2N4IiwiaXNMYXJnZSIsImNsYXNzTmFtZSIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsIl9leGNsdWRlZCIsInN0eWxlcyIsImNscyIsIl9leHRlbmRzIiwiZGVmYXVsdFByb3BzIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1vbi9OZXdXaW5kb3dJY29uLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTggVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY3NzJztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW9BbmRyb2lkT3BlbiBmcm9tICdyZWFjdC1pY29ucy9saWIvaW8vYW5kcm9pZC1vcGVuJztcblxuaW1wb3J0IHsgdXNlU3R5bGVzMiB9IGZyb20gJ0BncmFmYW5hL3VpJztcblxuZXhwb3J0IGNvbnN0IGdldFN0eWxlcyA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBOZXdXaW5kb3dJY29uTGFyZ2U6IGNzc2BcbiAgICAgIGxhYmVsOiBOZXdXaW5kb3dJY29uTGFyZ2U7XG4gICAgICBmb250LXNpemU6IDEuNWVtO1xuICAgIGAsXG4gIH07XG59O1xuXG50eXBlIFByb3BzID0ge1xuICBpc0xhcmdlPzogYm9vbGVhbjtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTmV3V2luZG93SWNvbihwcm9wczogUHJvcHMpIHtcbiAgY29uc3QgeyBpc0xhcmdlLCBjbGFzc05hbWUsIC4uLnJlc3QgfSA9IHByb3BzO1xuICBjb25zdCBzdHlsZXMgPSB1c2VTdHlsZXMyKGdldFN0eWxlcyk7XG4gIGNvbnN0IGNscyA9IGN4KHsgW3N0eWxlcy5OZXdXaW5kb3dJY29uTGFyZ2VdOiBpc0xhcmdlIH0sIGNsYXNzTmFtZSk7XG4gIHJldHVybiA8SW9BbmRyb2lkT3BlbiBjbGFzc05hbWU9e2Nsc30gey4uLnJlc3R9IC8+O1xufVxuXG5OZXdXaW5kb3dJY29uLmRlZmF1bHRQcm9wcyA9IHtcbiAgaXNMYXJnZTogZmFsc2UsXG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEdBQUcsUUFBUSxjQUFjO0FBQ2xDLE9BQU9DLEVBQUUsTUFBTSxZQUFZO0FBQzNCLE9BQU9DLEtBQUssTUFBTSxPQUFPO0FBQ3pCLE9BQU9DLGFBQWEsTUFBTSxpQ0FBaUM7QUFFM0QsU0FBU0MsVUFBVSxRQUFRLGFBQWE7QUFBQyxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFFekMsT0FBTyxJQUFNQyxTQUFTLEdBQUcsU0FBWkEsU0FBU0EsQ0FBQSxFQUFTO0VBQzdCLE9BQU87SUFDTEMsa0JBQWtCLEVBQUVSLEdBQUcsQ0FBQVMsZUFBQSxLQUFBQSxlQUFBLEdBQUFDLDJCQUFBO0VBSXpCLENBQUM7QUFDSCxDQUFDO0FBT0QsZUFBZSxTQUFTQyxhQUFhQSxDQUFDQyxLQUFZLEVBQUU7RUFBQSxJQUFBQyxHQUFBO0VBQ2xELElBQVFDLE9BQU8sR0FBeUJGLEtBQUssQ0FBckNFLE9BQU87SUFBRUMsU0FBUyxHQUFjSCxLQUFLLENBQTVCRyxTQUFTO0lBQUtDLElBQUksR0FBQUMsNkJBQUEsQ0FBS0wsS0FBSyxFQUFBTSxTQUFBO0VBQzdDLElBQU1DLE1BQU0sR0FBR2YsVUFBVSxDQUFDRyxTQUFTLENBQUM7RUFDcEMsSUFBTWEsR0FBRyxHQUFHbkIsRUFBRSxFQUFBWSxHQUFBLE9BQUFBLEdBQUEsQ0FBSU0sTUFBTSxDQUFDWCxrQkFBa0IsSUFBR00sT0FBTyxFQUFBRCxHQUFBLEdBQUlFLFNBQVMsQ0FBQztFQUNuRSxvQkFBT1QsSUFBQSxDQUFDSCxhQUFhLEVBQUFrQixRQUFBO0lBQUNOLFNBQVMsRUFBRUs7RUFBSSxHQUFLSixJQUFJLENBQUcsQ0FBQztBQUNwRDtBQUVBTCxhQUFhLENBQUNXLFlBQVksR0FBRztFQUMzQlIsT0FBTyxFQUFFO0FBQ1gsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==