import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _templateObject;
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { css } from '@emotion/css';
import cx from 'classnames';
import * as React from 'react';
import { useStyles2 } from '@grafana/ui';
import { FALLBACK_TRACE_NAME } from '../constants';
import BreakableText from './BreakableText';
import { jsx as _jsx } from "react/jsx-runtime";
var getStyles = function getStyles(theme) {
  return {
    TraceName: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n      label: TraceName;\n      font-size: ", ";\n    "])), theme.typography.size.lg)
  };
};
export default function TraceName(props) {
  var className = props.className,
    traceName = props.traceName;
  var styles = useStyles2(getStyles);
  var text = String(traceName || FALLBACK_TRACE_NAME);
  var title = /*#__PURE__*/_jsx(BreakableText, {
    text: text
  });
  return /*#__PURE__*/_jsx("span", {
    className: cx(styles.TraceName, className),
    children: title
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjc3MiLCJjeCIsIlJlYWN0IiwidXNlU3R5bGVzMiIsIkZBTExCQUNLX1RSQUNFX05BTUUiLCJCcmVha2FibGVUZXh0IiwianN4IiwiX2pzeCIsImdldFN0eWxlcyIsInRoZW1lIiwiVHJhY2VOYW1lIiwiX3RlbXBsYXRlT2JqZWN0IiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlIiwidHlwb2dyYXBoeSIsInNpemUiLCJsZyIsInByb3BzIiwiY2xhc3NOYW1lIiwidHJhY2VOYW1lIiwic3R5bGVzIiwidGV4dCIsIlN0cmluZyIsInRpdGxlIiwiY2hpbGRyZW4iXSwic291cmNlcyI6WyIuLi8uLi9zcmMvY29tbW9uL1RyYWNlTmFtZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEdyYWZhbmFUaGVtZTIgfSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcbmltcG9ydCB7IHVzZVN0eWxlczIgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5cbmltcG9ydCB7IEZBTExCQUNLX1RSQUNFX05BTUUgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgVE5pbCB9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IEJyZWFrYWJsZVRleHQgZnJvbSAnLi9CcmVha2FibGVUZXh0JztcblxuY29uc3QgZ2V0U3R5bGVzID0gKHRoZW1lOiBHcmFmYW5hVGhlbWUyKSA9PiB7XG4gIHJldHVybiB7XG4gICAgVHJhY2VOYW1lOiBjc3NgXG4gICAgICBsYWJlbDogVHJhY2VOYW1lO1xuICAgICAgZm9udC1zaXplOiAke3RoZW1lLnR5cG9ncmFwaHkuc2l6ZS5sZ307XG4gICAgYCxcbiAgfTtcbn07XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgdHJhY2VOYW1lPzogc3RyaW5nIHwgVE5pbDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRyYWNlTmFtZShwcm9wczogUHJvcHMpIHtcbiAgY29uc3QgeyBjbGFzc05hbWUsIHRyYWNlTmFtZSB9ID0gcHJvcHM7XG4gIGNvbnN0IHN0eWxlcyA9IHVzZVN0eWxlczIoZ2V0U3R5bGVzKTtcbiAgY29uc3QgdGV4dCA9IFN0cmluZyh0cmFjZU5hbWUgfHwgRkFMTEJBQ0tfVFJBQ0VfTkFNRSk7XG4gIGNvbnN0IHRpdGxlID0gPEJyZWFrYWJsZVRleHQgdGV4dD17dGV4dH0gLz47XG4gIHJldHVybiA8c3BhbiBjbGFzc05hbWU9e2N4KHN0eWxlcy5UcmFjZU5hbWUsIGNsYXNzTmFtZSl9Pnt0aXRsZX08L3NwYW4+O1xufVxuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEdBQUcsUUFBUSxjQUFjO0FBQ2xDLE9BQU9DLEVBQUUsTUFBTSxZQUFZO0FBQzNCLE9BQU8sS0FBS0MsS0FBSyxNQUFNLE9BQU87QUFHOUIsU0FBU0MsVUFBVSxRQUFRLGFBQWE7QUFFeEMsU0FBU0MsbUJBQW1CLFFBQVEsY0FBYztBQUdsRCxPQUFPQyxhQUFhLE1BQU0saUJBQWlCO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBRTVDLElBQU1DLFNBQVMsR0FBRyxTQUFaQSxTQUFTQSxDQUFJQyxLQUFvQixFQUFLO0VBQzFDLE9BQU87SUFDTEMsU0FBUyxFQUFFVixHQUFHLENBQUFXLGVBQUEsS0FBQUEsZUFBQSxHQUFBQywyQkFBQSxnRUFFQ0gsS0FBSyxDQUFDSSxVQUFVLENBQUNDLElBQUksQ0FBQ0MsRUFBRTtFQUV6QyxDQUFDO0FBQ0gsQ0FBQztBQU9ELGVBQWUsU0FBU0wsU0FBU0EsQ0FBQ00sS0FBWSxFQUFFO0VBQzlDLElBQVFDLFNBQVMsR0FBZ0JELEtBQUssQ0FBOUJDLFNBQVM7SUFBRUMsU0FBUyxHQUFLRixLQUFLLENBQW5CRSxTQUFTO0VBQzVCLElBQU1DLE1BQU0sR0FBR2hCLFVBQVUsQ0FBQ0ssU0FBUyxDQUFDO0VBQ3BDLElBQU1ZLElBQUksR0FBR0MsTUFBTSxDQUFDSCxTQUFTLElBQUlkLG1CQUFtQixDQUFDO0VBQ3JELElBQU1rQixLQUFLLGdCQUFHZixJQUFBLENBQUNGLGFBQWE7SUFBQ2UsSUFBSSxFQUFFQTtFQUFLLENBQUUsQ0FBQztFQUMzQyxvQkFBT2IsSUFBQTtJQUFNVSxTQUFTLEVBQUVoQixFQUFFLENBQUNrQixNQUFNLENBQUNULFNBQVMsRUFBRU8sU0FBUyxDQUFFO0lBQUFNLFFBQUEsRUFBRUQ7RUFBSyxDQUFPLENBQUM7QUFDekUiLCJpZ25vcmVMaXN0IjpbXX0=