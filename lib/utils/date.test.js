// Copyright (c) 2020 The Jaeger Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { formatDuration, ONE_MILLISECOND, ONE_SECOND, ONE_MINUTE, ONE_HOUR, ONE_DAY } from './date';
describe('formatDuration', function () {
  it('keeps microseconds the same', function () {
    expect(formatDuration(1)).toBe('1μs');
  });
  it('displays a maximum of 2 units and rounds the last one', function () {
    var input = 10 * ONE_DAY + 13 * ONE_HOUR + 30 * ONE_MINUTE;
    expect(formatDuration(input)).toBe('10d 14h');
  });
  it('skips units that are empty', function () {
    var input = 2 * ONE_DAY + 5 * ONE_MINUTE;
    expect(formatDuration(input)).toBe('2d');
  });
  it('displays milliseconds in decimals', function () {
    var input = 2 * ONE_MILLISECOND + 357;
    expect(formatDuration(input)).toBe('2.36ms');
  });
  it('displays seconds in decimals', function () {
    var input = 2 * ONE_SECOND + 357 * ONE_MILLISECOND;
    expect(formatDuration(input)).toBe('2.36s');
  });
  it('displays minutes in split units', function () {
    var input = 2 * ONE_MINUTE + 30 * ONE_SECOND + 555 * ONE_MILLISECOND;
    expect(formatDuration(input)).toBe('2m 31s');
  });
  it('displays hours in split units', function () {
    var input = 2 * ONE_HOUR + 30 * ONE_MINUTE + 30 * ONE_SECOND;
    expect(formatDuration(input)).toBe('2h 31m');
  });
  it('displays times less than a μs', function () {
    var input = 0.1;
    expect(formatDuration(input)).toBe('0.1μs');
  });
  it('displays times of 0', function () {
    var input = 0;
    expect(formatDuration(input)).toBe('0μs');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmb3JtYXREdXJhdGlvbiIsIk9ORV9NSUxMSVNFQ09ORCIsIk9ORV9TRUNPTkQiLCJPTkVfTUlOVVRFIiwiT05FX0hPVVIiLCJPTkVfREFZIiwiZGVzY3JpYmUiLCJpdCIsImV4cGVjdCIsInRvQmUiLCJpbnB1dCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9kYXRlLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIwIFRoZSBKYWVnZXIgQXV0aG9yc1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBmb3JtYXREdXJhdGlvbiwgT05FX01JTExJU0VDT05ELCBPTkVfU0VDT05ELCBPTkVfTUlOVVRFLCBPTkVfSE9VUiwgT05FX0RBWSB9IGZyb20gJy4vZGF0ZSc7XG5cbmRlc2NyaWJlKCdmb3JtYXREdXJhdGlvbicsICgpID0+IHtcbiAgaXQoJ2tlZXBzIG1pY3Jvc2Vjb25kcyB0aGUgc2FtZScsICgpID0+IHtcbiAgICBleHBlY3QoZm9ybWF0RHVyYXRpb24oMSkpLnRvQmUoJzHOvHMnKTtcbiAgfSk7XG5cbiAgaXQoJ2Rpc3BsYXlzIGEgbWF4aW11bSBvZiAyIHVuaXRzIGFuZCByb3VuZHMgdGhlIGxhc3Qgb25lJywgKCkgPT4ge1xuICAgIGNvbnN0IGlucHV0ID0gMTAgKiBPTkVfREFZICsgMTMgKiBPTkVfSE9VUiArIDMwICogT05FX01JTlVURTtcbiAgICBleHBlY3QoZm9ybWF0RHVyYXRpb24oaW5wdXQpKS50b0JlKCcxMGQgMTRoJyk7XG4gIH0pO1xuXG4gIGl0KCdza2lwcyB1bml0cyB0aGF0IGFyZSBlbXB0eScsICgpID0+IHtcbiAgICBjb25zdCBpbnB1dCA9IDIgKiBPTkVfREFZICsgNSAqIE9ORV9NSU5VVEU7XG4gICAgZXhwZWN0KGZvcm1hdER1cmF0aW9uKGlucHV0KSkudG9CZSgnMmQnKTtcbiAgfSk7XG5cbiAgaXQoJ2Rpc3BsYXlzIG1pbGxpc2Vjb25kcyBpbiBkZWNpbWFscycsICgpID0+IHtcbiAgICBjb25zdCBpbnB1dCA9IDIgKiBPTkVfTUlMTElTRUNPTkQgKyAzNTc7XG4gICAgZXhwZWN0KGZvcm1hdER1cmF0aW9uKGlucHV0KSkudG9CZSgnMi4zNm1zJyk7XG4gIH0pO1xuXG4gIGl0KCdkaXNwbGF5cyBzZWNvbmRzIGluIGRlY2ltYWxzJywgKCkgPT4ge1xuICAgIGNvbnN0IGlucHV0ID0gMiAqIE9ORV9TRUNPTkQgKyAzNTcgKiBPTkVfTUlMTElTRUNPTkQ7XG4gICAgZXhwZWN0KGZvcm1hdER1cmF0aW9uKGlucHV0KSkudG9CZSgnMi4zNnMnKTtcbiAgfSk7XG5cbiAgaXQoJ2Rpc3BsYXlzIG1pbnV0ZXMgaW4gc3BsaXQgdW5pdHMnLCAoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSAyICogT05FX01JTlVURSArIDMwICogT05FX1NFQ09ORCArIDU1NSAqIE9ORV9NSUxMSVNFQ09ORDtcbiAgICBleHBlY3QoZm9ybWF0RHVyYXRpb24oaW5wdXQpKS50b0JlKCcybSAzMXMnKTtcbiAgfSk7XG5cbiAgaXQoJ2Rpc3BsYXlzIGhvdXJzIGluIHNwbGl0IHVuaXRzJywgKCkgPT4ge1xuICAgIGNvbnN0IGlucHV0ID0gMiAqIE9ORV9IT1VSICsgMzAgKiBPTkVfTUlOVVRFICsgMzAgKiBPTkVfU0VDT05EO1xuICAgIGV4cGVjdChmb3JtYXREdXJhdGlvbihpbnB1dCkpLnRvQmUoJzJoIDMxbScpO1xuICB9KTtcblxuICBpdCgnZGlzcGxheXMgdGltZXMgbGVzcyB0aGFuIGEgzrxzJywgKCkgPT4ge1xuICAgIGNvbnN0IGlucHV0ID0gMC4xO1xuICAgIGV4cGVjdChmb3JtYXREdXJhdGlvbihpbnB1dCkpLnRvQmUoJzAuMc68cycpO1xuICB9KTtcblxuICBpdCgnZGlzcGxheXMgdGltZXMgb2YgMCcsICgpID0+IHtcbiAgICBjb25zdCBpbnB1dCA9IDA7XG4gICAgZXhwZWN0KGZvcm1hdER1cmF0aW9uKGlucHV0KSkudG9CZSgnMM68cycpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxjQUFjLEVBQUVDLGVBQWUsRUFBRUMsVUFBVSxFQUFFQyxVQUFVLEVBQUVDLFFBQVEsRUFBRUMsT0FBTyxRQUFRLFFBQVE7QUFFbkdDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFNO0VBQy9CQyxFQUFFLENBQUMsNkJBQTZCLEVBQUUsWUFBTTtJQUN0Q0MsTUFBTSxDQUFDUixjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQ1MsSUFBSSxDQUFDLEtBQUssQ0FBQztFQUN2QyxDQUFDLENBQUM7RUFFRkYsRUFBRSxDQUFDLHVEQUF1RCxFQUFFLFlBQU07SUFDaEUsSUFBTUcsS0FBSyxHQUFHLEVBQUUsR0FBR0wsT0FBTyxHQUFHLEVBQUUsR0FBR0QsUUFBUSxHQUFHLEVBQUUsR0FBR0QsVUFBVTtJQUM1REssTUFBTSxDQUFDUixjQUFjLENBQUNVLEtBQUssQ0FBQyxDQUFDLENBQUNELElBQUksQ0FBQyxTQUFTLENBQUM7RUFDL0MsQ0FBQyxDQUFDO0VBRUZGLEVBQUUsQ0FBQyw0QkFBNEIsRUFBRSxZQUFNO0lBQ3JDLElBQU1HLEtBQUssR0FBRyxDQUFDLEdBQUdMLE9BQU8sR0FBRyxDQUFDLEdBQUdGLFVBQVU7SUFDMUNLLE1BQU0sQ0FBQ1IsY0FBYyxDQUFDVSxLQUFLLENBQUMsQ0FBQyxDQUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDO0VBQzFDLENBQUMsQ0FBQztFQUVGRixFQUFFLENBQUMsbUNBQW1DLEVBQUUsWUFBTTtJQUM1QyxJQUFNRyxLQUFLLEdBQUcsQ0FBQyxHQUFHVCxlQUFlLEdBQUcsR0FBRztJQUN2Q08sTUFBTSxDQUFDUixjQUFjLENBQUNVLEtBQUssQ0FBQyxDQUFDLENBQUNELElBQUksQ0FBQyxRQUFRLENBQUM7RUFDOUMsQ0FBQyxDQUFDO0VBRUZGLEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxZQUFNO0lBQ3ZDLElBQU1HLEtBQUssR0FBRyxDQUFDLEdBQUdSLFVBQVUsR0FBRyxHQUFHLEdBQUdELGVBQWU7SUFDcERPLE1BQU0sQ0FBQ1IsY0FBYyxDQUFDVSxLQUFLLENBQUMsQ0FBQyxDQUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDO0VBQzdDLENBQUMsQ0FBQztFQUVGRixFQUFFLENBQUMsaUNBQWlDLEVBQUUsWUFBTTtJQUMxQyxJQUFNRyxLQUFLLEdBQUcsQ0FBQyxHQUFHUCxVQUFVLEdBQUcsRUFBRSxHQUFHRCxVQUFVLEdBQUcsR0FBRyxHQUFHRCxlQUFlO0lBQ3RFTyxNQUFNLENBQUNSLGNBQWMsQ0FBQ1UsS0FBSyxDQUFDLENBQUMsQ0FBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQztFQUM5QyxDQUFDLENBQUM7RUFFRkYsRUFBRSxDQUFDLCtCQUErQixFQUFFLFlBQU07SUFDeEMsSUFBTUcsS0FBSyxHQUFHLENBQUMsR0FBR04sUUFBUSxHQUFHLEVBQUUsR0FBR0QsVUFBVSxHQUFHLEVBQUUsR0FBR0QsVUFBVTtJQUM5RE0sTUFBTSxDQUFDUixjQUFjLENBQUNVLEtBQUssQ0FBQyxDQUFDLENBQUNELElBQUksQ0FBQyxRQUFRLENBQUM7RUFDOUMsQ0FBQyxDQUFDO0VBRUZGLEVBQUUsQ0FBQywrQkFBK0IsRUFBRSxZQUFNO0lBQ3hDLElBQU1HLEtBQUssR0FBRyxHQUFHO0lBQ2pCRixNQUFNLENBQUNSLGNBQWMsQ0FBQ1UsS0FBSyxDQUFDLENBQUMsQ0FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQztFQUM3QyxDQUFDLENBQUM7RUFFRkYsRUFBRSxDQUFDLHFCQUFxQixFQUFFLFlBQU07SUFDOUIsSUFBTUcsS0FBSyxHQUFHLENBQUM7SUFDZkYsTUFBTSxDQUFDUixjQUFjLENBQUNVLEtBQUssQ0FBQyxDQUFDLENBQUNELElBQUksQ0FBQyxLQUFLLENBQUM7RUFDM0MsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119