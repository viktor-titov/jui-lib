import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["getBounds", "tag", "resetBoundsOnResize"];
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { get as _get } from 'lodash';
import EUpdateTypes from './EUpdateTypes';
var LEFT_MOUSE_BUTTON = 0;
var DraggableManager = /*#__PURE__*/function () {
  // cache the last known DraggableBounds (invalidate via `#resetBounds())

  // optional callbacks for various dragging events

  // whether to reset the bounds on window resize

  /**
   * Get the `DraggableBounds` for the current drag. The returned value is
   * cached until either `#resetBounds()` is called or the window is resized
   * (assuming `_resetBoundsOnResize` is `true`). The `DraggableBounds` defines
   * the range the current drag can span to. It also establishes the left offset
   * to adjust `clientX` by (from the `MouseEvent`s).
   */

  // convenience data

  // handlers for integration with DOM elements

  function DraggableManager(_ref) {
    var _this = this;
    var getBounds = _ref.getBounds,
      tag = _ref.tag,
      _ref$resetBoundsOnRes = _ref.resetBoundsOnResize,
      resetBoundsOnResize = _ref$resetBoundsOnRes === void 0 ? true : _ref$resetBoundsOnRes,
      rest = _objectWithoutPropertiesLoose(_ref, _excluded);
    this.resetBounds = function () {
      _this._bounds = undefined;
    };
    this._handleMinorMouseEvent = function (event) {
      var button = event.button,
        clientX = event.clientX,
        eventType = event.type;
      if (_this._isDragging || button !== LEFT_MOUSE_BUTTON) {
        return;
      }
      var type = null;
      var handler;
      if (eventType === 'mouseenter') {
        type = EUpdateTypes.MouseEnter;
        handler = _this._onMouseEnter;
      } else if (eventType === 'mouseleave') {
        type = EUpdateTypes.MouseLeave;
        handler = _this._onMouseLeave;
      } else if (eventType === 'mousemove') {
        type = EUpdateTypes.MouseMove;
        handler = _this._onMouseMove;
      } else {
        throw new Error("invalid event type: " + eventType);
      }
      if (!handler) {
        return;
      }
      var _this$_getPosition = _this._getPosition(clientX),
        value = _this$_getPosition.value,
        x = _this$_getPosition.x;
      handler({
        event: event,
        type: type,
        value: value,
        x: x,
        manager: _this,
        tag: _this.tag
      });
    };
    this._handleDragEvent = function (event) {
      var button = event.button,
        clientX = event.clientX,
        eventType = event.type;
      var type = null;
      var handler;
      if (eventType === 'mousedown') {
        if (_this._isDragging || button !== LEFT_MOUSE_BUTTON) {
          return;
        }
        window.addEventListener('mousemove', _this._handleDragEvent);
        window.addEventListener('mouseup', _this._handleDragEvent);
        var style = _get(document, 'body.style');
        if (style) {
          style.userSelect = 'none';
        }
        _this._isDragging = true;
        type = EUpdateTypes.DragStart;
        handler = _this._onDragStart;
      } else if (eventType === 'mousemove') {
        if (!_this._isDragging) {
          return;
        }
        type = EUpdateTypes.DragMove;
        handler = _this._onDragMove;
      } else if (eventType === 'mouseup') {
        if (!_this._isDragging) {
          return;
        }
        _this._stopDragging();
        type = EUpdateTypes.DragEnd;
        handler = _this._onDragEnd;
      } else {
        throw new Error("invalid event type: " + eventType);
      }
      if (!handler) {
        return;
      }
      var _this$_getPosition2 = _this._getPosition(clientX),
        value = _this$_getPosition2.value,
        x = _this$_getPosition2.x;
      handler({
        event: event,
        type: type,
        value: value,
        x: x,
        manager: _this,
        tag: _this.tag
      });
    };
    this.handleMouseDown = this._handleDragEvent;
    this.handleMouseEnter = this._handleMinorMouseEvent;
    this.handleMouseMove = this._handleMinorMouseEvent;
    this.handleMouseLeave = this._handleMinorMouseEvent;
    this.getBounds = getBounds;
    this.tag = tag;
    this._isDragging = false;
    this._bounds = undefined;
    this._resetBoundsOnResize = Boolean(resetBoundsOnResize);
    if (this._resetBoundsOnResize) {
      window.addEventListener('resize', this.resetBounds);
    }
    this._onMouseEnter = rest.onMouseEnter;
    this._onMouseLeave = rest.onMouseLeave;
    this._onMouseMove = rest.onMouseMove;
    this._onDragStart = rest.onDragStart;
    this._onDragMove = rest.onDragMove;
    this._onDragEnd = rest.onDragEnd;
  }
  var _proto = DraggableManager.prototype;
  _proto._getBounds = function _getBounds() {
    if (!this._bounds) {
      this._bounds = this.getBounds(this.tag);
    }
    return this._bounds;
  };
  _proto._getPosition = function _getPosition(clientX) {
    var _this$_getBounds = this._getBounds(),
      clientXLeft = _this$_getBounds.clientXLeft,
      maxValue = _this$_getBounds.maxValue,
      minValue = _this$_getBounds.minValue,
      width = _this$_getBounds.width;
    var x = clientX - clientXLeft;
    var value = x / width;
    if (minValue != null && value < minValue) {
      value = minValue;
      x = minValue * width;
    } else if (maxValue != null && value > maxValue) {
      value = maxValue;
      x = maxValue * width;
    }
    return {
      value: value,
      x: x
    };
  };
  _proto._stopDragging = function _stopDragging() {
    window.removeEventListener('mousemove', this._handleDragEvent);
    window.removeEventListener('mouseup', this._handleDragEvent);
    var style = _get(document, 'body.style');
    if (style) {
      style.userSelect = 'auto';
    }
    this._isDragging = false;
  };
  _proto.isDragging = function isDragging() {
    return this._isDragging;
  };
  _proto.dispose = function dispose() {
    if (this._isDragging) {
      this._stopDragging();
    }
    if (this._resetBoundsOnResize) {
      window.removeEventListener('resize', this.resetBounds);
    }
    this._bounds = undefined;
    this._onMouseEnter = undefined;
    this._onMouseLeave = undefined;
    this._onMouseMove = undefined;
    this._onDragStart = undefined;
    this._onDragMove = undefined;
    this._onDragEnd = undefined;
  };
  return DraggableManager;
}();
export { DraggableManager as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,