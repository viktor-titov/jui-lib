import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import React from 'react';
import DraggableManager from '..';
import './RegionDemo.css';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
var RegionDemo = /*#__PURE__*/function (_React$PureComponent) {
  function RegionDemo(props) {
    var _this;
    _this = _React$PureComponent.call(this, props) || this;
    _this._setRealm = function (elm) {
      _this._realmElm = elm;
    };
    _this._getDraggingBounds = function () {
      if (!_this._realmElm) {
        throw new Error('invalid state');
      }
      var _this$_realmElm$getBo = _this._realmElm.getBoundingClientRect(),
        clientXLeft = _this$_realmElm$getBo.left,
        width = _this$_realmElm$getBo.width;
      return {
        clientXLeft: clientXLeft,
        width: width,
        maxValue: 1,
        minValue: 0
      };
    };
    _this._handleMouseMove = function (_ref) {
      var value = _ref.value;
      _this.props.updateState({
        regionCursor: value
      });
    };
    _this._handleMouseLeave = function () {
      _this.props.updateState({
        regionCursor: null
      });
    };
    _this._handleDragUpdate = function (_ref2) {
      var value = _ref2.value;
      var prevRegionDragging = _this.props.regionDragging;
      var regionDragging;
      if (prevRegionDragging) {
        regionDragging = [prevRegionDragging[0], value];
      } else {
        regionDragging = [value, value];
      }
      _this.props.updateState({
        regionDragging: regionDragging
      });
    };
    _this._handleDragEnd = function (_ref3) {
      var value = _ref3.value;
      _this.props.updateState({
        regionDragging: null,
        regionCursor: value
      });
    };
    _this._realmElm = null;
    _this._dragManager = new DraggableManager({
      getBounds: _this._getDraggingBounds,
      onDragEnd: _this._handleDragEnd,
      onDragMove: _this._handleDragUpdate,
      onDragStart: _this._handleDragUpdate,
      onMouseMove: _this._handleMouseMove,
      onMouseLeave: _this._handleMouseLeave
    });
    return _this;
  }
  _inheritsLoose(RegionDemo, _React$PureComponent);
  var _proto = RegionDemo.prototype;
  _proto.render = function render() {
    var _this$props = this.props,
      regionCursor = _this$props.regionCursor,
      regionDragging = _this$props.regionDragging;
    var cursorElm;
    var regionElm;
    if (regionDragging) {
      var a = regionDragging[0],
        b = regionDragging[1];
      var _ref4 = a < b ? [a, 1 - b] : [b, 1 - a],
        left = _ref4[0],
        right = _ref4[1];
      var regionStyle = {
        left: left * 100 + "%",
        right: right * 100 + "%"
      };
      regionElm = /*#__PURE__*/_jsx("div", {
        className: "RegionDemo--region",
        style: regionStyle
      });
    } else if (regionCursor) {
      var cursorStyle = {
        left: regionCursor * 100 + "%"
      };
      cursorElm = /*#__PURE__*/_jsx("div", {
        className: "RegionDemo--regionCursor",
        style: cursorStyle
      });
    }
    return /*#__PURE__*/_jsxs("div", {
      "aria-hidden": true,
      className: "RegionDemo--realm",
      onMouseDown: this._dragManager.handleMouseDown,
      onMouseMove: this._dragManager.handleMouseMove,
      onMouseLeave: this._dragManager.handleMouseMove,
      ref: this._setRealm,
      children: [regionElm, cursorElm]
    });
  };
  return RegionDemo;
}(React.PureComponent);
export { RegionDemo as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,