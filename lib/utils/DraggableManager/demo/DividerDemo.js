import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import React from 'react';
import DraggableManager from '../DraggableManager';
import './DividerDemo.css';
import { jsx as _jsx } from "react/jsx-runtime";
var DividerDemo = /*#__PURE__*/function (_React$PureComponent) {
  function DividerDemo(props) {
    var _this;
    _this = _React$PureComponent.call(this, props) || this;
    _this._setRealm = function (elm) {
      _this._realmElm = elm;
    };
    _this._getDraggingBounds = function () {
      if (!_this._realmElm) {
        throw new Error('invalid state');
      }
      var _this$_realmElm$getBo = _this._realmElm.getBoundingClientRect(),
        clientXLeft = _this$_realmElm$getBo.left,
        width = _this$_realmElm$getBo.width;
      return {
        clientXLeft: clientXLeft,
        width: width,
        maxValue: 0.98,
        minValue: 0.02
      };
    };
    _this._handleDragEvent = function (_ref) {
      var value = _ref.value;
      _this.props.updateState({
        dividerPosition: value
      });
    };
    _this._realmElm = null;
    _this._dragManager = new DraggableManager({
      getBounds: _this._getDraggingBounds,
      onDragEnd: _this._handleDragEvent,
      onDragMove: _this._handleDragEvent,
      onDragStart: _this._handleDragEvent
    });
    return _this;
  }
  _inheritsLoose(DividerDemo, _React$PureComponent);
  var _proto = DividerDemo.prototype;
  _proto.render = function render() {
    var position = this.props.position;
    var style = {
      left: position * 100 + "%"
    };
    return /*#__PURE__*/_jsx("div", {
      className: "DividerDemo--realm",
      ref: this._setRealm,
      children: /*#__PURE__*/_jsx("div", {
        "aria-hidden": true,
        className: "DividerDemo--divider",
        onMouseDown: this._dragManager.handleMouseDown,
        style: style
      })
    });
  };
  return DividerDemo;
}(React.PureComponent);
export { DividerDemo as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsIkRyYWdnYWJsZU1hbmFnZXIiLCJqc3giLCJfanN4IiwiRGl2aWRlckRlbW8iLCJfUmVhY3QkUHVyZUNvbXBvbmVudCIsInByb3BzIiwiX3RoaXMiLCJjYWxsIiwiX3NldFJlYWxtIiwiZWxtIiwiX3JlYWxtRWxtIiwiX2dldERyYWdnaW5nQm91bmRzIiwiRXJyb3IiLCJfdGhpcyRfcmVhbG1FbG0kZ2V0Qm8iLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRYTGVmdCIsImxlZnQiLCJ3aWR0aCIsIm1heFZhbHVlIiwibWluVmFsdWUiLCJfaGFuZGxlRHJhZ0V2ZW50IiwiX3JlZiIsInZhbHVlIiwidXBkYXRlU3RhdGUiLCJkaXZpZGVyUG9zaXRpb24iLCJfZHJhZ01hbmFnZXIiLCJnZXRCb3VuZHMiLCJvbkRyYWdFbmQiLCJvbkRyYWdNb3ZlIiwib25EcmFnU3RhcnQiLCJfaW5oZXJpdHNMb29zZSIsIl9wcm90byIsInByb3RvdHlwZSIsInJlbmRlciIsInBvc2l0aW9uIiwic3R5bGUiLCJjbGFzc05hbWUiLCJyZWYiLCJjaGlsZHJlbiIsIm9uTW91c2VEb3duIiwiaGFuZGxlTW91c2VEb3duIiwiUHVyZUNvbXBvbmVudCIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdXRpbHMvRHJhZ2dhYmxlTWFuYWdlci9kZW1vL0RpdmlkZXJEZW1vLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgRHJhZ2dhYmxlQm91bmRzLCBEcmFnZ2luZ1VwZGF0ZSB9IGZyb20gJy4uJztcbmltcG9ydCBUTmlsIGZyb20gJy4uLy4uLy4uL3R5cGVzL1ROaWwnO1xuaW1wb3J0IERyYWdnYWJsZU1hbmFnZXIgZnJvbSAnLi4vRHJhZ2dhYmxlTWFuYWdlcic7XG5cbmltcG9ydCAnLi9EaXZpZGVyRGVtby5jc3MnO1xuXG50eXBlIERpdmlkZXJEZW1vUHJvcHMgPSB7XG4gIHBvc2l0aW9uOiBudW1iZXI7XG4gIHVwZGF0ZVN0YXRlOiAodXBkYXRlOiB7IGRpdmlkZXJQb3NpdGlvbjogbnVtYmVyIH0pID0+IHZvaWQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEaXZpZGVyRGVtbyBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQ8RGl2aWRlckRlbW9Qcm9wcz4ge1xuICBfZHJhZ01hbmFnZXI6IERyYWdnYWJsZU1hbmFnZXI7XG5cbiAgX3JlYWxtRWxtOiBIVE1MRWxlbWVudCB8IFROaWw7XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IERpdmlkZXJEZW1vUHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLl9yZWFsbUVsbSA9IG51bGw7XG5cbiAgICB0aGlzLl9kcmFnTWFuYWdlciA9IG5ldyBEcmFnZ2FibGVNYW5hZ2VyKHtcbiAgICAgIGdldEJvdW5kczogdGhpcy5fZ2V0RHJhZ2dpbmdCb3VuZHMsXG4gICAgICBvbkRyYWdFbmQ6IHRoaXMuX2hhbmRsZURyYWdFdmVudCxcbiAgICAgIG9uRHJhZ01vdmU6IHRoaXMuX2hhbmRsZURyYWdFdmVudCxcbiAgICAgIG9uRHJhZ1N0YXJ0OiB0aGlzLl9oYW5kbGVEcmFnRXZlbnQsXG4gICAgfSk7XG4gIH1cblxuICBfc2V0UmVhbG0gPSAoZWxtOiBIVE1MRWxlbWVudCB8IFROaWwpID0+IHtcbiAgICB0aGlzLl9yZWFsbUVsbSA9IGVsbTtcbiAgfTtcblxuICBfZ2V0RHJhZ2dpbmdCb3VuZHMgPSAoKTogRHJhZ2dhYmxlQm91bmRzID0+IHtcbiAgICBpZiAoIXRoaXMuX3JlYWxtRWxtKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgc3RhdGUnKTtcbiAgICB9XG4gICAgY29uc3QgeyBsZWZ0OiBjbGllbnRYTGVmdCwgd2lkdGggfSA9IHRoaXMuX3JlYWxtRWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiB7XG4gICAgICBjbGllbnRYTGVmdCxcbiAgICAgIHdpZHRoLFxuICAgICAgbWF4VmFsdWU6IDAuOTgsXG4gICAgICBtaW5WYWx1ZTogMC4wMixcbiAgICB9O1xuICB9O1xuXG4gIF9oYW5kbGVEcmFnRXZlbnQgPSAoeyB2YWx1ZSB9OiBEcmFnZ2luZ1VwZGF0ZSkgPT4ge1xuICAgIHRoaXMucHJvcHMudXBkYXRlU3RhdGUoeyBkaXZpZGVyUG9zaXRpb246IHZhbHVlIH0pO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHBvc2l0aW9uIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHN0eWxlID0geyBsZWZ0OiBgJHtwb3NpdGlvbiAqIDEwMH0lYCB9O1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cIkRpdmlkZXJEZW1vLS1yZWFsbVwiIHJlZj17dGhpcy5fc2V0UmVhbG19PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgYXJpYS1oaWRkZW5cbiAgICAgICAgICBjbGFzc05hbWU9XCJEaXZpZGVyRGVtby0tZGl2aWRlclwiXG4gICAgICAgICAgb25Nb3VzZURvd249e3RoaXMuX2RyYWdNYW5hZ2VyLmhhbmRsZU1vdXNlRG93bn1cbiAgICAgICAgICBzdHlsZT17c3R5bGV9XG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sT0FBTztBQUl6QixPQUFPQyxnQkFBZ0IsTUFBTSxxQkFBcUI7QUFFbEQsT0FBTyxtQkFBbUI7QUFBQyxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFBQSxJQU9OQyxXQUFXLDBCQUFBQyxvQkFBQTtFQUs5QixTQUFBRCxZQUFZRSxLQUF1QixFQUFFO0lBQUEsSUFBQUMsS0FBQTtJQUNuQ0EsS0FBQSxHQUFBRixvQkFBQSxDQUFBRyxJQUFBLE9BQU1GLEtBQUssQ0FBQztJQUFDQyxLQUFBLENBWWZFLFNBQVMsR0FBRyxVQUFDQyxHQUF1QixFQUFLO01BQ3ZDSCxLQUFBLENBQUtJLFNBQVMsR0FBR0QsR0FBRztJQUN0QixDQUFDO0lBQUFILEtBQUEsQ0FFREssa0JBQWtCLEdBQUcsWUFBdUI7TUFDMUMsSUFBSSxDQUFDTCxLQUFBLENBQUtJLFNBQVMsRUFBRTtRQUNuQixNQUFNLElBQUlFLEtBQUssQ0FBQyxlQUFlLENBQUM7TUFDbEM7TUFDQSxJQUFBQyxxQkFBQSxHQUFxQ1AsS0FBQSxDQUFLSSxTQUFTLENBQUNJLHFCQUFxQixDQUFDLENBQUM7UUFBN0RDLFdBQVcsR0FBQUYscUJBQUEsQ0FBakJHLElBQUk7UUFBZUMsS0FBSyxHQUFBSixxQkFBQSxDQUFMSSxLQUFLO01BQ2hDLE9BQU87UUFDTEYsV0FBVyxFQUFYQSxXQUFXO1FBQ1hFLEtBQUssRUFBTEEsS0FBSztRQUNMQyxRQUFRLEVBQUUsSUFBSTtRQUNkQyxRQUFRLEVBQUU7TUFDWixDQUFDO0lBQ0gsQ0FBQztJQUFBYixLQUFBLENBRURjLGdCQUFnQixHQUFHLFVBQUFDLElBQUEsRUFBK0I7TUFBQSxJQUE1QkMsS0FBSyxHQUFBRCxJQUFBLENBQUxDLEtBQUs7TUFDekJoQixLQUFBLENBQUtELEtBQUssQ0FBQ2tCLFdBQVcsQ0FBQztRQUFFQyxlQUFlLEVBQUVGO01BQU0sQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUE3QkNoQixLQUFBLENBQUtJLFNBQVMsR0FBRyxJQUFJO0lBRXJCSixLQUFBLENBQUttQixZQUFZLEdBQUcsSUFBSXpCLGdCQUFnQixDQUFDO01BQ3ZDMEIsU0FBUyxFQUFFcEIsS0FBQSxDQUFLSyxrQkFBa0I7TUFDbENnQixTQUFTLEVBQUVyQixLQUFBLENBQUtjLGdCQUFnQjtNQUNoQ1EsVUFBVSxFQUFFdEIsS0FBQSxDQUFLYyxnQkFBZ0I7TUFDakNTLFdBQVcsRUFBRXZCLEtBQUEsQ0FBS2M7SUFDcEIsQ0FBQyxDQUFDO0lBQUMsT0FBQWQsS0FBQTtFQUNMO0VBQUN3QixjQUFBLENBQUEzQixXQUFBLEVBQUFDLG9CQUFBO0VBQUEsSUFBQTJCLE1BQUEsR0FBQTVCLFdBQUEsQ0FBQTZCLFNBQUE7RUFBQUQsTUFBQSxDQXVCREUsTUFBTSxHQUFOLFNBQUFBLE9BQUEsRUFBUztJQUNQLElBQVFDLFFBQVEsR0FBSyxJQUFJLENBQUM3QixLQUFLLENBQXZCNkIsUUFBUTtJQUNoQixJQUFNQyxLQUFLLEdBQUc7TUFBRW5CLElBQUksRUFBS2tCLFFBQVEsR0FBRyxHQUFHO0lBQUksQ0FBQztJQUM1QyxvQkFDRWhDLElBQUE7TUFBS2tDLFNBQVMsRUFBQyxvQkFBb0I7TUFBQ0MsR0FBRyxFQUFFLElBQUksQ0FBQzdCLFNBQVU7TUFBQThCLFFBQUEsZUFDdERwQyxJQUFBO1FBQ0UsbUJBQVc7UUFDWGtDLFNBQVMsRUFBQyxzQkFBc0I7UUFDaENHLFdBQVcsRUFBRSxJQUFJLENBQUNkLFlBQVksQ0FBQ2UsZUFBZ0I7UUFDL0NMLEtBQUssRUFBRUE7TUFBTSxDQUNkO0lBQUMsQ0FDQyxDQUFDO0VBRVYsQ0FBQztFQUFBLE9BQUFoQyxXQUFBO0FBQUEsRUFwRHNDSixLQUFLLENBQUMwQyxhQUFhO0FBQUEsU0FBdkN0QyxXQUFXLElBQUF1QyxPQUFBIiwiaWdub3JlTGlzdCI6W119