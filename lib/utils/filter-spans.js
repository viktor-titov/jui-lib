// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

export default function filterSpans(textFilter, spans) {
  if (!spans) {
    return undefined;
  }

  // if a span field includes at least one filter in includeFilters, the span is a match
  var includeFilters = [];

  // values with keys that include text in any one of the excludeKeys will be ignored
  var excludeKeys = [];

  // split textFilter by whitespace, remove empty strings, and extract includeFilters and excludeKeys
  textFilter.split(/\s+/).filter(Boolean).forEach(function (w) {
    if (w[0] === '-') {
      excludeKeys.push(w.slice(1).toLowerCase());
    } else {
      includeFilters.push(w.toLowerCase());
    }
  });
  var isTextInFilters = function isTextInFilters(filters, text) {
    return filters.some(function (filter) {
      return text.toLowerCase().includes(filter);
    });
  };
  var isTextInKeyValues = function isTextInKeyValues(kvs) {
    return kvs ? kvs.some(function (kv) {
      // ignore checking key and value for a match if key is in excludeKeys
      if (isTextInFilters(excludeKeys, kv.key)) {
        return false;
      }
      // match if key or value matches an item in includeFilters
      return isTextInFilters(includeFilters, kv.key) || isTextInFilters(includeFilters, kv.value.toString());
    }) : false;
  };
  var isSpanAMatch = function isSpanAMatch(span) {
    return isTextInFilters(includeFilters, span.operationName) || isTextInFilters(includeFilters, span.process.serviceName) || isTextInKeyValues(span.tags) || span.logs !== null && span.logs.some(function (log) {
      return isTextInKeyValues(log.fields);
    }) || isTextInKeyValues(span.process.tags) || includeFilters.some(function (filter) {
      return filter === span.spanID;
    });
  };

  // declare as const because need to disambiguate the type
  var rv = new Set(spans.filter(isSpanAMatch).map(function (span) {
    return span.spanID;
  }));
  return rv;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmaWx0ZXJTcGFucyIsInRleHRGaWx0ZXIiLCJzcGFucyIsInVuZGVmaW5lZCIsImluY2x1ZGVGaWx0ZXJzIiwiZXhjbHVkZUtleXMiLCJzcGxpdCIsImZpbHRlciIsIkJvb2xlYW4iLCJmb3JFYWNoIiwidyIsInB1c2giLCJzbGljZSIsInRvTG93ZXJDYXNlIiwiaXNUZXh0SW5GaWx0ZXJzIiwiZmlsdGVycyIsInRleHQiLCJzb21lIiwiaW5jbHVkZXMiLCJpc1RleHRJbktleVZhbHVlcyIsImt2cyIsImt2Iiwia2V5IiwidmFsdWUiLCJ0b1N0cmluZyIsImlzU3BhbkFNYXRjaCIsInNwYW4iLCJvcGVyYXRpb25OYW1lIiwicHJvY2VzcyIsInNlcnZpY2VOYW1lIiwidGFncyIsImxvZ3MiLCJsb2ciLCJmaWVsZHMiLCJzcGFuSUQiLCJydiIsIlNldCIsIm1hcCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9maWx0ZXItc3BhbnMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxOSBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBUTmlsIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgVHJhY2VLZXlWYWx1ZVBhaXIsIFRyYWNlU3BhbiB9IGZyb20gJy4uL3R5cGVzL3RyYWNlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmlsdGVyU3BhbnModGV4dEZpbHRlcjogc3RyaW5nLCBzcGFuczogVHJhY2VTcGFuW10gfCBUTmlsKSB7XG4gIGlmICghc3BhbnMpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgLy8gaWYgYSBzcGFuIGZpZWxkIGluY2x1ZGVzIGF0IGxlYXN0IG9uZSBmaWx0ZXIgaW4gaW5jbHVkZUZpbHRlcnMsIHRoZSBzcGFuIGlzIGEgbWF0Y2hcbiAgY29uc3QgaW5jbHVkZUZpbHRlcnM6IHN0cmluZ1tdID0gW107XG5cbiAgLy8gdmFsdWVzIHdpdGgga2V5cyB0aGF0IGluY2x1ZGUgdGV4dCBpbiBhbnkgb25lIG9mIHRoZSBleGNsdWRlS2V5cyB3aWxsIGJlIGlnbm9yZWRcbiAgY29uc3QgZXhjbHVkZUtleXM6IHN0cmluZ1tdID0gW107XG5cbiAgLy8gc3BsaXQgdGV4dEZpbHRlciBieSB3aGl0ZXNwYWNlLCByZW1vdmUgZW1wdHkgc3RyaW5ncywgYW5kIGV4dHJhY3QgaW5jbHVkZUZpbHRlcnMgYW5kIGV4Y2x1ZGVLZXlzXG4gIHRleHRGaWx0ZXJcbiAgICAuc3BsaXQoL1xccysvKVxuICAgIC5maWx0ZXIoQm9vbGVhbilcbiAgICAuZm9yRWFjaCgodykgPT4ge1xuICAgICAgaWYgKHdbMF0gPT09ICctJykge1xuICAgICAgICBleGNsdWRlS2V5cy5wdXNoKHcuc2xpY2UoMSkudG9Mb3dlckNhc2UoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmNsdWRlRmlsdGVycy5wdXNoKHcudG9Mb3dlckNhc2UoKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgY29uc3QgaXNUZXh0SW5GaWx0ZXJzID0gKGZpbHRlcnM6IHN0cmluZ1tdLCB0ZXh0OiBzdHJpbmcpID0+XG4gICAgZmlsdGVycy5zb21lKChmaWx0ZXIpID0+IHRleHQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhmaWx0ZXIpKTtcblxuICBjb25zdCBpc1RleHRJbktleVZhbHVlcyA9IChrdnM6IFRyYWNlS2V5VmFsdWVQYWlyW10pID0+XG4gICAga3ZzXG4gICAgICA/IGt2cy5zb21lKChrdikgPT4ge1xuICAgICAgICAgIC8vIGlnbm9yZSBjaGVja2luZyBrZXkgYW5kIHZhbHVlIGZvciBhIG1hdGNoIGlmIGtleSBpcyBpbiBleGNsdWRlS2V5c1xuICAgICAgICAgIGlmIChpc1RleHRJbkZpbHRlcnMoZXhjbHVkZUtleXMsIGt2LmtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gbWF0Y2ggaWYga2V5IG9yIHZhbHVlIG1hdGNoZXMgYW4gaXRlbSBpbiBpbmNsdWRlRmlsdGVyc1xuICAgICAgICAgIHJldHVybiBpc1RleHRJbkZpbHRlcnMoaW5jbHVkZUZpbHRlcnMsIGt2LmtleSkgfHwgaXNUZXh0SW5GaWx0ZXJzKGluY2x1ZGVGaWx0ZXJzLCBrdi52YWx1ZS50b1N0cmluZygpKTtcbiAgICAgICAgfSlcbiAgICAgIDogZmFsc2U7XG5cbiAgY29uc3QgaXNTcGFuQU1hdGNoID0gKHNwYW46IFRyYWNlU3BhbikgPT5cbiAgICBpc1RleHRJbkZpbHRlcnMoaW5jbHVkZUZpbHRlcnMsIHNwYW4ub3BlcmF0aW9uTmFtZSkgfHxcbiAgICBpc1RleHRJbkZpbHRlcnMoaW5jbHVkZUZpbHRlcnMsIHNwYW4ucHJvY2Vzcy5zZXJ2aWNlTmFtZSkgfHxcbiAgICBpc1RleHRJbktleVZhbHVlcyhzcGFuLnRhZ3MpIHx8XG4gICAgKHNwYW4ubG9ncyAhPT0gbnVsbCAmJiBzcGFuLmxvZ3Muc29tZSgobG9nKSA9PiBpc1RleHRJbktleVZhbHVlcyhsb2cuZmllbGRzKSkpIHx8XG4gICAgaXNUZXh0SW5LZXlWYWx1ZXMoc3Bhbi5wcm9jZXNzLnRhZ3MpIHx8XG4gICAgaW5jbHVkZUZpbHRlcnMuc29tZSgoZmlsdGVyKSA9PiBmaWx0ZXIgPT09IHNwYW4uc3BhbklEKTtcblxuICAvLyBkZWNsYXJlIGFzIGNvbnN0IGJlY2F1c2UgbmVlZCB0byBkaXNhbWJpZ3VhdGUgdGhlIHR5cGVcbiAgY29uc3QgcnY6IFNldDxzdHJpbmc+ID0gbmV3IFNldChzcGFucy5maWx0ZXIoaXNTcGFuQU1hdGNoKS5tYXAoKHNwYW46IFRyYWNlU3BhbikgPT4gc3Bhbi5zcGFuSUQpKTtcbiAgcmV0dXJuIHJ2O1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFLQSxlQUFlLFNBQVNBLFdBQVdBLENBQUNDLFVBQWtCLEVBQUVDLEtBQXlCLEVBQUU7RUFDakYsSUFBSSxDQUFDQSxLQUFLLEVBQUU7SUFDVixPQUFPQyxTQUFTO0VBQ2xCOztFQUVBO0VBQ0EsSUFBTUMsY0FBd0IsR0FBRyxFQUFFOztFQUVuQztFQUNBLElBQU1DLFdBQXFCLEdBQUcsRUFBRTs7RUFFaEM7RUFDQUosVUFBVSxDQUNQSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQ1pDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLENBQ2ZDLE9BQU8sQ0FBQyxVQUFDQyxDQUFDLEVBQUs7SUFDZCxJQUFJQSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO01BQ2hCTCxXQUFXLENBQUNNLElBQUksQ0FBQ0QsQ0FBQyxDQUFDRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDNUMsQ0FBQyxNQUFNO01BQ0xULGNBQWMsQ0FBQ08sSUFBSSxDQUFDRCxDQUFDLENBQUNHLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDdEM7RUFDRixDQUFDLENBQUM7RUFFSixJQUFNQyxlQUFlLEdBQUcsU0FBbEJBLGVBQWVBLENBQUlDLE9BQWlCLEVBQUVDLElBQVk7SUFBQSxPQUN0REQsT0FBTyxDQUFDRSxJQUFJLENBQUMsVUFBQ1YsTUFBTTtNQUFBLE9BQUtTLElBQUksQ0FBQ0gsV0FBVyxDQUFDLENBQUMsQ0FBQ0ssUUFBUSxDQUFDWCxNQUFNLENBQUM7SUFBQSxFQUFDO0VBQUE7RUFFL0QsSUFBTVksaUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFpQkEsQ0FBSUMsR0FBd0I7SUFBQSxPQUNqREEsR0FBRyxHQUNDQSxHQUFHLENBQUNILElBQUksQ0FBQyxVQUFDSSxFQUFFLEVBQUs7TUFDZjtNQUNBLElBQUlQLGVBQWUsQ0FBQ1QsV0FBVyxFQUFFZ0IsRUFBRSxDQUFDQyxHQUFHLENBQUMsRUFBRTtRQUN4QyxPQUFPLEtBQUs7TUFDZDtNQUNBO01BQ0EsT0FBT1IsZUFBZSxDQUFDVixjQUFjLEVBQUVpQixFQUFFLENBQUNDLEdBQUcsQ0FBQyxJQUFJUixlQUFlLENBQUNWLGNBQWMsRUFBRWlCLEVBQUUsQ0FBQ0UsS0FBSyxDQUFDQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ3hHLENBQUMsQ0FBQyxHQUNGLEtBQUs7RUFBQTtFQUVYLElBQU1DLFlBQVksR0FBRyxTQUFmQSxZQUFZQSxDQUFJQyxJQUFlO0lBQUEsT0FDbkNaLGVBQWUsQ0FBQ1YsY0FBYyxFQUFFc0IsSUFBSSxDQUFDQyxhQUFhLENBQUMsSUFDbkRiLGVBQWUsQ0FBQ1YsY0FBYyxFQUFFc0IsSUFBSSxDQUFDRSxPQUFPLENBQUNDLFdBQVcsQ0FBQyxJQUN6RFYsaUJBQWlCLENBQUNPLElBQUksQ0FBQ0ksSUFBSSxDQUFDLElBQzNCSixJQUFJLENBQUNLLElBQUksS0FBSyxJQUFJLElBQUlMLElBQUksQ0FBQ0ssSUFBSSxDQUFDZCxJQUFJLENBQUMsVUFBQ2UsR0FBRztNQUFBLE9BQUtiLGlCQUFpQixDQUFDYSxHQUFHLENBQUNDLE1BQU0sQ0FBQztJQUFBLEVBQUUsSUFDOUVkLGlCQUFpQixDQUFDTyxJQUFJLENBQUNFLE9BQU8sQ0FBQ0UsSUFBSSxDQUFDLElBQ3BDMUIsY0FBYyxDQUFDYSxJQUFJLENBQUMsVUFBQ1YsTUFBTTtNQUFBLE9BQUtBLE1BQU0sS0FBS21CLElBQUksQ0FBQ1EsTUFBTTtJQUFBLEVBQUM7RUFBQTs7RUFFekQ7RUFDQSxJQUFNQyxFQUFlLEdBQUcsSUFBSUMsR0FBRyxDQUFDbEMsS0FBSyxDQUFDSyxNQUFNLENBQUNrQixZQUFZLENBQUMsQ0FBQ1ksR0FBRyxDQUFDLFVBQUNYLElBQWU7SUFBQSxPQUFLQSxJQUFJLENBQUNRLE1BQU07RUFBQSxFQUFDLENBQUM7RUFDakcsT0FBT0MsRUFBRTtBQUNYIiwiaWdub3JlTGlzdCI6W119