import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { isEqual as _isEqual } from 'lodash';

// @ts-ignore
import { getTraceSpanIdsAsTree } from '../selectors/trace';

// @ts-ignore

import { getConfigValue } from '../utils/config/get-config';
import { getTraceName } from './trace-viewer';

// exported for tests
export function deduplicateTags(spanTags) {
  var warningsHash = new Map();
  var tags = spanTags.reduce(function (uniqueTags, tag) {
    if (!uniqueTags.some(function (t) {
      return t.key === tag.key && t.value === tag.value;
    })) {
      uniqueTags.push(tag);
    } else {
      warningsHash.set(tag.key + ":" + tag.value, "Duplicate tag \"" + tag.key + ":" + tag.value + "\"");
    }
    return uniqueTags;
  }, []);
  var warnings = Array.from(warningsHash.values());
  return {
    tags: tags,
    warnings: warnings
  };
}

// exported for tests
export function orderTags(spanTags, topPrefixes) {
  var _spanTags$slice;
  var orderedTags = (_spanTags$slice = spanTags == null ? void 0 : spanTags.slice()) != null ? _spanTags$slice : [];
  var tp = (topPrefixes || []).map(function (p) {
    return p.toLowerCase();
  });
  orderedTags.sort(function (a, b) {
    var aKey = a.key.toLowerCase();
    var bKey = b.key.toLowerCase();
    for (var i = 0; i < tp.length; i++) {
      var p = tp[i];
      if (aKey.startsWith(p) && !bKey.startsWith(p)) {
        return -1;
      }
      if (!aKey.startsWith(p) && bKey.startsWith(p)) {
        return 1;
      }
    }
    if (aKey > bKey) {
      return 1;
    }
    if (aKey < bKey) {
      return -1;
    }
    return 0;
  });
  return orderedTags;
}

/**
 * NOTE: Mutates `data` - Transform the HTTP response data into the form the app
 * generally requires.
 */
export default function transformTraceData(data) {
  if (!(data != null && data.traceID)) {
    return null;
  }
  var traceID = data.traceID.toLowerCase();
  var traceEndTime = 0;
  var traceStartTime = Number.MAX_SAFE_INTEGER;
  var spanIdCounts = new Map();
  var spanMap = new Map();
  // filter out spans with empty start times
  // eslint-disable-next-line no-param-reassign
  data.spans = data.spans.filter(function (span) {
    return Boolean(span.startTime);
  });

  // Sort process tags
  data.processes = Object.entries(data.processes).reduce(function (processes, _ref) {
    var id = _ref[0],
      process = _ref[1];
    processes[id] = _extends({}, process, {
      tags: orderTags(process.tags)
    });
    return processes;
  }, {});
  var max = data.spans.length;
  for (var i = 0; i < max; i++) {
    var span = data.spans[i];
    var startTime = span.startTime,
      duration = span.duration,
      processID = span.processID;
    var spanID = span.spanID;
    // check for start / end time for the trace
    if (startTime < traceStartTime) {
      traceStartTime = startTime;
    }
    if (startTime + duration > traceEndTime) {
      traceEndTime = startTime + duration;
    }
    // make sure span IDs are unique
    var idCount = spanIdCounts.get(spanID);
    if (idCount != null) {
      // eslint-disable-next-line no-console
      console.warn("Dupe spanID, " + (idCount + 1) + " x " + spanID, span, spanMap.get(spanID));
      if (_isEqual(span, spanMap.get(spanID))) {
        // eslint-disable-next-line no-console
        console.warn('\t two spans with same ID have `isEqual(...) === true`');
      }
      spanIdCounts.set(spanID, idCount + 1);
      spanID = spanID + "_" + idCount;
      span.spanID = spanID;
    } else {
      spanIdCounts.set(spanID, 1);
    }
    span.process = data.processes[processID];
    spanMap.set(spanID, span);
  }
  // tree is necessary to sort the spans, so children follow parents, and
  // siblings are sorted by start time
  var tree = getTraceSpanIdsAsTree(data);
  var spans = [];
  var svcCounts = {};

  // Eslint complains about number type not needed but then TS complains it is implicitly any.
  // eslint-disable-next-line @typescript-eslint/no-inferrable-types
  tree.walk(function (spanID, node, depth) {
    if (depth === void 0) {
      depth = 0;
    }
    if (spanID === '__root__') {
      return;
    }
    if (typeof spanID !== 'string') {
      return;
    }
    var span = spanMap.get(spanID);
    if (!span) {
      return;
    }
    var serviceName = span.process.serviceName;
    svcCounts[serviceName] = (svcCounts[serviceName] || 0) + 1;
    span.relativeStartTime = span.startTime - traceStartTime;
    span.depth = depth - 1;
    span.hasChildren = node.children.length > 0;
    span.childSpanCount = node.children.length;
    span.warnings = span.warnings || [];
    span.tags = span.tags || [];
    span.references = span.references || [];
    var tagsInfo = deduplicateTags(span.tags);
    span.tags = orderTags(tagsInfo.tags, getConfigValue('topTagPrefixes'));
    span.warnings = span.warnings.concat(tagsInfo.warnings);
    span.references.forEach(function (ref, index) {
      var refSpan = spanMap.get(ref.spanID);
      if (refSpan) {
        // eslint-disable-next-line no-param-reassign
        ref.span = refSpan;
        if (index > 0) {
          // Don't take into account the parent, just other references.
          refSpan.subsidiarilyReferencedBy = refSpan.subsidiarilyReferencedBy || [];
          refSpan.subsidiarilyReferencedBy.push({
            spanID: spanID,
            traceID: traceID,
            span: span,
            refType: ref.refType
          });
        }
      }
    });
    spans.push(span);
  });
  var traceName = getTraceName(spans);
  var services = Object.keys(svcCounts).map(function (name) {
    return {
      name: name,
      numberOfSpans: svcCounts[name]
    };
  });
  return {
    services: services,
    spans: spans,
    traceID: traceID,
    traceName: traceName,
    // can't use spread operator for intersection types
    // repl: https://goo.gl/4Z23MJ
    // issue: https://github.com/facebook/flow/issues/1511
    processes: data.processes,
    duration: traceEndTime - traceStartTime,
    startTime: traceStartTime,
    endTime: traceEndTime
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,