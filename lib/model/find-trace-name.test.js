// Copyright (c) 2020 The Jaeger Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { _getTraceNameImpl as getTraceName } from './trace-viewer';
describe('getTraceName', function () {
  var firstSpanId = 'firstSpanId';
  var secondSpanId = 'secondSpanId';
  var thirdSpanId = 'thirdSpanId';
  var missingSpanId = 'missingSpanId';
  var currentTraceId = 'currentTraceId';
  var serviceName = 'serviceName';
  var operationName = 'operationName';
  var t = 1583758670000;

  // Note: this trace has a loop S1 <- S2 <- S3 <- S1, which is the only way
  // to make the algorithm return an empty string as trace name.
  var spansWithNoRoots = [{
    spanID: firstSpanId,
    traceID: currentTraceId,
    startTime: t + 200,
    process: {},
    references: [{
      spanID: secondSpanId,
      traceID: currentTraceId
    }]
  }, {
    spanID: secondSpanId,
    traceID: currentTraceId,
    startTime: t + 100,
    process: {},
    references: [{
      spanID: thirdSpanId,
      traceID: currentTraceId
    }]
  }, {
    spanID: thirdSpanId,
    traceID: currentTraceId,
    startTime: t,
    process: {},
    references: [{
      spanID: firstSpanId,
      traceID: currentTraceId
    }]
  }];
  var spansWithMultipleRootsDifferentByStartTime = [{
    spanID: firstSpanId,
    traceID: currentTraceId,
    startTime: t + 200,
    process: {},
    references: [{
      spanID: thirdSpanId,
      traceID: currentTraceId
    }]
  }, {
    spanID: secondSpanId,
    // may be a root span
    traceID: currentTraceId,
    startTime: t + 100,
    process: {},
    references: [{
      spanID: missingSpanId,
      traceID: currentTraceId
    }]
  }, {
    spanID: thirdSpanId,
    // root span (as the earliest)
    traceID: currentTraceId,
    startTime: t,
    operationName: operationName,
    process: {
      serviceName: serviceName
    },
    references: [{
      spanID: missingSpanId,
      traceID: currentTraceId
    }]
  }];
  var spansWithMultipleRootsWithOneWithoutRefs = [{
    spanID: firstSpanId,
    traceID: currentTraceId,
    startTime: t + 200,
    process: {},
    references: [{
      spanID: thirdSpanId,
      traceID: currentTraceId
    }]
  }, {
    spanID: secondSpanId,
    // root span (as a span without any refs)
    traceID: currentTraceId,
    startTime: t + 100,
    operationName: operationName,
    process: {
      serviceName: serviceName
    }
  }, {
    spanID: thirdSpanId,
    // may be a root span
    traceID: currentTraceId,
    startTime: t,
    process: {},
    references: [{
      spanID: missingSpanId,
      traceID: currentTraceId
    }]
  }];
  var spansWithOneRootWithRemoteRef = [{
    spanID: firstSpanId,
    traceID: currentTraceId,
    startTime: t + 200,
    process: {},
    references: [{
      spanID: secondSpanId,
      traceID: currentTraceId
    }]
  }, {
    spanID: secondSpanId,
    traceID: currentTraceId,
    startTime: t + 100,
    process: {},
    references: [{
      spanID: thirdSpanId,
      traceID: currentTraceId
    }]
  }, {
    spanID: thirdSpanId,
    // effective root span, since its parent is missing
    traceID: currentTraceId,
    startTime: t,
    operationName: operationName,
    process: {
      serviceName: serviceName
    },
    references: [{
      spanID: missingSpanId,
      traceID: currentTraceId
    }]
  }];
  var spansWithOneRootWithNoRefs = [{
    spanID: firstSpanId,
    traceID: currentTraceId,
    startTime: t + 200,
    process: {},
    references: [{
      spanID: thirdSpanId,
      traceID: currentTraceId
    }]
  }, {
    spanID: secondSpanId,
    // root span
    traceID: currentTraceId,
    startTime: t + 100,
    operationName: operationName,
    process: {
      serviceName: serviceName
    }
  }, {
    spanID: thirdSpanId,
    traceID: currentTraceId,
    startTime: t,
    process: {},
    references: [{
      spanID: secondSpanId,
      traceID: currentTraceId
    }]
  }];
  var fullTraceName = serviceName + ": " + operationName;
  it('returns an empty string if given spans with no root among them', function () {
    expect(getTraceName(spansWithNoRoots)).toEqual('');
  });
  it('returns an id of root span with the earliest startTime', function () {
    expect(getTraceName(spansWithMultipleRootsDifferentByStartTime)).toEqual(fullTraceName);
  });
  it('returns an id of root span without any refs', function () {
    expect(getTraceName(spansWithMultipleRootsWithOneWithoutRefs)).toEqual(fullTraceName);
  });
  it('returns an id of root span with remote ref', function () {
    expect(getTraceName(spansWithOneRootWithRemoteRef)).toEqual(fullTraceName);
  });
  it('returns an id of root span with no refs', function () {
    expect(getTraceName(spansWithOneRootWithNoRefs)).toEqual(fullTraceName);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,