// Copyright (c) 2017 The Jaeger Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { uniq as _uniq } from 'lodash';
import memoize from 'lru-memoize';
import { getConfigValue } from '../utils/config/get-config';
import { getParent } from './span';
var parameterRegExp = /#\{([^{}]*)\}/g;
function getParamNames(str) {
  var names = new Set();
  str.replace(parameterRegExp, function (match, name) {
    names.add(name);
    return match;
  });
  return Array.from(names);
}
function stringSupplant(str, encodeFn, map) {
  return str.replace(parameterRegExp, function (_, name) {
    var value = map[name];
    return value == null ? '' : encodeFn(value);
  });
}
export function processTemplate(template, encodeFn) {
  if (typeof template !== 'string') {
    /*
     // kept on ice until #123 is implemented:
    if (template && Array.isArray(template.parameters) && (typeof template.template === 'function')) {
      return template;
    }
     */
    throw new Error('Invalid template');
  }
  return {
    parameters: getParamNames(template),
    template: stringSupplant.bind(null, template, encodeFn)
  };
}
export function createTestFunction(entry) {
  if (typeof entry === 'string') {
    return function (arg) {
      return arg === entry;
    };
  }
  if (Array.isArray(entry)) {
    return function (arg) {
      return entry.indexOf(arg) > -1;
    };
  }
  /*
   // kept on ice until #123 is implemented:
  if (entry instanceof RegExp) {
    return (arg: any) => entry.test(arg);
  }
  if (typeof entry === 'function') {
    return entry;
  }
   */
  if (entry == null) {
    return function () {
      return true;
    };
  }
  throw new Error("Invalid value: " + entry);
}
var identity = function identity(a) {
  return a;
};
export function processLinkPattern(pattern) {
  try {
    var url = processTemplate(pattern.url, encodeURIComponent);
    var text = processTemplate(pattern.text, identity);
    return {
      object: pattern,
      type: createTestFunction(pattern.type),
      key: createTestFunction(pattern.key),
      value: createTestFunction(pattern.value),
      url: url,
      text: text,
      parameters: _uniq(url.parameters.concat(text.parameters))
    };
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error("Ignoring invalid link pattern: " + error, pattern);
    return null;
  }
}
export function getParameterInArray(name, array) {
  if (array) {
    return array.find(function (entry) {
      return entry.key === name;
    });
  }
  return undefined;
}
export function getParameterInAncestor(name, span) {
  var currentSpan = span;
  while (currentSpan) {
    var result = getParameterInArray(name, currentSpan.tags) || getParameterInArray(name, currentSpan.process.tags);
    if (result) {
      return result;
    }
    currentSpan = getParent(currentSpan);
  }
  return undefined;
}
function callTemplate(template, data) {
  return template.template(data);
}
export function computeTraceLink(linkPatterns, trace) {
  var result = [];
  var validKeys = Object.keys(trace).filter(function (key) {
    return typeof trace[key] === 'string' || trace[key] === 'number';
  });
  linkPatterns == null || linkPatterns.filter(function (pattern) {
    return pattern == null ? void 0 : pattern.type('traces');
  }).forEach(function (pattern) {
    var parameterValues = {};
    var allParameters = pattern == null ? void 0 : pattern.parameters.every(function (parameter) {
      var key = parameter;
      if (validKeys.includes(key)) {
        // At this point is safe to access to trace object using parameter variable because
        // we validated parameter against validKeys, this implies that parameter a keyof Trace.
        parameterValues[parameter] = trace[key];
        return true;
      }
      return false;
    });
    if (allParameters) {
      result.push({
        url: callTemplate(pattern.url, parameterValues),
        text: callTemplate(pattern.text, parameterValues)
      });
    }
  });
  return result;
}
export function computeLinks(linkPatterns, span, items, itemIndex) {
  var item = items[itemIndex];
  var type = 'logs';
  var processTags = span.process.tags === items;
  if (processTags) {
    type = 'process';
  }
  var spanTags = span.tags === items;
  if (spanTags) {
    type = 'tags';
  }
  var result = [];
  linkPatterns.forEach(function (pattern) {
    if (pattern.type(type) && pattern.key(item.key) && pattern.value(item.value)) {
      var parameterValues = {};
      var allParameters = pattern.parameters.every(function (parameter) {
        var entry = getParameterInArray(parameter, items);
        if (!entry && !processTags) {
          // do not look in ancestors for process tags because the same object may appear in different places in the hierarchy
          // and the cache in getLinks uses that object as a key
          entry = getParameterInAncestor(parameter, span);
        }
        if (entry) {
          parameterValues[parameter] = entry.value;
          return true;
        }
        // eslint-disable-next-line no-console
        console.warn("Skipping link pattern, missing parameter " + parameter + " for key " + item.key + " in " + type + ".", pattern.object);
        return false;
      });
      if (allParameters) {
        result.push({
          url: callTemplate(pattern.url, parameterValues),
          text: callTemplate(pattern.text, parameterValues)
        });
      }
    }
  });
  return result;
}
export function createGetLinks(linkPatterns, cache) {
  return function (span, items, itemIndex) {
    if (linkPatterns.length === 0) {
      return [];
    }
    var item = items[itemIndex];
    var result = cache.get(item);
    if (!result) {
      result = computeLinks(linkPatterns, span, items, itemIndex);
      cache.set(item, result);
    }
    return result;
  };
}
var processedLinks = (getConfigValue('linkPatterns') || []).map(processLinkPattern).filter(function (link) {
  return Boolean(link);
});
export var getTraceLinks = memoize(10)(function (trace) {
  var result = [];
  if (!trace) {
    return result;
  }
  return computeTraceLink(processedLinks, trace);
});
export default createGetLinks(processedLinks, new WeakMap());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1bmlxIiwiX3VuaXEiLCJtZW1vaXplIiwiZ2V0Q29uZmlnVmFsdWUiLCJnZXRQYXJlbnQiLCJwYXJhbWV0ZXJSZWdFeHAiLCJnZXRQYXJhbU5hbWVzIiwic3RyIiwibmFtZXMiLCJTZXQiLCJyZXBsYWNlIiwibWF0Y2giLCJuYW1lIiwiYWRkIiwiQXJyYXkiLCJmcm9tIiwic3RyaW5nU3VwcGxhbnQiLCJlbmNvZGVGbiIsIm1hcCIsIl8iLCJ2YWx1ZSIsInByb2Nlc3NUZW1wbGF0ZSIsInRlbXBsYXRlIiwiRXJyb3IiLCJwYXJhbWV0ZXJzIiwiYmluZCIsImNyZWF0ZVRlc3RGdW5jdGlvbiIsImVudHJ5IiwiYXJnIiwiaXNBcnJheSIsImluZGV4T2YiLCJpZGVudGl0eSIsImEiLCJwcm9jZXNzTGlua1BhdHRlcm4iLCJwYXR0ZXJuIiwidXJsIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidGV4dCIsIm9iamVjdCIsInR5cGUiLCJrZXkiLCJjb25jYXQiLCJlcnJvciIsImNvbnNvbGUiLCJnZXRQYXJhbWV0ZXJJbkFycmF5IiwiYXJyYXkiLCJmaW5kIiwidW5kZWZpbmVkIiwiZ2V0UGFyYW1ldGVySW5BbmNlc3RvciIsInNwYW4iLCJjdXJyZW50U3BhbiIsInJlc3VsdCIsInRhZ3MiLCJwcm9jZXNzIiwiY2FsbFRlbXBsYXRlIiwiZGF0YSIsImNvbXB1dGVUcmFjZUxpbmsiLCJsaW5rUGF0dGVybnMiLCJ0cmFjZSIsInZhbGlkS2V5cyIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJmb3JFYWNoIiwicGFyYW1ldGVyVmFsdWVzIiwiYWxsUGFyYW1ldGVycyIsImV2ZXJ5IiwicGFyYW1ldGVyIiwiaW5jbHVkZXMiLCJwdXNoIiwiY29tcHV0ZUxpbmtzIiwiaXRlbXMiLCJpdGVtSW5kZXgiLCJpdGVtIiwicHJvY2Vzc1RhZ3MiLCJzcGFuVGFncyIsIndhcm4iLCJjcmVhdGVHZXRMaW5rcyIsImNhY2hlIiwibGVuZ3RoIiwiZ2V0Iiwic2V0IiwicHJvY2Vzc2VkTGlua3MiLCJsaW5rIiwiQm9vbGVhbiIsImdldFRyYWNlTGlua3MiLCJXZWFrTWFwIl0sInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVsL2xpbmstcGF0dGVybnMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNyBUaGUgSmFlZ2VyIEF1dGhvcnMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IHVuaXEgYXMgX3VuaXEgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnbHJ1LW1lbW9pemUnO1xuXG5pbXBvcnQgeyBUTmlsIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgVHJhY2VTcGFuLCBUcmFjZUxpbmssIFRyYWNlS2V5VmFsdWVQYWlyLCBUcmFjZSB9IGZyb20gJy4uL3R5cGVzL3RyYWNlJztcbmltcG9ydCB7IGdldENvbmZpZ1ZhbHVlIH0gZnJvbSAnLi4vdXRpbHMvY29uZmlnL2dldC1jb25maWcnO1xuXG5pbXBvcnQgeyBnZXRQYXJlbnQgfSBmcm9tICcuL3NwYW4nO1xuXG5jb25zdCBwYXJhbWV0ZXJSZWdFeHAgPSAvI1xceyhbXnt9XSopXFx9L2c7XG5cbnR5cGUgUHJvY2Vzc2VkVGVtcGxhdGUgPSB7XG4gIHBhcmFtZXRlcnM6IHN0cmluZ1tdO1xuICB0ZW1wbGF0ZTogKHRlbXBsYXRlOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSA9PiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBQcm9jZXNzZWRMaW5rUGF0dGVybiA9IHtcbiAgb2JqZWN0OiBhbnk7XG4gIHR5cGU6IChsaW5rOiBzdHJpbmcpID0+IGJvb2xlYW47XG4gIGtleTogKGxpbms6IHN0cmluZykgPT4gYm9vbGVhbjtcbiAgdmFsdWU6ICh2YWx1ZTogYW55KSA9PiBib29sZWFuO1xuICB1cmw6IFByb2Nlc3NlZFRlbXBsYXRlO1xuICB0ZXh0OiBQcm9jZXNzZWRUZW1wbGF0ZTtcbiAgcGFyYW1ldGVyczogc3RyaW5nW107XG59O1xuXG50eXBlIFRMaW5rc1JWID0gQXJyYXk8eyB1cmw6IHN0cmluZzsgdGV4dDogc3RyaW5nIH0+O1xuXG5mdW5jdGlvbiBnZXRQYXJhbU5hbWVzKHN0cjogc3RyaW5nKSB7XG4gIGNvbnN0IG5hbWVzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gIHN0ci5yZXBsYWNlKHBhcmFtZXRlclJlZ0V4cCwgKG1hdGNoLCBuYW1lKSA9PiB7XG4gICAgbmFtZXMuYWRkKG5hbWUpO1xuICAgIHJldHVybiBtYXRjaDtcbiAgfSk7XG4gIHJldHVybiBBcnJheS5mcm9tKG5hbWVzKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5nU3VwcGxhbnQoc3RyOiBzdHJpbmcsIGVuY29kZUZuOiAodW5lbmNvZGVkOiBhbnkpID0+IHN0cmluZywgbWFwOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShwYXJhbWV0ZXJSZWdFeHAsIChfLCBuYW1lKSA9PiB7XG4gICAgY29uc3QgdmFsdWUgPSBtYXBbbmFtZV07XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGVuY29kZUZuKHZhbHVlKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzVGVtcGxhdGUodGVtcGxhdGU6IHVua25vd24sIGVuY29kZUZuOiAodW5lbmNvZGVkOiBhbnkpID0+IHN0cmluZyk6IFByb2Nlc3NlZFRlbXBsYXRlIHtcbiAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAvKlxuXG4gICAgLy8ga2VwdCBvbiBpY2UgdW50aWwgIzEyMyBpcyBpbXBsZW1lbnRlZDpcbiAgICBpZiAodGVtcGxhdGUgJiYgQXJyYXkuaXNBcnJheSh0ZW1wbGF0ZS5wYXJhbWV0ZXJzKSAmJiAodHlwZW9mIHRlbXBsYXRlLnRlbXBsYXRlID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgIH1cblxuICAgICovXG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHRlbXBsYXRlJyk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBwYXJhbWV0ZXJzOiBnZXRQYXJhbU5hbWVzKHRlbXBsYXRlKSxcbiAgICB0ZW1wbGF0ZTogc3RyaW5nU3VwcGxhbnQuYmluZChudWxsLCB0ZW1wbGF0ZSwgZW5jb2RlRm4pLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGVzdEZ1bmN0aW9uKGVudHJ5PzogYW55KSB7XG4gIGlmICh0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIChhcmc6IHVua25vd24pID0+IGFyZyA9PT0gZW50cnk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoZW50cnkpKSB7XG4gICAgcmV0dXJuIChhcmc6IHVua25vd24pID0+IGVudHJ5LmluZGV4T2YoYXJnKSA+IC0xO1xuICB9XG4gIC8qXG5cbiAgLy8ga2VwdCBvbiBpY2UgdW50aWwgIzEyMyBpcyBpbXBsZW1lbnRlZDpcbiAgaWYgKGVudHJ5IGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIChhcmc6IGFueSkgPT4gZW50cnkudGVzdChhcmcpO1xuICB9XG4gIGlmICh0eXBlb2YgZW50cnkgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW50cnk7XG4gIH1cblxuICAqL1xuICBpZiAoZW50cnkgPT0gbnVsbCkge1xuICAgIHJldHVybiAoKSA9PiB0cnVlO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB2YWx1ZTogJHtlbnRyeX1gKTtcbn1cblxuY29uc3QgaWRlbnRpdHkgPSAoYTogYW55KTogdHlwZW9mIGEgPT4gYTtcblxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3NMaW5rUGF0dGVybihwYXR0ZXJuOiBhbnkpOiBQcm9jZXNzZWRMaW5rUGF0dGVybiB8IG51bGwge1xuICB0cnkge1xuICAgIGNvbnN0IHVybCA9IHByb2Nlc3NUZW1wbGF0ZShwYXR0ZXJuLnVybCwgZW5jb2RlVVJJQ29tcG9uZW50KTtcbiAgICBjb25zdCB0ZXh0ID0gcHJvY2Vzc1RlbXBsYXRlKHBhdHRlcm4udGV4dCwgaWRlbnRpdHkpO1xuICAgIHJldHVybiB7XG4gICAgICBvYmplY3Q6IHBhdHRlcm4sXG4gICAgICB0eXBlOiBjcmVhdGVUZXN0RnVuY3Rpb24ocGF0dGVybi50eXBlKSxcbiAgICAgIGtleTogY3JlYXRlVGVzdEZ1bmN0aW9uKHBhdHRlcm4ua2V5KSxcbiAgICAgIHZhbHVlOiBjcmVhdGVUZXN0RnVuY3Rpb24ocGF0dGVybi52YWx1ZSksXG4gICAgICB1cmwsXG4gICAgICB0ZXh0LFxuICAgICAgcGFyYW1ldGVyczogX3VuaXEodXJsLnBhcmFtZXRlcnMuY29uY2F0KHRleHQucGFyYW1ldGVycykpLFxuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmVycm9yKGBJZ25vcmluZyBpbnZhbGlkIGxpbmsgcGF0dGVybjogJHtlcnJvcn1gLCBwYXR0ZXJuKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyYW1ldGVySW5BcnJheShuYW1lOiBzdHJpbmcsIGFycmF5PzogVHJhY2VLZXlWYWx1ZVBhaXJbXSB8IFROaWwpIHtcbiAgaWYgKGFycmF5KSB7XG4gICAgcmV0dXJuIGFycmF5LmZpbmQoKGVudHJ5KSA9PiBlbnRyeS5rZXkgPT09IG5hbWUpO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXJhbWV0ZXJJbkFuY2VzdG9yKG5hbWU6IHN0cmluZywgc3BhbjogVHJhY2VTcGFuKSB7XG4gIGxldCBjdXJyZW50U3BhbjogVHJhY2VTcGFuIHwgVE5pbCA9IHNwYW47XG4gIHdoaWxlIChjdXJyZW50U3Bhbikge1xuICAgIGNvbnN0IHJlc3VsdCA9IGdldFBhcmFtZXRlckluQXJyYXkobmFtZSwgY3VycmVudFNwYW4udGFncykgfHwgZ2V0UGFyYW1ldGVySW5BcnJheShuYW1lLCBjdXJyZW50U3Bhbi5wcm9jZXNzLnRhZ3MpO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGN1cnJlbnRTcGFuID0gZ2V0UGFyZW50KGN1cnJlbnRTcGFuKTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBjYWxsVGVtcGxhdGUodGVtcGxhdGU6IFByb2Nlc3NlZFRlbXBsYXRlLCBkYXRhOiBhbnkpIHtcbiAgcmV0dXJuIHRlbXBsYXRlLnRlbXBsYXRlKGRhdGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZVRyYWNlTGluayhsaW5rUGF0dGVybnM6IFByb2Nlc3NlZExpbmtQYXR0ZXJuW10sIHRyYWNlOiBUcmFjZSkge1xuICBjb25zdCByZXN1bHQ6IFRMaW5rc1JWID0gW107XG4gIGNvbnN0IHZhbGlkS2V5cyA9IChPYmplY3Qua2V5cyh0cmFjZSkgYXMgQXJyYXk8a2V5b2YgVHJhY2U+KS5maWx0ZXIoXG4gICAgKGtleSkgPT4gdHlwZW9mIHRyYWNlW2tleV0gPT09ICdzdHJpbmcnIHx8IHRyYWNlW2tleV0gPT09ICdudW1iZXInXG4gICk7XG5cbiAgbGlua1BhdHRlcm5zXG4gICAgPy5maWx0ZXIoKHBhdHRlcm4pID0+IHBhdHRlcm4/LnR5cGUoJ3RyYWNlcycpKVxuICAgIC5mb3JFYWNoKChwYXR0ZXJuKSA9PiB7XG4gICAgICBjb25zdCBwYXJhbWV0ZXJWYWx1ZXM6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fTtcbiAgICAgIGNvbnN0IGFsbFBhcmFtZXRlcnMgPSBwYXR0ZXJuPy5wYXJhbWV0ZXJzLmV2ZXJ5KChwYXJhbWV0ZXIpID0+IHtcbiAgICAgICAgY29uc3Qga2V5ID0gcGFyYW1ldGVyIGFzIGtleW9mIFRyYWNlO1xuICAgICAgICBpZiAodmFsaWRLZXlzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50IGlzIHNhZmUgdG8gYWNjZXNzIHRvIHRyYWNlIG9iamVjdCB1c2luZyBwYXJhbWV0ZXIgdmFyaWFibGUgYmVjYXVzZVxuICAgICAgICAgIC8vIHdlIHZhbGlkYXRlZCBwYXJhbWV0ZXIgYWdhaW5zdCB2YWxpZEtleXMsIHRoaXMgaW1wbGllcyB0aGF0IHBhcmFtZXRlciBhIGtleW9mIFRyYWNlLlxuICAgICAgICAgIHBhcmFtZXRlclZhbHVlc1twYXJhbWV0ZXJdID0gdHJhY2Vba2V5XTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChhbGxQYXJhbWV0ZXJzKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICB1cmw6IGNhbGxUZW1wbGF0ZShwYXR0ZXJuLnVybCwgcGFyYW1ldGVyVmFsdWVzKSxcbiAgICAgICAgICB0ZXh0OiBjYWxsVGVtcGxhdGUocGF0dGVybi50ZXh0LCBwYXJhbWV0ZXJWYWx1ZXMpLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZUxpbmtzKFxuICBsaW5rUGF0dGVybnM6IFByb2Nlc3NlZExpbmtQYXR0ZXJuW10sXG4gIHNwYW46IFRyYWNlU3BhbixcbiAgaXRlbXM6IFRyYWNlS2V5VmFsdWVQYWlyW10sXG4gIGl0ZW1JbmRleDogbnVtYmVyXG4pIHtcbiAgY29uc3QgaXRlbSA9IGl0ZW1zW2l0ZW1JbmRleF07XG4gIGxldCB0eXBlID0gJ2xvZ3MnO1xuICBjb25zdCBwcm9jZXNzVGFncyA9IHNwYW4ucHJvY2Vzcy50YWdzID09PSBpdGVtcztcbiAgaWYgKHByb2Nlc3NUYWdzKSB7XG4gICAgdHlwZSA9ICdwcm9jZXNzJztcbiAgfVxuICBjb25zdCBzcGFuVGFncyA9IHNwYW4udGFncyA9PT0gaXRlbXM7XG4gIGlmIChzcGFuVGFncykge1xuICAgIHR5cGUgPSAndGFncyc7XG4gIH1cbiAgY29uc3QgcmVzdWx0OiBBcnJheTx7IHVybDogc3RyaW5nOyB0ZXh0OiBzdHJpbmcgfT4gPSBbXTtcbiAgbGlua1BhdHRlcm5zLmZvckVhY2goKHBhdHRlcm4pID0+IHtcbiAgICBpZiAocGF0dGVybi50eXBlKHR5cGUpICYmIHBhdHRlcm4ua2V5KGl0ZW0ua2V5KSAmJiBwYXR0ZXJuLnZhbHVlKGl0ZW0udmFsdWUpKSB7XG4gICAgICBjb25zdCBwYXJhbWV0ZXJWYWx1ZXM6IFJlY29yZDxzdHJpbmcsIGFueT4gPSB7fTtcbiAgICAgIGNvbnN0IGFsbFBhcmFtZXRlcnMgPSBwYXR0ZXJuLnBhcmFtZXRlcnMuZXZlcnkoKHBhcmFtZXRlcikgPT4ge1xuICAgICAgICBsZXQgZW50cnkgPSBnZXRQYXJhbWV0ZXJJbkFycmF5KHBhcmFtZXRlciwgaXRlbXMpO1xuICAgICAgICBpZiAoIWVudHJ5ICYmICFwcm9jZXNzVGFncykge1xuICAgICAgICAgIC8vIGRvIG5vdCBsb29rIGluIGFuY2VzdG9ycyBmb3IgcHJvY2VzcyB0YWdzIGJlY2F1c2UgdGhlIHNhbWUgb2JqZWN0IG1heSBhcHBlYXIgaW4gZGlmZmVyZW50IHBsYWNlcyBpbiB0aGUgaGllcmFyY2h5XG4gICAgICAgICAgLy8gYW5kIHRoZSBjYWNoZSBpbiBnZXRMaW5rcyB1c2VzIHRoYXQgb2JqZWN0IGFzIGEga2V5XG4gICAgICAgICAgZW50cnkgPSBnZXRQYXJhbWV0ZXJJbkFuY2VzdG9yKHBhcmFtZXRlciwgc3Bhbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgcGFyYW1ldGVyVmFsdWVzW3BhcmFtZXRlcl0gPSBlbnRyeS52YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYFNraXBwaW5nIGxpbmsgcGF0dGVybiwgbWlzc2luZyBwYXJhbWV0ZXIgJHtwYXJhbWV0ZXJ9IGZvciBrZXkgJHtpdGVtLmtleX0gaW4gJHt0eXBlfS5gLFxuICAgICAgICAgIHBhdHRlcm4ub2JqZWN0XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGFsbFBhcmFtZXRlcnMpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgIHVybDogY2FsbFRlbXBsYXRlKHBhdHRlcm4udXJsLCBwYXJhbWV0ZXJWYWx1ZXMpLFxuICAgICAgICAgIHRleHQ6IGNhbGxUZW1wbGF0ZShwYXR0ZXJuLnRleHQsIHBhcmFtZXRlclZhbHVlcyksXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVHZXRMaW5rcyhsaW5rUGF0dGVybnM6IFByb2Nlc3NlZExpbmtQYXR0ZXJuW10sIGNhY2hlOiBXZWFrTWFwPFRyYWNlS2V5VmFsdWVQYWlyLCBUcmFjZUxpbmtbXT4pIHtcbiAgcmV0dXJuIChzcGFuOiBUcmFjZVNwYW4sIGl0ZW1zOiBUcmFjZUtleVZhbHVlUGFpcltdLCBpdGVtSW5kZXg6IG51bWJlcikgPT4ge1xuICAgIGlmIChsaW5rUGF0dGVybnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpdGVtSW5kZXhdO1xuICAgIGxldCByZXN1bHQgPSBjYWNoZS5nZXQoaXRlbSk7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgIHJlc3VsdCA9IGNvbXB1dGVMaW5rcyhsaW5rUGF0dGVybnMsIHNwYW4sIGl0ZW1zLCBpdGVtSW5kZXgpO1xuICAgICAgY2FjaGUuc2V0KGl0ZW0sIHJlc3VsdCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbmNvbnN0IHByb2Nlc3NlZExpbmtzID0gKGdldENvbmZpZ1ZhbHVlKCdsaW5rUGF0dGVybnMnKSB8fCBbXSlcbiAgLm1hcChwcm9jZXNzTGlua1BhdHRlcm4pXG4gIC5maWx0ZXIoKGxpbmspOiBsaW5rIGlzIFByb2Nlc3NlZExpbmtQYXR0ZXJuID0+IEJvb2xlYW4obGluaykpO1xuXG5leHBvcnQgY29uc3QgZ2V0VHJhY2VMaW5rczogKHRyYWNlOiBUcmFjZSB8IHVuZGVmaW5lZCkgPT4gVExpbmtzUlYgPSBtZW1vaXplKDEwKSgodHJhY2U6IFRyYWNlIHwgdW5kZWZpbmVkKSA9PiB7XG4gIGNvbnN0IHJlc3VsdDogVExpbmtzUlYgPSBbXTtcbiAgaWYgKCF0cmFjZSkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGNvbXB1dGVUcmFjZUxpbmsocHJvY2Vzc2VkTGlua3MsIHRyYWNlKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVh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