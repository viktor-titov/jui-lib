// Copyright (c) 2020 The Jaeger Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { memoize } from 'lodash';
export function _getTraceNameImpl(spans) {
  // Use a span with no references to another span in given array
  // prefering the span with the fewest references
  // using start time as a tie breaker
  var candidateSpan;
  var allIDs = new Set(spans.map(function (_ref) {
    var spanID = _ref.spanID;
    return spanID;
  }));
  var _loop = function _loop(i) {
      var hasInternalRef = spans[i].references && spans[i].references.some(function (_ref2) {
        var traceID = _ref2.traceID,
          spanID = _ref2.spanID;
        return traceID === spans[i].traceID && allIDs.has(spanID);
      });
      if (hasInternalRef) {
        return 0; // continue
      }
      if (!candidateSpan) {
        candidateSpan = spans[i];
        return 0; // continue
      }
      var thisRefLength = spans[i].references && spans[i].references.length || 0;
      var candidateRefLength = candidateSpan.references && candidateSpan.references.length || 0;
      if (thisRefLength < candidateRefLength || thisRefLength === candidateRefLength && spans[i].startTime < candidateSpan.startTime) {
        candidateSpan = spans[i];
      }
    },
    _ret;
  for (var i = 0; i < spans.length; i++) {
    _ret = _loop(i);
    if (_ret === 0) continue;
  }
  return candidateSpan ? candidateSpan.process.serviceName + ": " + candidateSpan.operationName : '';
}
export var getTraceName = memoize(_getTraceNameImpl, function (spans) {
  if (!spans.length) {
    return 0;
  }
  return spans[0].traceID;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZW1vaXplIiwiX2dldFRyYWNlTmFtZUltcGwiLCJzcGFucyIsImNhbmRpZGF0ZVNwYW4iLCJhbGxJRHMiLCJTZXQiLCJtYXAiLCJfcmVmIiwic3BhbklEIiwiX2xvb3AiLCJpIiwiaGFzSW50ZXJuYWxSZWYiLCJyZWZlcmVuY2VzIiwic29tZSIsIl9yZWYyIiwidHJhY2VJRCIsImhhcyIsInRoaXNSZWZMZW5ndGgiLCJsZW5ndGgiLCJjYW5kaWRhdGVSZWZMZW5ndGgiLCJzdGFydFRpbWUiLCJfcmV0IiwicHJvY2VzcyIsInNlcnZpY2VOYW1lIiwib3BlcmF0aW9uTmFtZSIsImdldFRyYWNlTmFtZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9tb2RlbC90cmFjZS12aWV3ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDIwIFRoZSBKYWVnZXIgQXV0aG9yc1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBtZW1vaXplIH0gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgVHJhY2VTcGFuIH0gZnJvbSAnLi4vdHlwZXMvdHJhY2UnO1xuXG5leHBvcnQgZnVuY3Rpb24gX2dldFRyYWNlTmFtZUltcGwoc3BhbnM6IFRyYWNlU3BhbltdKSB7XG4gIC8vIFVzZSBhIHNwYW4gd2l0aCBubyByZWZlcmVuY2VzIHRvIGFub3RoZXIgc3BhbiBpbiBnaXZlbiBhcnJheVxuICAvLyBwcmVmZXJpbmcgdGhlIHNwYW4gd2l0aCB0aGUgZmV3ZXN0IHJlZmVyZW5jZXNcbiAgLy8gdXNpbmcgc3RhcnQgdGltZSBhcyBhIHRpZSBicmVha2VyXG4gIGxldCBjYW5kaWRhdGVTcGFuOiBUcmFjZVNwYW4gfCB1bmRlZmluZWQ7XG4gIGNvbnN0IGFsbElEczogU2V0PHN0cmluZz4gPSBuZXcgU2V0KHNwYW5zLm1hcCgoeyBzcGFuSUQgfSkgPT4gc3BhbklEKSk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzcGFucy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGhhc0ludGVybmFsUmVmID1cbiAgICAgIHNwYW5zW2ldLnJlZmVyZW5jZXMgJiZcbiAgICAgIHNwYW5zW2ldLnJlZmVyZW5jZXMuc29tZSgoeyB0cmFjZUlELCBzcGFuSUQgfSkgPT4gdHJhY2VJRCA9PT0gc3BhbnNbaV0udHJhY2VJRCAmJiBhbGxJRHMuaGFzKHNwYW5JRCkpO1xuICAgIGlmIChoYXNJbnRlcm5hbFJlZikge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKCFjYW5kaWRhdGVTcGFuKSB7XG4gICAgICBjYW5kaWRhdGVTcGFuID0gc3BhbnNbaV07XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBjb25zdCB0aGlzUmVmTGVuZ3RoID0gKHNwYW5zW2ldLnJlZmVyZW5jZXMgJiYgc3BhbnNbaV0ucmVmZXJlbmNlcy5sZW5ndGgpIHx8IDA7XG4gICAgY29uc3QgY2FuZGlkYXRlUmVmTGVuZ3RoID0gKGNhbmRpZGF0ZVNwYW4ucmVmZXJlbmNlcyAmJiBjYW5kaWRhdGVTcGFuLnJlZmVyZW5jZXMubGVuZ3RoKSB8fCAwO1xuXG4gICAgaWYgKFxuICAgICAgdGhpc1JlZkxlbmd0aCA8IGNhbmRpZGF0ZVJlZkxlbmd0aCB8fFxuICAgICAgKHRoaXNSZWZMZW5ndGggPT09IGNhbmRpZGF0ZVJlZkxlbmd0aCAmJiBzcGFuc1tpXS5zdGFydFRpbWUgPCBjYW5kaWRhdGVTcGFuLnN0YXJ0VGltZSlcbiAgICApIHtcbiAgICAgIGNhbmRpZGF0ZVNwYW4gPSBzcGFuc1tpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNhbmRpZGF0ZVNwYW4gPyBgJHtjYW5kaWRhdGVTcGFuLnByb2Nlc3Muc2VydmljZU5hbWV9OiAke2NhbmRpZGF0ZVNwYW4ub3BlcmF0aW9uTmFtZX1gIDogJyc7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRUcmFjZU5hbWUgPSBtZW1vaXplKF9nZXRUcmFjZU5hbWVJbXBsLCAoc3BhbnM6IFRyYWNlU3BhbltdKSA9PiB7XG4gIGlmICghc3BhbnMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIHNwYW5zWzBdLnRyYWNlSUQ7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsT0FBTyxRQUFRLFFBQVE7QUFJaEMsT0FBTyxTQUFTQyxpQkFBaUJBLENBQUNDLEtBQWtCLEVBQUU7RUFDcEQ7RUFDQTtFQUNBO0VBQ0EsSUFBSUMsYUFBb0M7RUFDeEMsSUFBTUMsTUFBbUIsR0FBRyxJQUFJQyxHQUFHLENBQUNILEtBQUssQ0FBQ0ksR0FBRyxDQUFDLFVBQUFDLElBQUE7SUFBQSxJQUFHQyxNQUFNLEdBQUFELElBQUEsQ0FBTkMsTUFBTTtJQUFBLE9BQU9BLE1BQU07RUFBQSxFQUFDLENBQUM7RUFBQyxJQUFBQyxLQUFBLFlBQUFBLE1BQUFDLENBQUEsRUFFaEM7TUFDckMsSUFBTUMsY0FBYyxHQUNsQlQsS0FBSyxDQUFDUSxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxJQUNuQlYsS0FBSyxDQUFDUSxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDQyxJQUFJLENBQUMsVUFBQUMsS0FBQTtRQUFBLElBQUdDLE9BQU8sR0FBQUQsS0FBQSxDQUFQQyxPQUFPO1VBQUVQLE1BQU0sR0FBQU0sS0FBQSxDQUFOTixNQUFNO1FBQUEsT0FBT08sT0FBTyxLQUFLYixLQUFLLENBQUNRLENBQUMsQ0FBQyxDQUFDSyxPQUFPLElBQUlYLE1BQU0sQ0FBQ1ksR0FBRyxDQUFDUixNQUFNLENBQUM7TUFBQSxFQUFDO01BQ3ZHLElBQUlHLGNBQWMsRUFBRTtRQUFBO01BRXBCO01BRUEsSUFBSSxDQUFDUixhQUFhLEVBQUU7UUFDbEJBLGFBQWEsR0FBR0QsS0FBSyxDQUFDUSxDQUFDLENBQUM7UUFBQztNQUUzQjtNQUVBLElBQU1PLGFBQWEsR0FBSWYsS0FBSyxDQUFDUSxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxJQUFJVixLQUFLLENBQUNRLENBQUMsQ0FBQyxDQUFDRSxVQUFVLENBQUNNLE1BQU0sSUFBSyxDQUFDO01BQzlFLElBQU1DLGtCQUFrQixHQUFJaEIsYUFBYSxDQUFDUyxVQUFVLElBQUlULGFBQWEsQ0FBQ1MsVUFBVSxDQUFDTSxNQUFNLElBQUssQ0FBQztNQUU3RixJQUNFRCxhQUFhLEdBQUdFLGtCQUFrQixJQUNqQ0YsYUFBYSxLQUFLRSxrQkFBa0IsSUFBSWpCLEtBQUssQ0FBQ1EsQ0FBQyxDQUFDLENBQUNVLFNBQVMsR0FBR2pCLGFBQWEsQ0FBQ2lCLFNBQVUsRUFDdEY7UUFDQWpCLGFBQWEsR0FBR0QsS0FBSyxDQUFDUSxDQUFDLENBQUM7TUFDMUI7SUFDRixDQUFDO0lBQUFXLElBQUE7RUF0QkQsS0FBSyxJQUFJWCxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdSLEtBQUssQ0FBQ2dCLE1BQU0sRUFBRVIsQ0FBQyxFQUFFO0lBQUFXLElBQUEsR0FBQVosS0FBQSxDQUFBQyxDQUFBO0lBQUEsSUFBQVcsSUFBQSxRQUtqQztFQUFTO0VBa0JiLE9BQU9sQixhQUFhLEdBQU1BLGFBQWEsQ0FBQ21CLE9BQU8sQ0FBQ0MsV0FBVyxVQUFLcEIsYUFBYSxDQUFDcUIsYUFBYSxHQUFLLEVBQUU7QUFDcEc7QUFFQSxPQUFPLElBQU1DLFlBQVksR0FBR3pCLE9BQU8sQ0FBQ0MsaUJBQWlCLEVBQUUsVUFBQ0MsS0FBa0IsRUFBSztFQUM3RSxJQUFJLENBQUNBLEtBQUssQ0FBQ2dCLE1BQU0sRUFBRTtJQUNqQixPQUFPLENBQUM7RUFDVjtFQUNBLE9BQU9oQixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUNhLE9BQU87QUFDekIsQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119