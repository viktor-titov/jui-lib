// Copyright (c) 2019 The Jaeger Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import transformTraceData, { orderTags, deduplicateTags } from './transform-trace-data';
describe('orderTags()', function () {
  it('correctly orders tags', function () {
    var orderedTags = orderTags([{
      key: 'b.ip',
      value: '8.8.4.4'
    }, {
      key: 'http.Status_code',
      value: '200'
    }, {
      key: 'z.ip',
      value: '8.8.8.16'
    }, {
      key: 'a.ip',
      value: '8.8.8.8'
    }, {
      key: 'http.message',
      value: 'ok'
    }], ['z.', 'a.', 'HTTP.']);
    expect(orderedTags).toEqual([{
      key: 'z.ip',
      value: '8.8.8.16'
    }, {
      key: 'a.ip',
      value: '8.8.8.8'
    }, {
      key: 'http.message',
      value: 'ok'
    }, {
      key: 'http.Status_code',
      value: '200'
    }, {
      key: 'b.ip',
      value: '8.8.4.4'
    }]);
  });
});
describe('deduplicateTags()', function () {
  it('deduplicates tags', function () {
    var tagsInfo = deduplicateTags([{
      key: 'b.ip',
      value: '8.8.4.4'
    }, {
      key: 'b.ip',
      value: '8.8.8.8'
    }, {
      key: 'b.ip',
      value: '8.8.4.4'
    }, {
      key: 'a.ip',
      value: '8.8.8.8'
    }]);
    expect(tagsInfo.tags).toEqual([{
      key: 'b.ip',
      value: '8.8.4.4'
    }, {
      key: 'b.ip',
      value: '8.8.8.8'
    }, {
      key: 'a.ip',
      value: '8.8.8.8'
    }]);
    expect(tagsInfo.warnings).toEqual(['Duplicate tag "b.ip:8.8.4.4"']);
  });
});
describe('transformTraceData()', function () {
  var startTime = 1586160015434000;
  var duration = 34000;
  var traceID = 'f77950feed55c1ce91dd8e87896623a6';
  var rootSpanID = 'd4dcb46e95b781f5';
  var rootOperationName = 'rootOperation';
  var serviceName = 'serviceName';
  var spans = [{
    traceID: traceID,
    spanID: '41f71485ed2593e4',
    operationName: 'someOperationName',
    references: [{
      refType: 'CHILD_OF',
      traceID: traceID,
      spanID: rootSpanID
    }],
    startTime: startTime,
    duration: duration,
    tags: [],
    processID: 'p1'
  }, {
    traceID: traceID,
    spanID: '4f623fd33c213cba',
    operationName: 'anotherOperationName',
    references: [{
      refType: 'CHILD_OF',
      traceID: traceID,
      spanID: rootSpanID
    }],
    startTime: startTime + 100,
    duration: duration,
    tags: [],
    processID: 'p1'
  }];
  var rootSpanWithMissingRef = {
    traceID: traceID,
    spanID: rootSpanID,
    operationName: rootOperationName,
    references: [{
      refType: 'CHILD_OF',
      traceID: traceID,
      spanID: 'missingSpanId'
    }],
    startTime: startTime + 50,
    duration: duration,
    tags: [],
    processID: 'p1'
  };
  var rootSpanWithoutRefs = {
    traceID: traceID,
    spanID: rootSpanID,
    operationName: rootOperationName,
    startTime: startTime + 50,
    duration: duration,
    tags: [],
    processID: 'p1'
  };
  var processes = {
    p1: {
      serviceName: serviceName,
      tags: []
    }
  };
  it('should return null for trace without traceID', function () {
    var traceData = {
      traceID: undefined,
      processes: processes,
      spans: spans
    };
    expect(transformTraceData(traceData)).toEqual(null);
  });
  it('should return trace data with correct traceName based on root span with missing ref', function () {
    var traceData = {
      traceID: traceID,
      processes: processes,
      spans: [].concat(spans, [rootSpanWithMissingRef])
    };
    expect(transformTraceData(traceData).traceName).toEqual(serviceName + ": " + rootOperationName);
  });
  it('should return trace data with correct traceName based on root span without any refs', function () {
    var traceData = {
      traceID: traceID,
      processes: processes,
      spans: [].concat(spans, [rootSpanWithoutRefs])
    };
    expect(transformTraceData(traceData).traceName).toEqual(serviceName + ": " + rootOperationName);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,