import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _templateObject;
// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { css } from '@emotion/css';
import cx from 'classnames';
import copy from 'copy-to-clipboard';
import React, { useState } from 'react';
import { Button, Tooltip, useStyles2 } from '@grafana/ui';
import { jsx as _jsx } from "react/jsx-runtime";
var getStyles = function getStyles() {
  return {
    CopyIcon: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n      background-color: transparent;\n      border: none;\n      color: inherit;\n      height: 100%;\n      overflow: hidden;\n      &:focus {\n        background-color: rgba(255, 255, 255, 0.25);\n        color: inherit;\n      }\n    "])))
  };
};
export default function CopyIcon(props) {
  var styles = useStyles2(getStyles);
  var _useState = useState(false),
    hasCopied = _useState[0],
    setHasCopied = _useState[1];
  var handleClick = function handleClick() {
    copy(props.copyText);
    setHasCopied(true);
  };
  return /*#__PURE__*/_jsx(Tooltip, {
    content: hasCopied ? 'Copied' : props.tooltipTitle,
    children: /*#__PURE__*/_jsx(Button, {
      className: cx(styles.CopyIcon),
      type: "button",
      icon: props.icon,
      onClick: handleClick
    })
  });
}
CopyIcon.defaultProps = {
  icon: 'copy',
  className: undefined
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjc3MiLCJjeCIsImNvcHkiLCJSZWFjdCIsInVzZVN0YXRlIiwiQnV0dG9uIiwiVG9vbHRpcCIsInVzZVN0eWxlczIiLCJqc3giLCJfanN4IiwiZ2V0U3R5bGVzIiwiQ29weUljb24iLCJfdGVtcGxhdGVPYmplY3QiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UiLCJwcm9wcyIsInN0eWxlcyIsIl91c2VTdGF0ZSIsImhhc0NvcGllZCIsInNldEhhc0NvcGllZCIsImhhbmRsZUNsaWNrIiwiY29weVRleHQiLCJjb250ZW50IiwidG9vbHRpcFRpdGxlIiwiY2hpbGRyZW4iLCJjbGFzc05hbWUiLCJ0eXBlIiwiaWNvbiIsIm9uQ2xpY2siLCJkZWZhdWx0UHJvcHMiLCJ1bmRlZmluZWQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2NvbW1vbi9Db3B5SWNvbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE5IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgY29weSBmcm9tICdjb3B5LXRvLWNsaXBib2FyZCc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEJ1dHRvbiwgSWNvbk5hbWUsIFRvb2x0aXAsIHVzZVN0eWxlczIgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5cbmNvbnN0IGdldFN0eWxlcyA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBDb3B5SWNvbjogY3NzYFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICBib3JkZXI6IG5vbmU7XG4gICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAmOmZvY3VzIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjI1KTtcbiAgICAgICAgY29sb3I6IGluaGVyaXQ7XG4gICAgICB9XG4gICAgYCxcbiAgfTtcbn07XG5cbnR5cGUgUHJvcHNUeXBlID0ge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGNvcHlUZXh0OiBzdHJpbmc7XG4gIGljb24/OiBJY29uTmFtZTtcbiAgdG9vbHRpcFRpdGxlOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb3B5SWNvbihwcm9wczogUHJvcHNUeXBlKSB7XG4gIGNvbnN0IHN0eWxlcyA9IHVzZVN0eWxlczIoZ2V0U3R5bGVzKTtcblxuICBjb25zdCBbaGFzQ29waWVkLCBzZXRIYXNDb3BpZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGhhbmRsZUNsaWNrID0gKCkgPT4ge1xuICAgIGNvcHkocHJvcHMuY29weVRleHQpO1xuICAgIHNldEhhc0NvcGllZCh0cnVlKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxUb29sdGlwIGNvbnRlbnQ9e2hhc0NvcGllZCA/ICdDb3BpZWQnIDogcHJvcHMudG9vbHRpcFRpdGxlfT5cbiAgICAgIDxCdXR0b24gY2xhc3NOYW1lPXtjeChzdHlsZXMuQ29weUljb24pfSB0eXBlPVwiYnV0dG9uXCIgaWNvbj17cHJvcHMuaWNvbn0gb25DbGljaz17aGFuZGxlQ2xpY2t9IC8+XG4gICAgPC9Ub29sdGlwPlxuICApO1xufVxuXG5Db3B5SWNvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGljb246ICdjb3B5JyxcbiAgY2xhc3NOYW1lOiB1bmRlZmluZWQsXG59O1xuIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLEdBQUcsUUFBUSxjQUFjO0FBQ2xDLE9BQU9DLEVBQUUsTUFBTSxZQUFZO0FBQzNCLE9BQU9DLElBQUksTUFBTSxtQkFBbUI7QUFDcEMsT0FBT0MsS0FBSyxJQUFJQyxRQUFRLFFBQVEsT0FBTztBQUV2QyxTQUFTQyxNQUFNLEVBQVlDLE9BQU8sRUFBRUMsVUFBVSxRQUFRLGFBQWE7QUFBQyxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFFcEUsSUFBTUMsU0FBUyxHQUFHLFNBQVpBLFNBQVNBLENBQUEsRUFBUztFQUN0QixPQUFPO0lBQ0xDLFFBQVEsRUFBRVgsR0FBRyxDQUFBWSxlQUFBLEtBQUFBLGVBQUEsR0FBQUMsMkJBQUE7RUFXZixDQUFDO0FBQ0gsQ0FBQztBQVNELGVBQWUsU0FBU0YsUUFBUUEsQ0FBQ0csS0FBZ0IsRUFBRTtFQUNqRCxJQUFNQyxNQUFNLEdBQUdSLFVBQVUsQ0FBQ0csU0FBUyxDQUFDO0VBRXBDLElBQUFNLFNBQUEsR0FBa0NaLFFBQVEsQ0FBQyxLQUFLLENBQUM7SUFBMUNhLFNBQVMsR0FBQUQsU0FBQTtJQUFFRSxZQUFZLEdBQUFGLFNBQUE7RUFFOUIsSUFBTUcsV0FBVyxHQUFHLFNBQWRBLFdBQVdBLENBQUEsRUFBUztJQUN4QmpCLElBQUksQ0FBQ1ksS0FBSyxDQUFDTSxRQUFRLENBQUM7SUFDcEJGLFlBQVksQ0FBQyxJQUFJLENBQUM7RUFDcEIsQ0FBQztFQUVELG9CQUNFVCxJQUFBLENBQUNILE9BQU87SUFBQ2UsT0FBTyxFQUFFSixTQUFTLEdBQUcsUUFBUSxHQUFHSCxLQUFLLENBQUNRLFlBQWE7SUFBQUMsUUFBQSxlQUMxRGQsSUFBQSxDQUFDSixNQUFNO01BQUNtQixTQUFTLEVBQUV2QixFQUFFLENBQUNjLE1BQU0sQ0FBQ0osUUFBUSxDQUFFO01BQUNjLElBQUksRUFBQyxRQUFRO01BQUNDLElBQUksRUFBRVosS0FBSyxDQUFDWSxJQUFLO01BQUNDLE9BQU8sRUFBRVI7SUFBWSxDQUFFO0VBQUMsQ0FDekYsQ0FBQztBQUVkO0FBRUFSLFFBQVEsQ0FBQ2lCLFlBQVksR0FBRztFQUN0QkYsSUFBSSxFQUFFLE1BQU07RUFDWkYsU0FBUyxFQUFFSztBQUNiLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=