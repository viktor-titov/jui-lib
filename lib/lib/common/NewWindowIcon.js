import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _excluded = ["isLarge", "className"];
var _templateObject;
// Copyright (c) 2018 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { css } from '@emotion/css';
import cx from 'classnames';
import React from 'react';
import IoAndroidOpen from 'react-icons/lib/io/android-open';
import { useStyles2 } from '@grafana/ui';
import { jsx as _jsx } from "react/jsx-runtime";
export var getStyles = function getStyles() {
  return {
    NewWindowIconLarge: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n      label: NewWindowIconLarge;\n      font-size: 1.5em;\n    "])))
  };
};
export default function NewWindowIcon(props) {
  var _cx;
  var isLarge = props.isLarge,
    className = props.className,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  var styles = useStyles2(getStyles);
  var cls = cx((_cx = {}, _cx[styles.NewWindowIconLarge] = isLarge, _cx), className);
  return /*#__PURE__*/_jsx(IoAndroidOpen, _extends({
    className: cls
  }, rest));
}
NewWindowIcon.defaultProps = {
  isLarge: false
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjc3MiLCJjeCIsIlJlYWN0IiwiSW9BbmRyb2lkT3BlbiIsInVzZVN0eWxlczIiLCJqc3giLCJfanN4IiwiZ2V0U3R5bGVzIiwiTmV3V2luZG93SWNvbkxhcmdlIiwiX3RlbXBsYXRlT2JqZWN0IiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlIiwiTmV3V2luZG93SWNvbiIsInByb3BzIiwiX2N4IiwiaXNMYXJnZSIsImNsYXNzTmFtZSIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsIl9leGNsdWRlZCIsInN0eWxlcyIsImNscyIsIl9leHRlbmRzIiwiZGVmYXVsdFByb3BzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9jb21tb24vTmV3V2luZG93SWNvbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgY3ggZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IElvQW5kcm9pZE9wZW4gZnJvbSAncmVhY3QtaWNvbnMvbGliL2lvL2FuZHJvaWQtb3Blbic7XG5cbmltcG9ydCB7IHVzZVN0eWxlczIgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5cbmV4cG9ydCBjb25zdCBnZXRTdHlsZXMgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgTmV3V2luZG93SWNvbkxhcmdlOiBjc3NgXG4gICAgICBsYWJlbDogTmV3V2luZG93SWNvbkxhcmdlO1xuICAgICAgZm9udC1zaXplOiAxLjVlbTtcbiAgICBgLFxuICB9O1xufTtcblxudHlwZSBQcm9wcyA9IHtcbiAgaXNMYXJnZT86IGJvb2xlYW47XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE5ld1dpbmRvd0ljb24ocHJvcHM6IFByb3BzKSB7XG4gIGNvbnN0IHsgaXNMYXJnZSwgY2xhc3NOYW1lLCAuLi5yZXN0IH0gPSBwcm9wcztcbiAgY29uc3Qgc3R5bGVzID0gdXNlU3R5bGVzMihnZXRTdHlsZXMpO1xuICBjb25zdCBjbHMgPSBjeCh7IFtzdHlsZXMuTmV3V2luZG93SWNvbkxhcmdlXTogaXNMYXJnZSB9LCBjbGFzc05hbWUpO1xuICByZXR1cm4gPElvQW5kcm9pZE9wZW4gY2xhc3NOYW1lPXtjbHN9IHsuLi5yZXN0fSAvPjtcbn1cblxuTmV3V2luZG93SWNvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGlzTGFyZ2U6IGZhbHNlLFxufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxHQUFHLFFBQVEsY0FBYztBQUNsQyxPQUFPQyxFQUFFLE1BQU0sWUFBWTtBQUMzQixPQUFPQyxLQUFLLE1BQU0sT0FBTztBQUN6QixPQUFPQyxhQUFhLE1BQU0saUNBQWlDO0FBRTNELFNBQVNDLFVBQVUsUUFBUSxhQUFhO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBRXpDLE9BQU8sSUFBTUMsU0FBUyxHQUFHLFNBQVpBLFNBQVNBLENBQUEsRUFBUztFQUM3QixPQUFPO0lBQ0xDLGtCQUFrQixFQUFFUixHQUFHLENBQUFTLGVBQUEsS0FBQUEsZUFBQSxHQUFBQywyQkFBQTtFQUl6QixDQUFDO0FBQ0gsQ0FBQztBQU9ELGVBQWUsU0FBU0MsYUFBYUEsQ0FBQ0MsS0FBWSxFQUFFO0VBQUEsSUFBQUMsR0FBQTtFQUNsRCxJQUFRQyxPQUFPLEdBQXlCRixLQUFLLENBQXJDRSxPQUFPO0lBQUVDLFNBQVMsR0FBY0gsS0FBSyxDQUE1QkcsU0FBUztJQUFLQyxJQUFJLEdBQUFDLDZCQUFBLENBQUtMLEtBQUssRUFBQU0sU0FBQTtFQUM3QyxJQUFNQyxNQUFNLEdBQUdmLFVBQVUsQ0FBQ0csU0FBUyxDQUFDO0VBQ3BDLElBQU1hLEdBQUcsR0FBR25CLEVBQUUsRUFBQVksR0FBQSxPQUFBQSxHQUFBLENBQUlNLE1BQU0sQ0FBQ1gsa0JBQWtCLElBQUdNLE9BQU8sRUFBQUQsR0FBQSxHQUFJRSxTQUFTLENBQUM7RUFDbkUsb0JBQU9ULElBQUEsQ0FBQ0gsYUFBYSxFQUFBa0IsUUFBQTtJQUFDTixTQUFTLEVBQUVLO0VBQUksR0FBS0osSUFBSSxDQUFHLENBQUM7QUFDcEQ7QUFFQUwsYUFBYSxDQUFDVyxZQUFZLEdBQUc7RUFDM0JSLE9BQU8sRUFBRTtBQUNYLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=