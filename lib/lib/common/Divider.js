import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _templateObject, _templateObject2, _templateObject3;
import { css, cx } from '@emotion/css';
import React from 'react';
import { useStyles2 } from '@grafana/ui';
import { autoColor } from '../Theme';
import { jsx as _jsx } from "react/jsx-runtime";
var getStyles = function getStyles(theme) {
  return {
    Divider: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n      background: ", ";\n    "])), autoColor(theme, '#ddd')),
    DividerVertical: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose(["\n      label: DividerVertical;\n      display: inline-block;\n      width: 1px;\n      height: 0.9em;\n      margin: 0 8px;\n      vertical-align: middle;\n    "]))),
    DividerHorizontal: css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose(["\n      label: DividerHorizontal;\n      display: block;\n      height: 1px;\n      width: 100%;\n      margin: 24px 0;\n      clear: both;\n      vertical-align: middle;\n      position: relative;\n      top: -0.06em;\n    "])))
  };
};
export function Divider(_ref) {
  var className = _ref.className,
    style = _ref.style,
    type = _ref.type;
  var styles = useStyles2(getStyles);
  return /*#__PURE__*/_jsx("div", {
    style: style,
    className: cx(styles.Divider, type === 'horizontal' ? styles.DividerHorizontal : styles.DividerVertical, className)
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjc3MiLCJjeCIsIlJlYWN0IiwidXNlU3R5bGVzMiIsImF1dG9Db2xvciIsImpzeCIsIl9qc3giLCJnZXRTdHlsZXMiLCJ0aGVtZSIsIkRpdmlkZXIiLCJfdGVtcGxhdGVPYmplY3QiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UiLCJEaXZpZGVyVmVydGljYWwiLCJfdGVtcGxhdGVPYmplY3QyIiwiRGl2aWRlckhvcml6b250YWwiLCJfdGVtcGxhdGVPYmplY3QzIiwiX3JlZiIsImNsYXNzTmFtZSIsInN0eWxlIiwidHlwZSIsInN0eWxlcyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY29tbW9uL0RpdmlkZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNzcywgY3ggfSBmcm9tICdAZW1vdGlvbi9jc3MnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgR3JhZmFuYVRoZW1lMiB9IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHsgdXNlU3R5bGVzMiB9IGZyb20gJ0BncmFmYW5hL3VpJztcblxuaW1wb3J0IHsgYXV0b0NvbG9yIH0gZnJvbSAnLi4vVGhlbWUnO1xuXG5jb25zdCBnZXRTdHlsZXMgPSAodGhlbWU6IEdyYWZhbmFUaGVtZTIpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBEaXZpZGVyOiBjc3NgXG4gICAgICBiYWNrZ3JvdW5kOiAke2F1dG9Db2xvcih0aGVtZSwgJyNkZGQnKX07XG4gICAgYCxcblxuICAgIERpdmlkZXJWZXJ0aWNhbDogY3NzYFxuICAgICAgbGFiZWw6IERpdmlkZXJWZXJ0aWNhbDtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgIHdpZHRoOiAxcHg7XG4gICAgICBoZWlnaHQ6IDAuOWVtO1xuICAgICAgbWFyZ2luOiAwIDhweDtcbiAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgYCxcblxuICAgIERpdmlkZXJIb3Jpem9udGFsOiBjc3NgXG4gICAgICBsYWJlbDogRGl2aWRlckhvcml6b250YWw7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIGhlaWdodDogMXB4O1xuICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICBtYXJnaW46IDI0cHggMDtcbiAgICAgIGNsZWFyOiBib3RoO1xuICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHRvcDogLTAuMDZlbTtcbiAgICBgLFxuICB9O1xufTtcblxuaW50ZXJmYWNlIFByb3BzIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXM7XG4gIHR5cGU/OiAndmVydGljYWwnIHwgJ2hvcml6b250YWwnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIERpdmlkZXIoeyBjbGFzc05hbWUsIHN0eWxlLCB0eXBlIH06IFByb3BzKSB7XG4gIGNvbnN0IHN0eWxlcyA9IHVzZVN0eWxlczIoZ2V0U3R5bGVzKTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBzdHlsZT17c3R5bGV9XG4gICAgICBjbGFzc05hbWU9e2N4KFxuICAgICAgICBzdHlsZXMuRGl2aWRlcixcbiAgICAgICAgdHlwZSA9PT0gJ2hvcml6b250YWwnID8gc3R5bGVzLkRpdmlkZXJIb3Jpem9udGFsIDogc3R5bGVzLkRpdmlkZXJWZXJ0aWNhbCxcbiAgICAgICAgY2xhc3NOYW1lXG4gICAgICApfVxuICAgIC8+XG4gICk7XG59XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsU0FBU0EsR0FBRyxFQUFFQyxFQUFFLFFBQVEsY0FBYztBQUN0QyxPQUFPQyxLQUFLLE1BQU0sT0FBTztBQUd6QixTQUFTQyxVQUFVLFFBQVEsYUFBYTtBQUV4QyxTQUFTQyxTQUFTLFFBQVEsVUFBVTtBQUFDLFNBQUFDLEdBQUEsSUFBQUMsSUFBQTtBQUVyQyxJQUFNQyxTQUFTLEdBQUcsU0FBWkEsU0FBU0EsQ0FBSUMsS0FBb0IsRUFBSztFQUMxQyxPQUFPO0lBQ0xDLE9BQU8sRUFBRVQsR0FBRyxDQUFBVSxlQUFBLEtBQUFBLGVBQUEsR0FBQUMsMkJBQUEsd0NBQ0lQLFNBQVMsQ0FBQ0ksS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUN2QztJQUVESSxlQUFlLEVBQUVaLEdBQUcsQ0FBQWEsZ0JBQUEsS0FBQUEsZ0JBQUEsR0FBQUYsMkJBQUEseUtBT25CO0lBRURHLGlCQUFpQixFQUFFZCxHQUFHLENBQUFlLGdCQUFBLEtBQUFBLGdCQUFBLEdBQUFKLDJCQUFBO0VBV3hCLENBQUM7QUFDSCxDQUFDO0FBT0QsT0FBTyxTQUFTRixPQUFPQSxDQUFBTyxJQUFBLEVBQW9DO0VBQUEsSUFBakNDLFNBQVMsR0FBQUQsSUFBQSxDQUFUQyxTQUFTO0lBQUVDLEtBQUssR0FBQUYsSUFBQSxDQUFMRSxLQUFLO0lBQUVDLElBQUksR0FBQUgsSUFBQSxDQUFKRyxJQUFJO0VBQzlDLElBQU1DLE1BQU0sR0FBR2pCLFVBQVUsQ0FBQ0ksU0FBUyxDQUFDO0VBQ3BDLG9CQUNFRCxJQUFBO0lBQ0VZLEtBQUssRUFBRUEsS0FBTTtJQUNiRCxTQUFTLEVBQUVoQixFQUFFLENBQ1htQixNQUFNLENBQUNYLE9BQU8sRUFDZFUsSUFBSSxLQUFLLFlBQVksR0FBR0MsTUFBTSxDQUFDTixpQkFBaUIsR0FBR00sTUFBTSxDQUFDUixlQUFlLEVBQ3pFSyxTQUNGO0VBQUUsQ0FDSCxDQUFDO0FBRU4iLCJpZ25vcmVMaXN0IjpbXX0=