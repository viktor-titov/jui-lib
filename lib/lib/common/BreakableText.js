import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _templateObject;
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { css } from '@emotion/css';
import * as React from 'react';
import { useStyles2 } from '@grafana/ui';
import { jsx as _jsx } from "react/jsx-runtime";
var getStyles = function getStyles() {
  return {
    BreakableText: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n      label: BreakableText;\n      display: inline-block;\n      white-space: pre;\n    "])))
  };
};
var WORD_RX = /\W*\w+\W*/g;
// TODO typescript doesn't understand text or null as react nodes
// https://github.com/Microsoft/TypeScript/issues/21699
export default function BreakableText(props) /* React.ReactNode /* React.ReactElement | React.ReactElement[] \*\/ */{
  var className = props.className,
    text = props.text,
    _props$wordRegexp = props.wordRegexp,
    wordRegexp = _props$wordRegexp === void 0 ? WORD_RX : _props$wordRegexp;
  var styles = useStyles2(getStyles);
  if (!text) {
    return typeof text === 'string' ? text : null;
  }
  var spans = [];
  wordRegexp.exec('');
  // if the given text has no words, set the first match to the entire text
  var match = wordRegexp.exec(text) || [text];
  while (match) {
    spans.push( /*#__PURE__*/_jsx("span", {
      className: className || styles.BreakableText,
      children: match[0]
    }, text + "-" + spans.length));
    match = wordRegexp.exec(text);
  }
  return spans;
}
BreakableText.defaultProps = {
  wordRegexp: WORD_RX
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjc3MiLCJSZWFjdCIsInVzZVN0eWxlczIiLCJqc3giLCJfanN4IiwiZ2V0U3R5bGVzIiwiQnJlYWthYmxlVGV4dCIsIl90ZW1wbGF0ZU9iamVjdCIsIl90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZSIsIldPUkRfUlgiLCJwcm9wcyIsImNsYXNzTmFtZSIsInRleHQiLCJfcHJvcHMkd29yZFJlZ2V4cCIsIndvcmRSZWdleHAiLCJzdHlsZXMiLCJzcGFucyIsImV4ZWMiLCJtYXRjaCIsInB1c2giLCJjaGlsZHJlbiIsImxlbmd0aCIsImRlZmF1bHRQcm9wcyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY29tbW9uL0JyZWFrYWJsZVRleHQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jc3MnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyB1c2VTdHlsZXMyIH0gZnJvbSAnQGdyYWZhbmEvdWknO1xuXG5jb25zdCBnZXRTdHlsZXMgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgQnJlYWthYmxlVGV4dDogY3NzYFxuICAgICAgbGFiZWw6IEJyZWFrYWJsZVRleHQ7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICB3aGl0ZS1zcGFjZTogcHJlO1xuICAgIGAsXG4gIH07XG59O1xuXG5jb25zdCBXT1JEX1JYID0gL1xcVypcXHcrXFxXKi9nO1xuXG50eXBlIFByb3BzID0ge1xuICB0ZXh0OiBzdHJpbmc7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgd29yZFJlZ2V4cD86IFJlZ0V4cDtcbn07XG5cbi8vIFRPRE8gdHlwZXNjcmlwdCBkb2Vzbid0IHVuZGVyc3RhbmQgdGV4dCBvciBudWxsIGFzIHJlYWN0IG5vZGVzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzIxNjk5XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCcmVha2FibGVUZXh0KFxuICBwcm9wczogUHJvcHNcbik6IGFueSAvKiBSZWFjdC5SZWFjdE5vZGUgLyogUmVhY3QuUmVhY3RFbGVtZW50IHwgUmVhY3QuUmVhY3RFbGVtZW50W10gXFwqXFwvICovIHtcbiAgY29uc3QgeyBjbGFzc05hbWUsIHRleHQsIHdvcmRSZWdleHAgPSBXT1JEX1JYIH0gPSBwcm9wcztcbiAgY29uc3Qgc3R5bGVzID0gdXNlU3R5bGVzMihnZXRTdHlsZXMpO1xuICBpZiAoIXRleHQpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRleHQgPT09ICdzdHJpbmcnID8gdGV4dCA6IG51bGw7XG4gIH1cbiAgY29uc3Qgc3BhbnMgPSBbXTtcbiAgd29yZFJlZ2V4cC5leGVjKCcnKTtcbiAgLy8gaWYgdGhlIGdpdmVuIHRleHQgaGFzIG5vIHdvcmRzLCBzZXQgdGhlIGZpcnN0IG1hdGNoIHRvIHRoZSBlbnRpcmUgdGV4dFxuICBsZXQgbWF0Y2g6IFJlZ0V4cEV4ZWNBcnJheSB8IHN0cmluZ1tdIHwgbnVsbCA9IHdvcmRSZWdleHAuZXhlYyh0ZXh0KSB8fCBbdGV4dF07XG4gIHdoaWxlIChtYXRjaCkge1xuICAgIHNwYW5zLnB1c2goXG4gICAgICA8c3BhbiBrZXk9e2Ake3RleHR9LSR7c3BhbnMubGVuZ3RofWB9IGNsYXNzTmFtZT17Y2xhc3NOYW1lIHx8IHN0eWxlcy5CcmVha2FibGVUZXh0fT5cbiAgICAgICAge21hdGNoWzBdfVxuICAgICAgPC9zcGFuPlxuICAgICk7XG4gICAgbWF0Y2ggPSB3b3JkUmVnZXhwLmV4ZWModGV4dCk7XG4gIH1cbiAgcmV0dXJuIHNwYW5zO1xufVxuXG5CcmVha2FibGVUZXh0LmRlZmF1bHRQcm9wcyA9IHtcbiAgd29yZFJlZ2V4cDogV09SRF9SWCxcbn07XG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsR0FBRyxRQUFRLGNBQWM7QUFDbEMsT0FBTyxLQUFLQyxLQUFLLE1BQU0sT0FBTztBQUU5QixTQUFTQyxVQUFVLFFBQVEsYUFBYTtBQUFDLFNBQUFDLEdBQUEsSUFBQUMsSUFBQTtBQUV6QyxJQUFNQyxTQUFTLEdBQUcsU0FBWkEsU0FBU0EsQ0FBQSxFQUFTO0VBQ3RCLE9BQU87SUFDTEMsYUFBYSxFQUFFTixHQUFHLENBQUFPLGVBQUEsS0FBQUEsZUFBQSxHQUFBQywyQkFBQTtFQUtwQixDQUFDO0FBQ0gsQ0FBQztBQUVELElBQU1DLE9BQU8sR0FBRyxZQUFZO0FBUTVCO0FBQ0E7QUFDQSxlQUFlLFNBQVNILGFBQWFBLENBQ25DSSxLQUFZLEVBQ1AsdUVBQXdFO0VBQzdFLElBQVFDLFNBQVMsR0FBaUNELEtBQUssQ0FBL0NDLFNBQVM7SUFBRUMsSUFBSSxHQUEyQkYsS0FBSyxDQUFwQ0UsSUFBSTtJQUFBQyxpQkFBQSxHQUEyQkgsS0FBSyxDQUE5QkksVUFBVTtJQUFWQSxVQUFVLEdBQUFELGlCQUFBLGNBQUdKLE9BQU8sR0FBQUksaUJBQUE7RUFDN0MsSUFBTUUsTUFBTSxHQUFHYixVQUFVLENBQUNHLFNBQVMsQ0FBQztFQUNwQyxJQUFJLENBQUNPLElBQUksRUFBRTtJQUNULE9BQU8sT0FBT0EsSUFBSSxLQUFLLFFBQVEsR0FBR0EsSUFBSSxHQUFHLElBQUk7RUFDL0M7RUFDQSxJQUFNSSxLQUFLLEdBQUcsRUFBRTtFQUNoQkYsVUFBVSxDQUFDRyxJQUFJLENBQUMsRUFBRSxDQUFDO0VBQ25CO0VBQ0EsSUFBSUMsS0FBd0MsR0FBR0osVUFBVSxDQUFDRyxJQUFJLENBQUNMLElBQUksQ0FBQyxJQUFJLENBQUNBLElBQUksQ0FBQztFQUM5RSxPQUFPTSxLQUFLLEVBQUU7SUFDWkYsS0FBSyxDQUFDRyxJQUFJLGVBQ1JmLElBQUE7TUFBc0NPLFNBQVMsRUFBRUEsU0FBUyxJQUFJSSxNQUFNLENBQUNULGFBQWM7TUFBQWMsUUFBQSxFQUNoRkYsS0FBSyxDQUFDLENBQUM7SUFBQyxHQURHTixJQUFJLFNBQUlJLEtBQUssQ0FBQ0ssTUFFdEIsQ0FDUixDQUFDO0lBQ0RILEtBQUssR0FBR0osVUFBVSxDQUFDRyxJQUFJLENBQUNMLElBQUksQ0FBQztFQUMvQjtFQUNBLE9BQU9JLEtBQUs7QUFDZDtBQUVBVixhQUFhLENBQUNnQixZQUFZLEdBQUc7RUFDM0JSLFVBQVUsRUFBRUw7QUFDZCxDQUFDIiwiaWdub3JlTGlzdCI6W119