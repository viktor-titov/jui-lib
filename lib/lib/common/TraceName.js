import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _templateObject;
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { css } from '@emotion/css';
import cx from 'classnames';
import * as React from 'react';
import { useStyles2 } from '@grafana/ui';
import { FALLBACK_TRACE_NAME } from '../constants';
import BreakableText from './BreakableText';
import { jsx as _jsx } from "react/jsx-runtime";
var getStyles = function getStyles(theme) {
  return {
    TraceName: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n      label: TraceName;\n      font-size: ", ";\n    "])), theme.typography.size.lg)
  };
};
export default function TraceName(props) {
  var className = props.className,
    traceName = props.traceName;
  var styles = useStyles2(getStyles);
  var text = String(traceName || FALLBACK_TRACE_NAME);
  var title = /*#__PURE__*/_jsx(BreakableText, {
    text: text
  });
  return /*#__PURE__*/_jsx("span", {
    className: cx(styles.TraceName, className),
    children: title
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjc3MiLCJjeCIsIlJlYWN0IiwidXNlU3R5bGVzMiIsIkZBTExCQUNLX1RSQUNFX05BTUUiLCJCcmVha2FibGVUZXh0IiwianN4IiwiX2pzeCIsImdldFN0eWxlcyIsInRoZW1lIiwiVHJhY2VOYW1lIiwiX3RlbXBsYXRlT2JqZWN0IiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlIiwidHlwb2dyYXBoeSIsInNpemUiLCJsZyIsInByb3BzIiwiY2xhc3NOYW1lIiwidHJhY2VOYW1lIiwic3R5bGVzIiwidGV4dCIsIlN0cmluZyIsInRpdGxlIiwiY2hpbGRyZW4iXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2NvbW1vbi9UcmFjZU5hbWUudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9jc3MnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBHcmFmYW5hVGhlbWUyIH0gZnJvbSAnQGdyYWZhbmEvZGF0YSc7XG5pbXBvcnQgeyB1c2VTdHlsZXMyIH0gZnJvbSAnQGdyYWZhbmEvdWknO1xuXG5pbXBvcnQgeyBGQUxMQkFDS19UUkFDRV9OQU1FIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IFROaWwgfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCBCcmVha2FibGVUZXh0IGZyb20gJy4vQnJlYWthYmxlVGV4dCc7XG5cbmNvbnN0IGdldFN0eWxlcyA9ICh0aGVtZTogR3JhZmFuYVRoZW1lMikgPT4ge1xuICByZXR1cm4ge1xuICAgIFRyYWNlTmFtZTogY3NzYFxuICAgICAgbGFiZWw6IFRyYWNlTmFtZTtcbiAgICAgIGZvbnQtc2l6ZTogJHt0aGVtZS50eXBvZ3JhcGh5LnNpemUubGd9O1xuICAgIGAsXG4gIH07XG59O1xuXG50eXBlIFByb3BzID0ge1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIHRyYWNlTmFtZT86IHN0cmluZyB8IFROaWw7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUcmFjZU5hbWUocHJvcHM6IFByb3BzKSB7XG4gIGNvbnN0IHsgY2xhc3NOYW1lLCB0cmFjZU5hbWUgfSA9IHByb3BzO1xuICBjb25zdCBzdHlsZXMgPSB1c2VTdHlsZXMyKGdldFN0eWxlcyk7XG4gIGNvbnN0IHRleHQgPSBTdHJpbmcodHJhY2VOYW1lIHx8IEZBTExCQUNLX1RSQUNFX05BTUUpO1xuICBjb25zdCB0aXRsZSA9IDxCcmVha2FibGVUZXh0IHRleHQ9e3RleHR9IC8+O1xuICByZXR1cm4gPHNwYW4gY2xhc3NOYW1lPXtjeChzdHlsZXMuVHJhY2VOYW1lLCBjbGFzc05hbWUpfT57dGl0bGV9PC9zcGFuPjtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxHQUFHLFFBQVEsY0FBYztBQUNsQyxPQUFPQyxFQUFFLE1BQU0sWUFBWTtBQUMzQixPQUFPLEtBQUtDLEtBQUssTUFBTSxPQUFPO0FBRzlCLFNBQVNDLFVBQVUsUUFBUSxhQUFhO0FBRXhDLFNBQVNDLG1CQUFtQixRQUFRLGNBQWM7QUFHbEQsT0FBT0MsYUFBYSxNQUFNLGlCQUFpQjtBQUFDLFNBQUFDLEdBQUEsSUFBQUMsSUFBQTtBQUU1QyxJQUFNQyxTQUFTLEdBQUcsU0FBWkEsU0FBU0EsQ0FBSUMsS0FBb0IsRUFBSztFQUMxQyxPQUFPO0lBQ0xDLFNBQVMsRUFBRVYsR0FBRyxDQUFBVyxlQUFBLEtBQUFBLGVBQUEsR0FBQUMsMkJBQUEsZ0VBRUNILEtBQUssQ0FBQ0ksVUFBVSxDQUFDQyxJQUFJLENBQUNDLEVBQUU7RUFFekMsQ0FBQztBQUNILENBQUM7QUFPRCxlQUFlLFNBQVNMLFNBQVNBLENBQUNNLEtBQVksRUFBRTtFQUM5QyxJQUFRQyxTQUFTLEdBQWdCRCxLQUFLLENBQTlCQyxTQUFTO0lBQUVDLFNBQVMsR0FBS0YsS0FBSyxDQUFuQkUsU0FBUztFQUM1QixJQUFNQyxNQUFNLEdBQUdoQixVQUFVLENBQUNLLFNBQVMsQ0FBQztFQUNwQyxJQUFNWSxJQUFJLEdBQUdDLE1BQU0sQ0FBQ0gsU0FBUyxJQUFJZCxtQkFBbUIsQ0FBQztFQUNyRCxJQUFNa0IsS0FBSyxnQkFBR2YsSUFBQSxDQUFDRixhQUFhO0lBQUNlLElBQUksRUFBRUE7RUFBSyxDQUFFLENBQUM7RUFDM0Msb0JBQU9iLElBQUE7SUFBTVUsU0FBUyxFQUFFaEIsRUFBRSxDQUFDa0IsTUFBTSxDQUFDVCxTQUFTLEVBQUVPLFNBQVMsQ0FBRTtJQUFBTSxRQUFBLEVBQUVEO0VBQUssQ0FBTyxDQUFDO0FBQ3pFIiwiaWdub3JlTGlzdCI6W119