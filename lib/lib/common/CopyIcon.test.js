import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { render, screen } from '@testing-library/react';
import * as copy from 'copy-to-clipboard';
import React from 'react';
import CopyIcon from './CopyIcon';
import { jsx as _jsx } from "react/jsx-runtime";
jest.mock('copy-to-clipboard');
describe('<CopyIcon />', function () {
  var props = {
    className: 'classNameValue',
    copyText: 'copyTextValue',
    tooltipTitle: 'tooltipTitleValue'
  };
  var copySpy;
  beforeAll(function () {
    copySpy = jest.spyOn(copy, 'default');
  });
  beforeEach(function () {
    copySpy.mockReset();
  });
  it('renders as expected', function () {
    expect(function () {
      return render( /*#__PURE__*/_jsx(CopyIcon, _extends({}, props)));
    }).not.toThrow();
  });
  it('copies when clicked', function () {
    render( /*#__PURE__*/_jsx(CopyIcon, _extends({}, props)));
    var button = screen.getByRole('button');
    button.click();
    expect(copySpy).toHaveBeenCalledWith(props.copyText);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZW5kZXIiLCJzY3JlZW4iLCJjb3B5IiwiUmVhY3QiLCJDb3B5SWNvbiIsImpzeCIsIl9qc3giLCJqZXN0IiwibW9jayIsImRlc2NyaWJlIiwicHJvcHMiLCJjbGFzc05hbWUiLCJjb3B5VGV4dCIsInRvb2x0aXBUaXRsZSIsImNvcHlTcHkiLCJiZWZvcmVBbGwiLCJzcHlPbiIsImJlZm9yZUVhY2giLCJtb2NrUmVzZXQiLCJpdCIsImV4cGVjdCIsIl9leHRlbmRzIiwibm90IiwidG9UaHJvdyIsImJ1dHRvbiIsImdldEJ5Um9sZSIsImNsaWNrIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2NvbW1vbi9Db3B5SWNvbi50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTkgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4gfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCAqIGFzIGNvcHkgZnJvbSAnY29weS10by1jbGlwYm9hcmQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IENvcHlJY29uIGZyb20gJy4vQ29weUljb24nO1xuXG5qZXN0Lm1vY2soJ2NvcHktdG8tY2xpcGJvYXJkJyk7XG5cbmRlc2NyaWJlKCc8Q29weUljb24gLz4nLCAoKSA9PiB7XG4gIGNvbnN0IHByb3BzID0ge1xuICAgIGNsYXNzTmFtZTogJ2NsYXNzTmFtZVZhbHVlJyxcbiAgICBjb3B5VGV4dDogJ2NvcHlUZXh0VmFsdWUnLFxuICAgIHRvb2x0aXBUaXRsZTogJ3Rvb2x0aXBUaXRsZVZhbHVlJyxcbiAgfTtcbiAgbGV0IGNvcHlTcHk6IGplc3QuU3B5SW5zdGFuY2U7XG5cbiAgYmVmb3JlQWxsKCgpID0+IHtcbiAgICBjb3B5U3B5ID0gamVzdC5zcHlPbihjb3B5LCAnZGVmYXVsdCcpO1xuICB9KTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBjb3B5U3B5Lm1vY2tSZXNldCgpO1xuICB9KTtcblxuICBpdCgncmVuZGVycyBhcyBleHBlY3RlZCcsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4gcmVuZGVyKDxDb3B5SWNvbiB7Li4ucHJvcHN9IC8+KSkubm90LnRvVGhyb3coKTtcbiAgfSk7XG5cbiAgaXQoJ2NvcGllcyB3aGVuIGNsaWNrZWQnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxDb3B5SWNvbiB7Li4ucHJvcHN9IC8+KTtcblxuICAgIGNvbnN0IGJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicpO1xuICAgIGJ1dHRvbi5jbGljaygpO1xuXG4gICAgZXhwZWN0KGNvcHlTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHByb3BzLmNvcHlUZXh0KTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLE1BQU0sRUFBRUMsTUFBTSxRQUFRLHdCQUF3QjtBQUN2RCxPQUFPLEtBQUtDLElBQUksTUFBTSxtQkFBbUI7QUFDekMsT0FBT0MsS0FBSyxNQUFNLE9BQU87QUFFekIsT0FBT0MsUUFBUSxNQUFNLFlBQVk7QUFBQyxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFFbENDLElBQUksQ0FBQ0MsSUFBSSxDQUFDLG1CQUFtQixDQUFDO0FBRTlCQyxRQUFRLENBQUMsY0FBYyxFQUFFLFlBQU07RUFDN0IsSUFBTUMsS0FBSyxHQUFHO0lBQ1pDLFNBQVMsRUFBRSxnQkFBZ0I7SUFDM0JDLFFBQVEsRUFBRSxlQUFlO0lBQ3pCQyxZQUFZLEVBQUU7RUFDaEIsQ0FBQztFQUNELElBQUlDLE9BQXlCO0VBRTdCQyxTQUFTLENBQUMsWUFBTTtJQUNkRCxPQUFPLEdBQUdQLElBQUksQ0FBQ1MsS0FBSyxDQUFDZCxJQUFJLEVBQUUsU0FBUyxDQUFDO0VBQ3ZDLENBQUMsQ0FBQztFQUVGZSxVQUFVLENBQUMsWUFBTTtJQUNmSCxPQUFPLENBQUNJLFNBQVMsQ0FBQyxDQUFDO0VBQ3JCLENBQUMsQ0FBQztFQUVGQyxFQUFFLENBQUMscUJBQXFCLEVBQUUsWUFBTTtJQUM5QkMsTUFBTSxDQUFDO01BQUEsT0FBTXBCLE1BQU0sZUFBQ00sSUFBQSxDQUFDRixRQUFRLEVBQUFpQixRQUFBLEtBQUtYLEtBQUssQ0FBRyxDQUFDLENBQUM7SUFBQSxFQUFDLENBQUNZLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLENBQUM7RUFDN0QsQ0FBQyxDQUFDO0VBRUZKLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxZQUFNO0lBQzlCbkIsTUFBTSxlQUFDTSxJQUFBLENBQUNGLFFBQVEsRUFBQWlCLFFBQUEsS0FBS1gsS0FBSyxDQUFHLENBQUMsQ0FBQztJQUUvQixJQUFNYyxNQUFNLEdBQUd2QixNQUFNLENBQUN3QixTQUFTLENBQUMsUUFBUSxDQUFDO0lBQ3pDRCxNQUFNLENBQUNFLEtBQUssQ0FBQyxDQUFDO0lBRWROLE1BQU0sQ0FBQ04sT0FBTyxDQUFDLENBQUNhLG9CQUFvQixDQUFDakIsS0FBSyxDQUFDRSxRQUFRLENBQUM7RUFDdEQsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119