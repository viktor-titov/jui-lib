import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { createSelector, createStructuredSelector } from 'reselect';
import TreeNode from '../utils/TreeNode';
import { formatMillisecondTime, formatSecondTime, ONE_SECOND } from '../utils/date';
import { numberSortComparator } from '../utils/sort';
import { getProcessServiceName } from './process';
import { getSpanId, getSpanName, getSpanServiceName, getSpanTimestamp, getSpanDuration, getSpanProcessId } from './span';
export var getTraceId = function getTraceId(trace) {
  return trace.traceID;
};
export var getTraceSpans = function getTraceSpans(trace) {
  return trace.spans;
};
var getTraceProcesses = function getTraceProcesses(trace) {
  return trace.processes;
};
var getSpanWithProcess = createSelector(function (state) {
  return state.span;
}, function (state) {
  return state.processes;
}, function (span, processes) {
  return _extends({}, span, {
    process: processes[getSpanProcessId(span)]
  });
});
export var getTraceSpansAsMap = createSelector(getTraceSpans, function (spans) {
  return spans.reduce(function (map, span) {
    return map.set(getSpanId(span), span);
  }, new Map());
});
export var TREE_ROOT_ID = '__root__';

/**
 * Build a tree of { value: spanID, children } items derived from the
 * `span.references` information. The tree represents the grouping of parent /
 * child relationships. The root-most node is nominal in that
 * `.value === TREE_ROOT_ID`. This is done because a root span (the main trace
 * span) is not always included with the trace data. Thus, there can be
 * multiple top-level spans, and the root node acts as their common parent.
 *
 * The children are sorted by `span.startTime` after the tree is built.
 *
 * @param  {Trace} trace The trace to build the tree of spanIDs.
 * @return {TreeNode}    A tree of spanIDs derived from the relationships
 *                       between spans in the trace.
 */
export function getTraceSpanIdsAsTree(trace) {
  var nodesById = new Map(trace.spans.map(function (span) {
    return [span.spanID, new TreeNode(span.spanID)];
  }));
  var spansById = new Map(trace.spans.map(function (span) {
    return [span.spanID, span];
  }));
  var root = new TreeNode(TREE_ROOT_ID);
  trace.spans.forEach(function (span) {
    var node = nodesById.get(span.spanID);
    if (Array.isArray(span.references) && span.references.length) {
      var _span$references$ = span.references[0],
        refType = _span$references$.refType,
        parentID = _span$references$.spanID;
      if (refType === 'CHILD_OF' || refType === 'FOLLOWS_FROM') {
        var _parent$children;
        var parent = nodesById.get(parentID) || root;
        (_parent$children = parent.children) == null || _parent$children.push(node);
      } else {
        throw new Error("Unrecognized ref type: " + refType);
      }
    } else {
      root.children.push(node);
    }
  });
  var comparator = function comparator(nodeA, nodeB) {
    var a = nodeA != null && nodeA.value ? spansById.get(nodeA.value.toString()) : undefined;
    var b = nodeB != null && nodeB.value ? spansById.get(nodeB.value.toString()) : undefined;
    return +((a == null ? void 0 : a.startTime) > (b == null ? void 0 : b.startTime)) || +((a == null ? void 0 : a.startTime) === (b == null ? void 0 : b.startTime)) - 1;
  };
  trace.spans.forEach(function (span) {
    var node = nodesById.get(span.spanID);
    if (node.children.length > 1) {
      node == null || node.children.sort(comparator);
    }
  });
  root.children.sort(comparator);
  return root;
}

// attach "process" as an object to each span.
export var hydrateSpansWithProcesses = function hydrateSpansWithProcesses(trace) {
  var spans = getTraceSpans(trace);
  var processes = getTraceProcesses(trace);
  return _extends({}, trace, {
    spans: spans.map(function (span) {
      return getSpanWithProcess({
        span: span,
        processes: processes
      });
    })
  });
};
export var getTraceSpanCount = createSelector(getTraceSpans, function (spans) {
  return spans.length;
});
export var getTraceTimestamp = createSelector(getTraceSpans, function (spans) {
  return spans.reduce(function (prevTimestamp, span) {
    return prevTimestamp ? Math.min(prevTimestamp, getSpanTimestamp(span)) : getSpanTimestamp(span);
  }, 0);
});
export var getTraceDuration = createSelector(getTraceSpans, getTraceTimestamp, function (spans, timestamp) {
  return spans.reduce(function (prevDuration, span) {
    return prevDuration ? Math.max(getSpanTimestamp(span) - timestamp + getSpanDuration(span), prevDuration) : getSpanDuration(span);
  }, 0);
});
export var getTraceEndTimestamp = createSelector(getTraceTimestamp, getTraceDuration, function (timestamp, duration) {
  return timestamp + duration;
});
export var getParentSpan = createSelector(getTraceSpanIdsAsTree, getTraceSpansAsMap, function (tree, spanMap) {
  return tree.children.map(function (node) {
    return spanMap.get(node.value);
  }).sort(function (spanA, spanB) {
    return numberSortComparator(getSpanTimestamp(spanA), getSpanTimestamp(spanB));
  })[0];
});
export var getTraceDepth = createSelector(getTraceSpanIdsAsTree, function (spanTree) {
  return spanTree.depth - 1;
});
export var getSpanDepthForTrace = createSelector(createSelector(function (state) {
  return state.trace;
}, getTraceSpanIdsAsTree), createSelector(function (state) {
  return state.span;
}, getSpanId), function (node, spanID) {
  return node.getPath(spanID).length - 1;
});
export var getTraceServices = createSelector(getTraceProcesses, function (processes) {
  return Object.keys(processes).reduce(function (services, processID) {
    return services.add(getProcessServiceName(processes[processID]));
  }, new Set());
});
export var getTraceServiceCount = createSelector(getTraceServices, function (services) {
  return services.size;
});

// establish constants to determine how math should be handled
// for nanosecond-to-millisecond conversions.
export var DURATION_FORMATTERS = {
  ms: formatMillisecondTime,
  s: formatSecondTime
};
var getDurationFormatterForTrace = createSelector(getTraceDuration, function (totalDuration) {
  return totalDuration >= ONE_SECOND ? DURATION_FORMATTERS.s : DURATION_FORMATTERS.ms;
});
export var formatDurationForUnit = createSelector(function (_ref) {
  var duration = _ref.duration;
  return duration;
}, function (_ref2) {
  var unit = _ref2.unit;
  return DURATION_FORMATTERS[unit];
}, function (duration, formatter) {
  return formatter(duration);
});
export var formatDurationForTrace = createSelector(function (_ref3) {
  var duration = _ref3.duration;
  return duration;
}, createSelector(function (_ref4) {
  var trace = _ref4.trace;
  return trace;
}, getDurationFormatterForTrace), function (duration, formatter) {
  return formatter(duration);
});
export var getSortedSpans = createSelector(function (_ref5) {
  var trace = _ref5.trace;
  return trace;
}, function (_ref6) {
  var spans = _ref6.spans;
  return spans;
}, function (_ref7) {
  var sort = _ref7.sort;
  return sort;
}, function (trace, spans, _ref8) {
  var dir = _ref8.dir,
    comparator = _ref8.comparator,
    selector = _ref8.selector;
  return [].concat(spans).sort(function (spanA, spanB) {
    return dir * comparator(selector(spanA, trace), selector(spanB, trace));
  });
});
var getTraceSpansByHierarchyPosition = createSelector(getTraceSpanIdsAsTree, function (tree) {
  var hierarchyPositionMap = new Map();
  var i = 0;
  tree.walk(function (spanID) {
    return hierarchyPositionMap.set(spanID, i++);
  });
  return hierarchyPositionMap;
});
export var getTreeSizeForTraceSpan = createSelector(createSelector(function (state) {
  return state.trace;
}, getTraceSpanIdsAsTree), createSelector(function (state) {
  return state.span;
}, getSpanId), function (tree, spanID) {
  var node = tree.find(spanID);
  if (!node) {
    return -1;
  }
  return node.size - 1;
});
export var getSpanHierarchySortPositionForTrace = createSelector(createSelector(function (_ref9) {
  var trace = _ref9.trace;
  return trace;
}, getTraceSpansByHierarchyPosition), function (_ref10) {
  var span = _ref10.span;
  return span;
}, function (hierarchyPositionMap, span) {
  return hierarchyPositionMap.get(getSpanId(span));
});
export var getTraceName = createSelector(createSelector(createSelector(hydrateSpansWithProcesses, getParentSpan), createStructuredSelector({
  name: getSpanName,
  serviceName: getSpanServiceName
})), function (_ref11) {
  var name = _ref11.name,
    serviceName = _ref11.serviceName;
  return serviceName + ": " + name;
});
export var omitCollapsedSpans = createSelector(function (_ref12) {
  var spans = _ref12.spans;
  return spans;
}, createSelector(function (_ref13) {
  var trace = _ref13.trace;
  return trace;
}, getTraceSpanIdsAsTree), function (_ref14) {
  var collapsed = _ref14.collapsed;
  return collapsed;
}, function (spans, tree, collapse) {
  var hiddenSpanIds = collapse.reduce(function (result, collapsedSpanId) {
    tree.find(collapsedSpanId).walk(function (id) {
      return id !== collapsedSpanId && result.add(id);
    });
    return result;
  }, new Set());
  return hiddenSpanIds.size > 0 ? spans.filter(function (span) {
    return !hiddenSpanIds.has(getSpanId(span));
  }) : spans;
});
export var DEFAULT_TICK_INTERVAL = 4;
export var DEFAULT_TICK_WIDTH = 3;
export var getTicksForTrace = createSelector(function (_ref15) {
  var trace = _ref15.trace;
  return trace;
}, function (_ref16) {
  var _ref16$interval = _ref16.interval,
    interval = _ref16$interval === void 0 ? DEFAULT_TICK_INTERVAL : _ref16$interval;
  return interval;
}, function (_ref17) {
  var _ref17$width = _ref17.width,
    width = _ref17$width === void 0 ? DEFAULT_TICK_WIDTH : _ref17$width;
  return width;
}, function (trace, interval, width) {
  return [].concat(Array(interval + 1).keys()).map(function (num) {
    return {
      timestamp: getTraceTimestamp(trace) + getTraceDuration(trace) * (num / interval),
      width: width
    };
  });
});

// TODO: delete this when the backend can ensure uniqueness
/* istanbul ignore next */
export var enforceUniqueSpanIds = createSelector( /* istanbul ignore next */function (trace) {
  return trace;
}, getTraceSpans, /* istanbul ignore next */function (trace, spans) {
  var map = new Map();
  var spanArray = [];
  return _extends({}, trace, {
    spans: spans.reduce(function (result, span) {
      var spanID = map.has(getSpanId(span)) ? getSpanId(span) + "_" + map.get(getSpanId(span)) : getSpanId(span);
      var updatedSpan = _extends({}, span, {
        spanID: spanID
      });
      if (spanID !== getSpanId(span)) {
        // eslint-disable-next-line no-console
        console.warn('duplicate spanID in trace replaced', getSpanId(span), 'new:', spanID);
      }

      // set the presence of the span in the map or increment the number
      map.set(getSpanId(span), (map.get(getSpanId(span)) || 0) + 1);
      return result.concat([updatedSpan]);
    }, spanArray)
  });
});

// TODO: delete this when the backend can ensure uniqueness
export var dropEmptyStartTimeSpans = createSelector( /* istanbul ignore next */function (trace) {
  return trace;
}, getTraceSpans, /* istanbul ignore next */function (trace, spans) {
  return _extends({}, trace, {
    spans: spans.filter(function (span) {
      return !!getSpanTimestamp(span);
    })
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,