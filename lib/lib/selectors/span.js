import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import fuzzy from 'fuzzy';
import { createSelector } from 'reselect';
import { getProcessServiceName } from './process';
export var getSpanId = function getSpanId(span) {
  return span.spanID;
};
export var getSpanName = function getSpanName(span) {
  return span.operationName;
};
export var getSpanDuration = function getSpanDuration(span) {
  return span.duration;
};
export var getSpanTimestamp = function getSpanTimestamp(span) {
  return span.startTime;
};
export var getSpanProcessId = function getSpanProcessId(span) {
  return span.processID;
};
export var getSpanReferences = function getSpanReferences(span) {
  return span.references || [];
};
export var getSpanReferenceByType = createSelector(createSelector(function (_ref) {
  var span = _ref.span;
  return span;
}, getSpanReferences), function (_ref2) {
  var type = _ref2.type;
  return type;
}, function (references, type) {
  return references.find(function (ref) {
    return ref.refType === type;
  });
});
export var getSpanParentId = createSelector(function (span) {
  return getSpanReferenceByType({
    span: span,
    type: 'CHILD_OF'
  });
}, function (childOfRef) {
  return childOfRef ? childOfRef.spanID : null;
});
export var getSpanProcess = function getSpanProcess(span) {
  if (!span.process) {
    throw new Error("\n      you must hydrate the spans with the processes, perhaps\n      using hydrateSpansWithProcesses(), before accessing a span's process\n    ");
  }
  return span.process;
};
export var getSpanServiceName = createSelector(getSpanProcess, getProcessServiceName);
export var filterSpansForTimestamps = createSelector(function (_ref3) {
  var spans = _ref3.spans;
  return spans;
}, function (_ref4) {
  var leftBound = _ref4.leftBound;
  return leftBound;
}, function (_ref5) {
  var rightBound = _ref5.rightBound;
  return rightBound;
}, function (spans, leftBound, rightBound) {
  return spans.filter(function (span) {
    return getSpanTimestamp(span) >= leftBound && getSpanTimestamp(span) <= rightBound;
  });
});
export var filterSpansForText = createSelector(function (_ref6) {
  var spans = _ref6.spans;
  return spans;
}, function (_ref7) {
  var text = _ref7.text;
  return text;
}, function (spans, text) {
  return fuzzy.filter(text, spans, {
    extract: function extract(span) {
      return getSpanServiceName(span) + " " + getSpanName(span);
    }
  }).map(function (_ref8) {
    var original = _ref8.original;
    return original;
  });
});
var getTextFilteredSpansAsMap = createSelector(filterSpansForText, function (matchingSpans) {
  return matchingSpans.reduce(function (obj, span) {
    var _extends2;
    return _extends({}, obj, (_extends2 = {}, _extends2[getSpanId(span)] = span, _extends2));
  }, {});
});

// TODO: delete this function as it is not used?
export var highlightSpansForTextFilter = createSelector(function (_ref9) {
  var spans = _ref9.spans;
  return spans;
}, getTextFilteredSpansAsMap, function (spans, textFilteredSpansMap) {
  return spans.map(function (span) {
    return _extends({}, span, {
      muted: !textFilteredSpansMap[getSpanId(span)]
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,