// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Tween from './Tween';
var DURATION_MS = 350;
var lastTween;

// TODO(joe): this util can be modified a bit to be generalized (e.g. take in
// an element as a parameter and use scrollTop instead of window.scrollTo)

function _onTweenUpdate(_ref) {
  var done = _ref.done,
    value = _ref.value;
  window.scrollTo(window.scrollX, value);
  if (done) {
    lastTween = undefined;
  }
}
export function scrollBy(yDelta, appendToLast) {
  if (appendToLast === void 0) {
    appendToLast = false;
  }
  var _window = window,
    scrollY = _window.scrollY;
  var targetFrom = scrollY;
  if (appendToLast && lastTween) {
    var currentDirection = lastTween.to < scrollY ? 'up' : 'down';
    var nextDirection = yDelta < 0 ? 'up' : 'down';
    if (currentDirection === nextDirection) {
      targetFrom = lastTween.to;
    }
  }
  var to = targetFrom + yDelta;
  lastTween = new Tween({
    to: to,
    duration: DURATION_MS,
    from: scrollY,
    onUpdate: _onTweenUpdate
  });
}
export function scrollTo(y) {
  var _window2 = window,
    scrollY = _window2.scrollY;
  lastTween = new Tween({
    duration: DURATION_MS,
    from: scrollY,
    to: y,
    onUpdate: _onTweenUpdate
  });
}
export function cancel() {
  if (lastTween) {
    lastTween.cancel();
    lastTween = undefined;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUd2VlbiIsIkRVUkFUSU9OX01TIiwibGFzdFR3ZWVuIiwiX29uVHdlZW5VcGRhdGUiLCJfcmVmIiwiZG9uZSIsInZhbHVlIiwid2luZG93Iiwic2Nyb2xsVG8iLCJzY3JvbGxYIiwidW5kZWZpbmVkIiwic2Nyb2xsQnkiLCJ5RGVsdGEiLCJhcHBlbmRUb0xhc3QiLCJfd2luZG93Iiwic2Nyb2xsWSIsInRhcmdldEZyb20iLCJjdXJyZW50RGlyZWN0aW9uIiwidG8iLCJuZXh0RGlyZWN0aW9uIiwiZHVyYXRpb24iLCJmcm9tIiwib25VcGRhdGUiLCJ5IiwiX3dpbmRvdzIiLCJjYW5jZWwiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvbGliL3Njcm9sbC1wYWdlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IFR3ZWVuIGZyb20gJy4vVHdlZW4nO1xuXG5jb25zdCBEVVJBVElPTl9NUyA9IDM1MDtcblxubGV0IGxhc3RUd2VlbjogVHdlZW4gfCB2b2lkO1xuXG4vLyBUT0RPKGpvZSk6IHRoaXMgdXRpbCBjYW4gYmUgbW9kaWZpZWQgYSBiaXQgdG8gYmUgZ2VuZXJhbGl6ZWQgKGUuZy4gdGFrZSBpblxuLy8gYW4gZWxlbWVudCBhcyBhIHBhcmFtZXRlciBhbmQgdXNlIHNjcm9sbFRvcCBpbnN0ZWFkIG9mIHdpbmRvdy5zY3JvbGxUbylcblxuZnVuY3Rpb24gX29uVHdlZW5VcGRhdGUoeyBkb25lLCB2YWx1ZSB9OiB7IGRvbmU6IGJvb2xlYW47IHZhbHVlOiBudW1iZXIgfSkge1xuICB3aW5kb3cuc2Nyb2xsVG8od2luZG93LnNjcm9sbFgsIHZhbHVlKTtcbiAgaWYgKGRvbmUpIHtcbiAgICBsYXN0VHdlZW4gPSB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjcm9sbEJ5KHlEZWx0YTogbnVtYmVyLCBhcHBlbmRUb0xhc3QgPSBmYWxzZSkge1xuICBjb25zdCB7IHNjcm9sbFkgfSA9IHdpbmRvdztcbiAgbGV0IHRhcmdldEZyb20gPSBzY3JvbGxZO1xuICBpZiAoYXBwZW5kVG9MYXN0ICYmIGxhc3RUd2Vlbikge1xuICAgIGNvbnN0IGN1cnJlbnREaXJlY3Rpb24gPSBsYXN0VHdlZW4udG8gPCBzY3JvbGxZID8gJ3VwJyA6ICdkb3duJztcbiAgICBjb25zdCBuZXh0RGlyZWN0aW9uID0geURlbHRhIDwgMCA/ICd1cCcgOiAnZG93bic7XG4gICAgaWYgKGN1cnJlbnREaXJlY3Rpb24gPT09IG5leHREaXJlY3Rpb24pIHtcbiAgICAgIHRhcmdldEZyb20gPSBsYXN0VHdlZW4udG87XG4gICAgfVxuICB9XG4gIGNvbnN0IHRvID0gdGFyZ2V0RnJvbSArIHlEZWx0YTtcbiAgbGFzdFR3ZWVuID0gbmV3IFR3ZWVuKHsgdG8sIGR1cmF0aW9uOiBEVVJBVElPTl9NUywgZnJvbTogc2Nyb2xsWSwgb25VcGRhdGU6IF9vblR3ZWVuVXBkYXRlIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2Nyb2xsVG8oeTogbnVtYmVyKSB7XG4gIGNvbnN0IHsgc2Nyb2xsWSB9ID0gd2luZG93O1xuICBsYXN0VHdlZW4gPSBuZXcgVHdlZW4oeyBkdXJhdGlvbjogRFVSQVRJT05fTVMsIGZyb206IHNjcm9sbFksIHRvOiB5LCBvblVwZGF0ZTogX29uVHdlZW5VcGRhdGUgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gIGlmIChsYXN0VHdlZW4pIHtcbiAgICBsYXN0VHdlZW4uY2FuY2VsKCk7XG4gICAgbGFzdFR3ZWVuID0gdW5kZWZpbmVkO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLEtBQUssTUFBTSxTQUFTO0FBRTNCLElBQU1DLFdBQVcsR0FBRyxHQUFHO0FBRXZCLElBQUlDLFNBQXVCOztBQUUzQjtBQUNBOztBQUVBLFNBQVNDLGNBQWNBLENBQUFDLElBQUEsRUFBb0Q7RUFBQSxJQUFqREMsSUFBSSxHQUFBRCxJQUFBLENBQUpDLElBQUk7SUFBRUMsS0FBSyxHQUFBRixJQUFBLENBQUxFLEtBQUs7RUFDbkNDLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDRCxNQUFNLENBQUNFLE9BQU8sRUFBRUgsS0FBSyxDQUFDO0VBQ3RDLElBQUlELElBQUksRUFBRTtJQUNSSCxTQUFTLEdBQUdRLFNBQVM7RUFDdkI7QUFDRjtBQUVBLE9BQU8sU0FBU0MsUUFBUUEsQ0FBQ0MsTUFBYyxFQUFFQyxZQUFZLEVBQVU7RUFBQSxJQUF0QkEsWUFBWTtJQUFaQSxZQUFZLEdBQUcsS0FBSztFQUFBO0VBQzNELElBQUFDLE9BQUEsR0FBb0JQLE1BQU07SUFBbEJRLE9BQU8sR0FBQUQsT0FBQSxDQUFQQyxPQUFPO0VBQ2YsSUFBSUMsVUFBVSxHQUFHRCxPQUFPO0VBQ3hCLElBQUlGLFlBQVksSUFBSVgsU0FBUyxFQUFFO0lBQzdCLElBQU1lLGdCQUFnQixHQUFHZixTQUFTLENBQUNnQixFQUFFLEdBQUdILE9BQU8sR0FBRyxJQUFJLEdBQUcsTUFBTTtJQUMvRCxJQUFNSSxhQUFhLEdBQUdQLE1BQU0sR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLE1BQU07SUFDaEQsSUFBSUssZ0JBQWdCLEtBQUtFLGFBQWEsRUFBRTtNQUN0Q0gsVUFBVSxHQUFHZCxTQUFTLENBQUNnQixFQUFFO0lBQzNCO0VBQ0Y7RUFDQSxJQUFNQSxFQUFFLEdBQUdGLFVBQVUsR0FBR0osTUFBTTtFQUM5QlYsU0FBUyxHQUFHLElBQUlGLEtBQUssQ0FBQztJQUFFa0IsRUFBRSxFQUFGQSxFQUFFO0lBQUVFLFFBQVEsRUFBRW5CLFdBQVc7SUFBRW9CLElBQUksRUFBRU4sT0FBTztJQUFFTyxRQUFRLEVBQUVuQjtFQUFlLENBQUMsQ0FBQztBQUMvRjtBQUVBLE9BQU8sU0FBU0ssUUFBUUEsQ0FBQ2UsQ0FBUyxFQUFFO0VBQ2xDLElBQUFDLFFBQUEsR0FBb0JqQixNQUFNO0lBQWxCUSxPQUFPLEdBQUFTLFFBQUEsQ0FBUFQsT0FBTztFQUNmYixTQUFTLEdBQUcsSUFBSUYsS0FBSyxDQUFDO0lBQUVvQixRQUFRLEVBQUVuQixXQUFXO0lBQUVvQixJQUFJLEVBQUVOLE9BQU87SUFBRUcsRUFBRSxFQUFFSyxDQUFDO0lBQUVELFFBQVEsRUFBRW5CO0VBQWUsQ0FBQyxDQUFDO0FBQ2xHO0FBRUEsT0FBTyxTQUFTc0IsTUFBTUEsQ0FBQSxFQUFHO0VBQ3ZCLElBQUl2QixTQUFTLEVBQUU7SUFDYkEsU0FBUyxDQUFDdUIsTUFBTSxDQUFDLENBQUM7SUFDbEJ2QixTQUFTLEdBQUdRLFNBQVM7RUFDdkI7QUFDRiIsImlnbm9yZUxpc3QiOltdfQ==