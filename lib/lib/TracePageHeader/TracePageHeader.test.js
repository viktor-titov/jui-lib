import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { render, screen } from '@testing-library/react';
import React from 'react';
import traceGenerator from '../demo/trace-generators';
import { getTraceName } from '../model/trace-viewer';
import transformTraceData from '../model/transform-trace-data';
import TracePageHeader from './TracePageHeader';
import { jsx as _jsx } from "react/jsx-runtime";
var trace = transformTraceData(traceGenerator.trace({}));
var setup = function setup(propOverrides) {
  var defaultProps = _extends({
    canCollapse: false,
    hideSummary: false,
    onSlimViewClicked: function onSlimViewClicked() {},
    onTraceGraphViewClicked: function onTraceGraphViewClicked() {},
    slimView: false,
    trace: trace,
    hideMap: false,
    timeZone: '',
    viewRange: {
      time: {
        current: [10, 20]
      }
    },
    updateNextViewRangeTime: function updateNextViewRangeTime() {},
    updateViewRangeTime: function updateViewRangeTime() {}
  }, propOverrides);
  return render( /*#__PURE__*/_jsx(TracePageHeader, _extends({}, defaultProps)));
};
describe('TracePageHeader test', function () {
  it('should render a header ', function () {
    setup();
    expect(screen.getByRole('banner')).toBeInTheDocument();
  });
  it('should render nothing if a trace is not present', function () {
    setup({
      trace: null
    });
    expect(screen.queryByRole('banner')).not.toBeInTheDocument();
    expect(screen.queryAllByRole('listitem')).toHaveLength(0);
    expect(screen.queryByText(/Reset Selection/)).not.toBeInTheDocument();
  });
  it('should render the trace title', function () {
    setup();
    expect(screen.getByRole('heading', {
      name: function name(content) {
        return content.replace(/ /g, '').startsWith(getTraceName(trace.spans).replace(/ /g, ''));
      }
    })).toBeInTheDocument();
  });
  it('should render the header items', function () {
    var _headerItems$0$textCo, _headerItems$1$textCo, _headerItems$2$textCo, _headerItems$3$textCo, _headerItems$4$textCo;
    setup();
    var headerItems = screen.queryAllByRole('listitem');
    expect(headerItems).toHaveLength(5);
    //                                                        Year-month-day hour-minute-second
    expect((_headerItems$0$textCo = headerItems[0].textContent) == null ? void 0 : _headerItems$0$textCo.match(/Trace Start:\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\.\d{3}/g)).toBeTruthy();
    expect((_headerItems$1$textCo = headerItems[1].textContent) == null ? void 0 : _headerItems$1$textCo.match(/Duration:[\d|\.][\.|\d|s][\.|\d|s]?[\d]?/)).toBeTruthy();
    expect((_headerItems$2$textCo = headerItems[2].textContent) == null ? void 0 : _headerItems$2$textCo.match(/Services:\d\d?/g)).toBeTruthy();
    expect((_headerItems$3$textCo = headerItems[3].textContent) == null ? void 0 : _headerItems$3$textCo.match(/Depth:\d\d?/)).toBeTruthy();
    expect((_headerItems$4$textCo = headerItems[4].textContent) == null ? void 0 : _headerItems$4$textCo.match(/Total Spans:\d\d?\d?\d?/)).toBeTruthy();
  });
  it('should render a <SpanGraph>', function () {
    setup();
    expect(screen.getByText(/Reset Selection/)).toBeInTheDocument();
  });
  describe('observes the visibility toggles for various UX elements', function () {
    it('hides the minimap when hideMap === true', function () {
      setup({
        hideMap: true
      });
      expect(screen.queryByText(/Reset Selection/)).not.toBeInTheDocument();
    });
    it('hides the summary when hideSummary === true', function () {
      var _setup = setup({
          hideSummary: false
        }),
        rerender = _setup.rerender;
      expect(screen.queryAllByRole('listitem')).toHaveLength(5);
      rerender( /*#__PURE__*/_jsx(TracePageHeader, {
        hideSummary: false,
        trace: null
      }));
      expect(screen.queryAllByRole('listitem')).toHaveLength(0);
      rerender( /*#__PURE__*/_jsx(TracePageHeader, {
        trace: trace,
        hideSummary: true,
        hideMap: false,
        viewRange: {
          time: {
            current: [10, 20]
          }
        }
      }));
      expect(screen.queryAllByRole('listitem')).toHaveLength(0);
      rerender( /*#__PURE__*/_jsx(TracePageHeader, {
        trace: trace,
        hideSummary: false,
        hideMap: false,
        viewRange: {
          time: {
            current: [10, 20]
          }
        }
      }));
      expect(screen.queryAllByRole('listitem')).toHaveLength(5);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZW5kZXIiLCJzY3JlZW4iLCJSZWFjdCIsInRyYWNlR2VuZXJhdG9yIiwiZ2V0VHJhY2VOYW1lIiwidHJhbnNmb3JtVHJhY2VEYXRhIiwiVHJhY2VQYWdlSGVhZGVyIiwianN4IiwiX2pzeCIsInRyYWNlIiwic2V0dXAiLCJwcm9wT3ZlcnJpZGVzIiwiZGVmYXVsdFByb3BzIiwiX2V4dGVuZHMiLCJjYW5Db2xsYXBzZSIsImhpZGVTdW1tYXJ5Iiwib25TbGltVmlld0NsaWNrZWQiLCJvblRyYWNlR3JhcGhWaWV3Q2xpY2tlZCIsInNsaW1WaWV3IiwiaGlkZU1hcCIsInRpbWVab25lIiwidmlld1JhbmdlIiwidGltZSIsImN1cnJlbnQiLCJ1cGRhdGVOZXh0Vmlld1JhbmdlVGltZSIsInVwZGF0ZVZpZXdSYW5nZVRpbWUiLCJkZXNjcmliZSIsIml0IiwiZXhwZWN0IiwiZ2V0QnlSb2xlIiwidG9CZUluVGhlRG9jdW1lbnQiLCJxdWVyeUJ5Um9sZSIsIm5vdCIsInF1ZXJ5QWxsQnlSb2xlIiwidG9IYXZlTGVuZ3RoIiwicXVlcnlCeVRleHQiLCJuYW1lIiwiY29udGVudCIsInJlcGxhY2UiLCJzdGFydHNXaXRoIiwic3BhbnMiLCJfaGVhZGVySXRlbXMkMCR0ZXh0Q28iLCJfaGVhZGVySXRlbXMkMSR0ZXh0Q28iLCJfaGVhZGVySXRlbXMkMiR0ZXh0Q28iLCJfaGVhZGVySXRlbXMkMyR0ZXh0Q28iLCJfaGVhZGVySXRlbXMkNCR0ZXh0Q28iLCJoZWFkZXJJdGVtcyIsInRleHRDb250ZW50IiwibWF0Y2giLCJ0b0JlVHJ1dGh5IiwiZ2V0QnlUZXh0IiwiX3NldHVwIiwicmVyZW5kZXIiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL1RyYWNlUGFnZUhlYWRlci9UcmFjZVBhZ2VIZWFkZXIudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdHJhY2VHZW5lcmF0b3IgZnJvbSAnLi4vZGVtby90cmFjZS1nZW5lcmF0b3JzJztcbmltcG9ydCB7IGdldFRyYWNlTmFtZSB9IGZyb20gJy4uL21vZGVsL3RyYWNlLXZpZXdlcic7XG5pbXBvcnQgdHJhbnNmb3JtVHJhY2VEYXRhIGZyb20gJy4uL21vZGVsL3RyYW5zZm9ybS10cmFjZS1kYXRhJztcblxuaW1wb3J0IFRyYWNlUGFnZUhlYWRlciwgeyBUcmFjZVBhZ2VIZWFkZXJFbWJlZFByb3BzIH0gZnJvbSAnLi9UcmFjZVBhZ2VIZWFkZXInO1xuXG5jb25zdCB0cmFjZSA9IHRyYW5zZm9ybVRyYWNlRGF0YSh0cmFjZUdlbmVyYXRvci50cmFjZSh7fSkpO1xuY29uc3Qgc2V0dXAgPSAocHJvcE92ZXJyaWRlcz86IFRyYWNlUGFnZUhlYWRlckVtYmVkUHJvcHMpID0+IHtcbiAgY29uc3QgZGVmYXVsdFByb3BzID0ge1xuICAgIGNhbkNvbGxhcHNlOiBmYWxzZSxcbiAgICBoaWRlU3VtbWFyeTogZmFsc2UsXG4gICAgb25TbGltVmlld0NsaWNrZWQ6ICgpID0+IHt9LFxuICAgIG9uVHJhY2VHcmFwaFZpZXdDbGlja2VkOiAoKSA9PiB7fSxcbiAgICBzbGltVmlldzogZmFsc2UsXG4gICAgdHJhY2UsXG4gICAgaGlkZU1hcDogZmFsc2UsXG4gICAgdGltZVpvbmU6ICcnLFxuICAgIHZpZXdSYW5nZTogeyB0aW1lOiB7IGN1cnJlbnQ6IFsxMCwgMjBdIGFzIFtudW1iZXIsIG51bWJlcl0gfSB9LFxuICAgIHVwZGF0ZU5leHRWaWV3UmFuZ2VUaW1lOiAoKSA9PiB7fSxcbiAgICB1cGRhdGVWaWV3UmFuZ2VUaW1lOiAoKSA9PiB7fSxcbiAgICAuLi5wcm9wT3ZlcnJpZGVzLFxuICB9O1xuXG4gIHJldHVybiByZW5kZXIoPFRyYWNlUGFnZUhlYWRlciB7Li4uZGVmYXVsdFByb3BzfSAvPik7XG59O1xuXG5kZXNjcmliZSgnVHJhY2VQYWdlSGVhZGVyIHRlc3QnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgcmVuZGVyIGEgaGVhZGVyICcsICgpID0+IHtcbiAgICBzZXR1cCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdiYW5uZXInKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgbm90aGluZyBpZiBhIHRyYWNlIGlzIG5vdCBwcmVzZW50JywgKCkgPT4ge1xuICAgIHNldHVwKHsgdHJhY2U6IG51bGwgfSBhcyBUcmFjZVBhZ2VIZWFkZXJFbWJlZFByb3BzKTtcbiAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlSb2xlKCdiYW5uZXInKSkubm90LnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5xdWVyeUFsbEJ5Um9sZSgnbGlzdGl0ZW0nKSkudG9IYXZlTGVuZ3RoKDApO1xuICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRleHQoL1Jlc2V0IFNlbGVjdGlvbi8pKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgdGhlIHRyYWNlIHRpdGxlJywgKCkgPT4ge1xuICAgIHNldHVwKCk7XG4gICAgZXhwZWN0KFxuICAgICAgc2NyZWVuLmdldEJ5Um9sZSgnaGVhZGluZycsIHtcbiAgICAgICAgbmFtZTogKGNvbnRlbnQpID0+IGNvbnRlbnQucmVwbGFjZSgvIC9nLCAnJykuc3RhcnRzV2l0aChnZXRUcmFjZU5hbWUodHJhY2UhLnNwYW5zKS5yZXBsYWNlKC8gL2csICcnKSksXG4gICAgICB9KVxuICAgICkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgdGhlIGhlYWRlciBpdGVtcycsICgpID0+IHtcbiAgICBzZXR1cCgpO1xuXG4gICAgY29uc3QgaGVhZGVySXRlbXMgPSBzY3JlZW4ucXVlcnlBbGxCeVJvbGUoJ2xpc3RpdGVtJyk7XG5cbiAgICBleHBlY3QoaGVhZGVySXRlbXMpLnRvSGF2ZUxlbmd0aCg1KTtcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWWVhci1tb250aC1kYXkgaG91ci1taW51dGUtc2Vjb25kXG4gICAgZXhwZWN0KGhlYWRlckl0ZW1zWzBdLnRleHRDb250ZW50Py5tYXRjaCgvVHJhY2UgU3RhcnQ6XFxkezR9LVxcZHsyfS1cXGR7Mn1cXHNcXGR7Mn06XFxkezJ9OlxcZHsyfVxcLlxcZHszfS9nKSkudG9CZVRydXRoeSgpO1xuICAgIGV4cGVjdChoZWFkZXJJdGVtc1sxXS50ZXh0Q29udGVudD8ubWF0Y2goL0R1cmF0aW9uOltcXGR8XFwuXVtcXC58XFxkfHNdW1xcLnxcXGR8c10/W1xcZF0/LykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3QoaGVhZGVySXRlbXNbMl0udGV4dENvbnRlbnQ/Lm1hdGNoKC9TZXJ2aWNlczpcXGRcXGQ/L2cpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGhlYWRlckl0ZW1zWzNdLnRleHRDb250ZW50Py5tYXRjaCgvRGVwdGg6XFxkXFxkPy8pKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KGhlYWRlckl0ZW1zWzRdLnRleHRDb250ZW50Py5tYXRjaCgvVG90YWwgU3BhbnM6XFxkXFxkP1xcZD9cXGQ/LykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZW5kZXIgYSA8U3BhbkdyYXBoPicsICgpID0+IHtcbiAgICBzZXR1cCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9SZXNldCBTZWxlY3Rpb24vKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ29ic2VydmVzIHRoZSB2aXNpYmlsaXR5IHRvZ2dsZXMgZm9yIHZhcmlvdXMgVVggZWxlbWVudHMnLCAoKSA9PiB7XG4gICAgaXQoJ2hpZGVzIHRoZSBtaW5pbWFwIHdoZW4gaGlkZU1hcCA9PT0gdHJ1ZScsICgpID0+IHtcbiAgICAgIHNldHVwKHsgaGlkZU1hcDogdHJ1ZSB9IGFzIFRyYWNlUGFnZUhlYWRlckVtYmVkUHJvcHMpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgvUmVzZXQgU2VsZWN0aW9uLykpLm5vdC50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ2hpZGVzIHRoZSBzdW1tYXJ5IHdoZW4gaGlkZVN1bW1hcnkgPT09IHRydWUnLCAoKSA9PiB7XG4gICAgICBjb25zdCB7IHJlcmVuZGVyIH0gPSBzZXR1cCh7IGhpZGVTdW1tYXJ5OiBmYWxzZSB9IGFzIFRyYWNlUGFnZUhlYWRlckVtYmVkUHJvcHMpO1xuICAgICAgZXhwZWN0KHNjcmVlbi5xdWVyeUFsbEJ5Um9sZSgnbGlzdGl0ZW0nKSkudG9IYXZlTGVuZ3RoKDUpO1xuXG4gICAgICByZXJlbmRlcig8VHJhY2VQYWdlSGVhZGVyIHsuLi4oeyBoaWRlU3VtbWFyeTogZmFsc2UsIHRyYWNlOiBudWxsIH0gYXMgVHJhY2VQYWdlSGVhZGVyRW1iZWRQcm9wcyl9IC8+KTtcbiAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlBbGxCeVJvbGUoJ2xpc3RpdGVtJykpLnRvSGF2ZUxlbmd0aCgwKTtcblxuICAgICAgcmVyZW5kZXIoXG4gICAgICAgIDxUcmFjZVBhZ2VIZWFkZXJcbiAgICAgICAgICB7Li4uKHtcbiAgICAgICAgICAgIHRyYWNlOiB0cmFjZSxcbiAgICAgICAgICAgIGhpZGVTdW1tYXJ5OiB0cnVlLFxuICAgICAgICAgICAgaGlkZU1hcDogZmFsc2UsXG4gICAgICAgICAgICB2aWV3UmFuZ2U6IHsgdGltZTogeyBjdXJyZW50OiBbMTAsIDIwXSB9IH0sXG4gICAgICAgICAgfSBhcyBUcmFjZVBhZ2VIZWFkZXJFbWJlZFByb3BzKX1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QWxsQnlSb2xlKCdsaXN0aXRlbScpKS50b0hhdmVMZW5ndGgoMCk7XG5cbiAgICAgIHJlcmVuZGVyKFxuICAgICAgICA8VHJhY2VQYWdlSGVhZGVyXG4gICAgICAgICAgey4uLih7XG4gICAgICAgICAgICB0cmFjZTogdHJhY2UsXG4gICAgICAgICAgICBoaWRlU3VtbWFyeTogZmFsc2UsXG4gICAgICAgICAgICBoaWRlTWFwOiBmYWxzZSxcbiAgICAgICAgICAgIHZpZXdSYW5nZTogeyB0aW1lOiB7IGN1cnJlbnQ6IFsxMCwgMjBdIH0gfSxcbiAgICAgICAgICB9IGFzIFRyYWNlUGFnZUhlYWRlckVtYmVkUHJvcHMpfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlB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