import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _templateObject;
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { css } from '@emotion/css';
import * as React from 'react';
import { withTheme2, stylesFactory } from '@grafana/ui';
import { autoColor } from '../../Theme';
import { getRgbColorByKey } from '../../utils/color-generator';
import renderIntoCanvas from './render-into-canvas';
import { jsx as _jsx } from "react/jsx-runtime";
var getStyles = stylesFactory(function (theme) {
  return {
    CanvasSpanGraph: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n      label: CanvasSpanGraph;\n      background: ", ";\n      height: 60px;\n      position: absolute;\n      width: 100%;\n    "])), autoColor(theme, '#fafafa'))
  };
});
export var UnthemedCanvasSpanGraph = /*#__PURE__*/function (_React$PureComponent) {
  function UnthemedCanvasSpanGraph(props) {
    var _this;
    _this = _React$PureComponent.call(this, props) || this;
    _this.getColor = function (key) {
      return getRgbColorByKey(key, _this.props.theme);
    };
    _this._setCanvasRef = function (elm) {
      _this._canvasElm = elm;
    };
    _this._canvasElm = undefined;
    return _this;
  }
  _inheritsLoose(UnthemedCanvasSpanGraph, _React$PureComponent);
  var _proto = UnthemedCanvasSpanGraph.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this._draw();
  };
  _proto.componentDidUpdate = function componentDidUpdate() {
    this._draw();
  };
  _proto._draw = function _draw() {
    if (this._canvasElm) {
      var _this$props = this.props,
        totalValueWidth = _this$props.valueWidth,
        items = _this$props.items;
      renderIntoCanvas(this._canvasElm, items, totalValueWidth, this.getColor, autoColor(this.props.theme, '#fff'));
    }
  };
  _proto.render = function render() {
    return /*#__PURE__*/_jsx("canvas", {
      className: getStyles(this.props.theme).CanvasSpanGraph,
      ref: this._setCanvasRef,
      "data-testid": "CanvasSpanGraph"
    });
  };
  return UnthemedCanvasSpanGraph;
}(React.PureComponent);
export default withTheme2(UnthemedCanvasSpanGraph);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjc3MiLCJSZWFjdCIsIndpdGhUaGVtZTIiLCJzdHlsZXNGYWN0b3J5IiwiYXV0b0NvbG9yIiwiZ2V0UmdiQ29sb3JCeUtleSIsInJlbmRlckludG9DYW52YXMiLCJqc3giLCJfanN4IiwiZ2V0U3R5bGVzIiwidGhlbWUiLCJDYW52YXNTcGFuR3JhcGgiLCJfdGVtcGxhdGVPYmplY3QiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UiLCJVbnRoZW1lZENhbnZhc1NwYW5HcmFwaCIsIl9SZWFjdCRQdXJlQ29tcG9uZW50IiwicHJvcHMiLCJfdGhpcyIsImNhbGwiLCJnZXRDb2xvciIsImtleSIsIl9zZXRDYW52YXNSZWYiLCJlbG0iLCJfY2FudmFzRWxtIiwidW5kZWZpbmVkIiwiX2luaGVyaXRzTG9vc2UiLCJfcHJvdG8iLCJwcm90b3R5cGUiLCJjb21wb25lbnREaWRNb3VudCIsIl9kcmF3IiwiY29tcG9uZW50RGlkVXBkYXRlIiwiX3RoaXMkcHJvcHMiLCJ0b3RhbFZhbHVlV2lkdGgiLCJ2YWx1ZVdpZHRoIiwiaXRlbXMiLCJyZW5kZXIiLCJjbGFzc05hbWUiLCJyZWYiLCJQdXJlQ29tcG9uZW50Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9UcmFjZVBhZ2VIZWFkZXIvU3BhbkdyYXBoL0NhbnZhc1NwYW5HcmFwaC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IEdyYWZhbmFUaGVtZTIgfSBmcm9tICdAZ3JhZmFuYS9kYXRhJztcbmltcG9ydCB7IHdpdGhUaGVtZTIsIHN0eWxlc0ZhY3RvcnkgfSBmcm9tICdAZ3JhZmFuYS91aSc7XG5cbmltcG9ydCB7IGF1dG9Db2xvciB9IGZyb20gJy4uLy4uL1RoZW1lJztcbmltcG9ydCB7IFROaWwgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBnZXRSZ2JDb2xvckJ5S2V5IH0gZnJvbSAnLi4vLi4vdXRpbHMvY29sb3ItZ2VuZXJhdG9yJztcblxuaW1wb3J0IHJlbmRlckludG9DYW52YXMgZnJvbSAnLi9yZW5kZXItaW50by1jYW52YXMnO1xuXG5jb25zdCBnZXRTdHlsZXMgPSBzdHlsZXNGYWN0b3J5KCh0aGVtZTogR3JhZmFuYVRoZW1lMikgPT4ge1xuICByZXR1cm4ge1xuICAgIENhbnZhc1NwYW5HcmFwaDogY3NzYFxuICAgICAgbGFiZWw6IENhbnZhc1NwYW5HcmFwaDtcbiAgICAgIGJhY2tncm91bmQ6ICR7YXV0b0NvbG9yKHRoZW1lLCAnI2ZhZmFmYScpfTtcbiAgICAgIGhlaWdodDogNjBweDtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgIGAsXG4gIH07XG59KTtcblxudHlwZSBDYW52YXNTcGFuR3JhcGhQcm9wcyA9IHtcbiAgaXRlbXM6IEFycmF5PHsgdmFsdWVXaWR0aDogbnVtYmVyOyB2YWx1ZU9mZnNldDogbnVtYmVyOyBzZXJ2aWNlTmFtZTogc3RyaW5nIH0+O1xuICB2YWx1ZVdpZHRoOiBudW1iZXI7XG4gIHRoZW1lOiBHcmFmYW5hVGhlbWUyO1xufTtcblxuZXhwb3J0IGNsYXNzIFVudGhlbWVkQ2FudmFzU3BhbkdyYXBoIGV4dGVuZHMgUmVhY3QuUHVyZUNvbXBvbmVudDxDYW52YXNTcGFuR3JhcGhQcm9wcz4ge1xuICBfY2FudmFzRWxtOiBIVE1MQ2FudmFzRWxlbWVudCB8IFROaWw7XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IENhbnZhc1NwYW5HcmFwaFByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuX2NhbnZhc0VsbSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGdldENvbG9yID0gKGtleTogc3RyaW5nKSA9PiBnZXRSZ2JDb2xvckJ5S2V5KGtleSwgdGhpcy5wcm9wcy50aGVtZSk7XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5fZHJhdygpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMuX2RyYXcoKTtcbiAgfVxuXG4gIF9zZXRDYW52YXNSZWYgPSAoZWxtOiBIVE1MQ2FudmFzRWxlbWVudCB8IFROaWwpID0+IHtcbiAgICB0aGlzLl9jYW52YXNFbG0gPSBlbG07XG4gIH07XG5cbiAgX2RyYXcoKSB7XG4gICAgaWYgKHRoaXMuX2NhbnZhc0VsbSkge1xuICAgICAgY29uc3QgeyB2YWx1ZVdpZHRoOiB0b3RhbFZhbHVlV2lkdGgsIGl0ZW1zIH0gPSB0aGlzLnByb3BzO1xuICAgICAgcmVuZGVySW50b0NhbnZhcyh0aGlzLl9jYW52YXNFbG0sIGl0ZW1zLCB0b3RhbFZhbHVlV2lkdGgsIHRoaXMuZ2V0Q29sb3IsIGF1dG9Db2xvcih0aGlzLnByb3BzLnRoZW1lLCAnI2ZmZicpKTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxjYW52YXNcbiAgICAgICAgY2xhc3NOYW1lPXtnZXRTdHlsZXModGhpcy5wcm9wcy50aGVtZSkuQ2FudmFzU3BhbkdyYXBofVxuICAgICAgICByZWY9e3RoaXMuX3NldENhbnZhc1JlZn1cbiAgICAgICAgZGF0YS10ZXN0aWQ9XCJDYW52YXNTcGFuR3JhcGhcIlxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZTIoVW50aGVtZWRDYW52YXNTcGFuR3JhcGgpO1xuIl0sIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxHQUFHLFFBQVEsY0FBYztBQUNsQyxPQUFPLEtBQUtDLEtBQUssTUFBTSxPQUFPO0FBRzlCLFNBQVNDLFVBQVUsRUFBRUMsYUFBYSxRQUFRLGFBQWE7QUFFdkQsU0FBU0MsU0FBUyxRQUFRLGFBQWE7QUFFdkMsU0FBU0MsZ0JBQWdCLFFBQVEsNkJBQTZCO0FBRTlELE9BQU9DLGdCQUFnQixNQUFNLHNCQUFzQjtBQUFDLFNBQUFDLEdBQUEsSUFBQUMsSUFBQTtBQUVwRCxJQUFNQyxTQUFTLEdBQUdOLGFBQWEsQ0FBQyxVQUFDTyxLQUFvQixFQUFLO0VBQ3hELE9BQU87SUFDTEMsZUFBZSxFQUFFWCxHQUFHLENBQUFZLGVBQUEsS0FBQUEsZUFBQSxHQUFBQywyQkFBQSwySUFFSlQsU0FBUyxDQUFDTSxLQUFLLEVBQUUsU0FBUyxDQUFDO0VBSzdDLENBQUM7QUFDSCxDQUFDLENBQUM7QUFRRixXQUFhSSx1QkFBdUIsMEJBQUFDLG9CQUFBO0VBR2xDLFNBQUFELHdCQUFZRSxLQUEyQixFQUFFO0lBQUEsSUFBQUMsS0FBQTtJQUN2Q0EsS0FBQSxHQUFBRixvQkFBQSxDQUFBRyxJQUFBLE9BQU1GLEtBQUssQ0FBQztJQUFDQyxLQUFBLENBSWZFLFFBQVEsR0FBRyxVQUFDQyxHQUFXO01BQUEsT0FBS2YsZ0JBQWdCLENBQUNlLEdBQUcsRUFBRUgsS0FBQSxDQUFLRCxLQUFLLENBQUNOLEtBQUssQ0FBQztJQUFBO0lBQUFPLEtBQUEsQ0FVbkVJLGFBQWEsR0FBRyxVQUFDQyxHQUE2QixFQUFLO01BQ2pETCxLQUFBLENBQUtNLFVBQVUsR0FBR0QsR0FBRztJQUN2QixDQUFDO0lBZkNMLEtBQUEsQ0FBS00sVUFBVSxHQUFHQyxTQUFTO0lBQUMsT0FBQVAsS0FBQTtFQUM5QjtFQUFDUSxjQUFBLENBQUFYLHVCQUFBLEVBQUFDLG9CQUFBO0VBQUEsSUFBQVcsTUFBQSxHQUFBWix1QkFBQSxDQUFBYSxTQUFBO0VBQUFELE1BQUEsQ0FJREUsaUJBQWlCLEdBQWpCLFNBQUFBLGtCQUFBLEVBQW9CO0lBQ2xCLElBQUksQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDZCxDQUFDO0VBQUFILE1BQUEsQ0FFREksa0JBQWtCLEdBQWxCLFNBQUFBLG1CQUFBLEVBQXFCO0lBQ25CLElBQUksQ0FBQ0QsS0FBSyxDQUFDLENBQUM7RUFDZCxDQUFDO0VBQUFILE1BQUEsQ0FNREcsS0FBSyxHQUFMLFNBQUFBLE1BQUEsRUFBUTtJQUNOLElBQUksSUFBSSxDQUFDTixVQUFVLEVBQUU7TUFDbkIsSUFBQVEsV0FBQSxHQUErQyxJQUFJLENBQUNmLEtBQUs7UUFBckNnQixlQUFlLEdBQUFELFdBQUEsQ0FBM0JFLFVBQVU7UUFBbUJDLEtBQUssR0FBQUgsV0FBQSxDQUFMRyxLQUFLO01BQzFDNUIsZ0JBQWdCLENBQUMsSUFBSSxDQUFDaUIsVUFBVSxFQUFFVyxLQUFLLEVBQUVGLGVBQWUsRUFBRSxJQUFJLENBQUNiLFFBQVEsRUFBRWYsU0FBUyxDQUFDLElBQUksQ0FBQ1ksS0FBSyxDQUFDTixLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0c7RUFDRixDQUFDO0VBQUFnQixNQUFBLENBRURTLE1BQU0sR0FBTixTQUFBQSxPQUFBLEVBQVM7SUFDUCxvQkFDRTNCLElBQUE7TUFDRTRCLFNBQVMsRUFBRTNCLFNBQVMsQ0FBQyxJQUFJLENBQUNPLEtBQUssQ0FBQ04sS0FBSyxDQUFDLENBQUNDLGVBQWdCO01BQ3ZEMEIsR0FBRyxFQUFFLElBQUksQ0FBQ2hCLGFBQWM7TUFDeEIsZUFBWTtJQUFpQixDQUM5QixDQUFDO0VBRU4sQ0FBQztFQUFBLE9BQUFQLHVCQUFBO0FBQUEsRUFyQzBDYixLQUFLLENBQUNxQyxhQUFhO0FBd0NoRSxlQUFlcEMsVUFBVSxDQUFDWSx1QkFBdUIsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==