import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { render, screen } from '@testing-library/react';
import React from 'react';
import GraphTicks from './GraphTicks';
import { jsx as _jsx } from "react/jsx-runtime";
var setup = function setup(propOverrides) {
  var defaultProps = _extends({
    items: [{
      valueWidth: 100,
      valueOffset: 25,
      serviceName: 'a'
    }, {
      valueWidth: 100,
      valueOffset: 50,
      serviceName: 'b'
    }],
    valueWidth: 200,
    numTicks: 4
  }, propOverrides);
  return render( /*#__PURE__*/_jsx("svg", {
    children: /*#__PURE__*/_jsx(GraphTicks, _extends({}, defaultProps))
  }));
};
describe('GraphTicks tests', function () {
  it('creates a <g> for ticks', function () {
    setup();
    expect(screen.getByTestId('ticks')).toBeInTheDocument();
  });
  it('creates a line for each ticks excluding the first and last', function () {
    setup({
      numTicks: 6
    });

    // defaultProps.numTicks - 1 === expect
    expect(screen.getByTestId('ticks').children).toHaveLength(5);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZW5kZXIiLCJzY3JlZW4iLCJSZWFjdCIsIkdyYXBoVGlja3MiLCJqc3giLCJfanN4Iiwic2V0dXAiLCJwcm9wT3ZlcnJpZGVzIiwiZGVmYXVsdFByb3BzIiwiX2V4dGVuZHMiLCJpdGVtcyIsInZhbHVlV2lkdGgiLCJ2YWx1ZU9mZnNldCIsInNlcnZpY2VOYW1lIiwibnVtVGlja3MiLCJjaGlsZHJlbiIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJnZXRCeVRlc3RJZCIsInRvQmVJblRoZURvY3VtZW50IiwidG9IYXZlTGVuZ3RoIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9UcmFjZVBhZ2VIZWFkZXIvU3BhbkdyYXBoL0dyYXBoVGlja3MudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgR3JhcGhUaWNrcywgeyBHcmFwaFRpY2tzUHJvcHMgfSBmcm9tICcuL0dyYXBoVGlja3MnO1xuXG5jb25zdCBzZXR1cCA9IChwcm9wT3ZlcnJpZGVzPzogR3JhcGhUaWNrc1Byb3BzKSA9PiB7XG4gIGNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgICBpdGVtczogW1xuICAgICAgeyB2YWx1ZVdpZHRoOiAxMDAsIHZhbHVlT2Zmc2V0OiAyNSwgc2VydmljZU5hbWU6ICdhJyB9LFxuICAgICAgeyB2YWx1ZVdpZHRoOiAxMDAsIHZhbHVlT2Zmc2V0OiA1MCwgc2VydmljZU5hbWU6ICdiJyB9LFxuICAgIF0sXG4gICAgdmFsdWVXaWR0aDogMjAwLFxuICAgIG51bVRpY2tzOiA0LFxuICAgIC4uLnByb3BPdmVycmlkZXMsXG4gIH07XG5cbiAgcmV0dXJuIHJlbmRlcihcbiAgICA8c3ZnPlxuICAgICAgPEdyYXBoVGlja3Mgey4uLmRlZmF1bHRQcm9wc30gLz5cbiAgICA8L3N2Zz5cbiAgKTtcbn07XG5cbmRlc2NyaWJlKCdHcmFwaFRpY2tzIHRlc3RzJywgKCkgPT4ge1xuICBpdCgnY3JlYXRlcyBhIDxnPiBmb3IgdGlja3MnLCAoKSA9PiB7XG4gICAgc2V0dXAoKTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3RpY2tzJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdjcmVhdGVzIGEgbGluZSBmb3IgZWFjaCB0aWNrcyBleGNsdWRpbmcgdGhlIGZpcnN0IGFuZCBsYXN0JywgKCkgPT4ge1xuICAgIHNldHVwKHsgbnVtVGlja3M6IDYgfSk7XG5cbiAgICAvLyBkZWZhdWx0UHJvcHMubnVtVGlja3MgLSAxID09PSBleHBlY3RcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCd0aWNrcycpLmNoaWxkcmVuKS50b0hhdmVMZW5ndGgoNSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxNQUFNLEVBQUVDLE1BQU0sUUFBUSx3QkFBd0I7QUFDdkQsT0FBT0MsS0FBSyxNQUFNLE9BQU87QUFFekIsT0FBT0MsVUFBVSxNQUEyQixjQUFjO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBRTNELElBQU1DLEtBQUssR0FBRyxTQUFSQSxLQUFLQSxDQUFJQyxhQUErQixFQUFLO0VBQ2pELElBQU1DLFlBQVksR0FBQUMsUUFBQTtJQUNoQkMsS0FBSyxFQUFFLENBQ0w7TUFBRUMsVUFBVSxFQUFFLEdBQUc7TUFBRUMsV0FBVyxFQUFFLEVBQUU7TUFBRUMsV0FBVyxFQUFFO0lBQUksQ0FBQyxFQUN0RDtNQUFFRixVQUFVLEVBQUUsR0FBRztNQUFFQyxXQUFXLEVBQUUsRUFBRTtNQUFFQyxXQUFXLEVBQUU7SUFBSSxDQUFDLENBQ3ZEO0lBQ0RGLFVBQVUsRUFBRSxHQUFHO0lBQ2ZHLFFBQVEsRUFBRTtFQUFDLEdBQ1JQLGFBQWEsQ0FDakI7RUFFRCxPQUFPUCxNQUFNLGVBQ1hLLElBQUE7SUFBQVUsUUFBQSxlQUNFVixJQUFBLENBQUNGLFVBQVUsRUFBQU0sUUFBQSxLQUFLRCxZQUFZLENBQUc7RUFBQyxDQUM3QixDQUNQLENBQUM7QUFDSCxDQUFDO0FBRURRLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxZQUFNO0VBQ2pDQyxFQUFFLENBQUMseUJBQXlCLEVBQUUsWUFBTTtJQUNsQ1gsS0FBSyxDQUFDLENBQUM7SUFFUFksTUFBTSxDQUFDakIsTUFBTSxDQUFDa0IsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLENBQUM7RUFDekQsQ0FBQyxDQUFDO0VBRUZILEVBQUUsQ0FBQyw0REFBNEQsRUFBRSxZQUFNO0lBQ3JFWCxLQUFLLENBQUM7TUFBRVEsUUFBUSxFQUFFO0lBQUUsQ0FBQyxDQUFDOztJQUV0QjtJQUNBSSxNQUFNLENBQUNqQixNQUFNLENBQUNrQixXQUFXLENBQUMsT0FBTyxDQUFDLENBQUNKLFFBQVEsQ0FBQyxDQUFDTSxZQUFZLENBQUMsQ0FBQyxDQUFDO0VBQzlELENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==