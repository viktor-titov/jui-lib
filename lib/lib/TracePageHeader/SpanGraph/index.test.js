import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _extends from "@babel/runtime/helpers/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { getAllByTestId, render, screen } from '@testing-library/react';
import React from 'react';
import traceGenerator from '../../demo/trace-generators';
import transformTraceData from '../../model/transform-trace-data';
import { polyfill as polyfillAnimationFrame } from '../../utils/test/requestAnimationFrame';
import SpanGraph, { TIMELINE_TICK_INTERVAL } from './index';
import { jsx as _jsx } from "react/jsx-runtime";
describe('<SpanGraph>', function () {
  polyfillAnimationFrame(window);
  var trace = transformTraceData(traceGenerator.trace({}));
  var props = {
    trace: trace,
    updateViewRangeTime: function updateViewRangeTime() {},
    viewRange: {
      time: {
        current: [0, 1]
      }
    }
  };
  beforeEach(function () {
    render( /*#__PURE__*/_jsx(SpanGraph, _extends({}, props)));
  });
  it('renders <CanvasSpanGraph />', function () {
    var canvasSpanGraphComponent = screen.getByTestId('CanvasSpanGraph');
    expect(canvasSpanGraphComponent).toBeTruthy();
  });
  it('renders <TickLabels />', function () {
    var tickLabelsComponent = screen.getByTestId('TickLabels');
    expect(tickLabelsComponent).toBeTruthy();
  });
  it('returns an empty div if a trace is not provided', function () {
    var _render = render( /*#__PURE__*/_jsx(SpanGraph, _extends({}, _extends({}, props, {
        trace: null
      })))),
      container = _render.container;
    expect(container.firstChild).toBeEmptyDOMElement();
  });
  it('renders <TickLabels /> with the correct numnber of ticks', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var tickLabelsDiv;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          tickLabelsDiv = screen.getByTestId('TickLabels');
          expect(getAllByTestId(tickLabelsDiv, 'tick').length).toBe(TIMELINE_TICK_INTERVAL + 1);
        case 2:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRBbGxCeVRlc3RJZCIsInJlbmRlciIsInNjcmVlbiIsIlJlYWN0IiwidHJhY2VHZW5lcmF0b3IiLCJ0cmFuc2Zvcm1UcmFjZURhdGEiLCJwb2x5ZmlsbCIsInBvbHlmaWxsQW5pbWF0aW9uRnJhbWUiLCJTcGFuR3JhcGgiLCJUSU1FTElORV9USUNLX0lOVEVSVkFMIiwianN4IiwiX2pzeCIsImRlc2NyaWJlIiwid2luZG93IiwidHJhY2UiLCJwcm9wcyIsInVwZGF0ZVZpZXdSYW5nZVRpbWUiLCJ2aWV3UmFuZ2UiLCJ0aW1lIiwiY3VycmVudCIsImJlZm9yZUVhY2giLCJfZXh0ZW5kcyIsIml0IiwiY2FudmFzU3BhbkdyYXBoQ29tcG9uZW50IiwiZ2V0QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlVHJ1dGh5IiwidGlja0xhYmVsc0NvbXBvbmVudCIsIl9yZW5kZXIiLCJjb250YWluZXIiLCJmaXJzdENoaWxkIiwidG9CZUVtcHR5RE9NRWxlbWVudCIsIl9hc3luY1RvR2VuZXJhdG9yIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsIm1hcmsiLCJfY2FsbGVlIiwidGlja0xhYmVsc0RpdiIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJsZW5ndGgiLCJ0b0JlIiwic3RvcCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvVHJhY2VQYWdlSGVhZGVyL1NwYW5HcmFwaC9pbmRleC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgZ2V0QWxsQnlUZXN0SWQsIHJlbmRlciwgc2NyZWVuIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgdHJhY2VHZW5lcmF0b3IgZnJvbSAnLi4vLi4vZGVtby90cmFjZS1nZW5lcmF0b3JzJztcbmltcG9ydCB0cmFuc2Zvcm1UcmFjZURhdGEgZnJvbSAnLi4vLi4vbW9kZWwvdHJhbnNmb3JtLXRyYWNlLWRhdGEnO1xuaW1wb3J0IHsgcG9seWZpbGwgYXMgcG9seWZpbGxBbmltYXRpb25GcmFtZSB9IGZyb20gJy4uLy4uL3V0aWxzL3Rlc3QvcmVxdWVzdEFuaW1hdGlvbkZyYW1lJztcblxuaW1wb3J0IFNwYW5HcmFwaCwgeyBTcGFuR3JhcGhQcm9wcywgVElNRUxJTkVfVElDS19JTlRFUlZBTCB9IGZyb20gJy4vaW5kZXgnO1xuXG5kZXNjcmliZSgnPFNwYW5HcmFwaD4nLCAoKSA9PiB7XG4gIHBvbHlmaWxsQW5pbWF0aW9uRnJhbWUod2luZG93KTtcblxuICBjb25zdCB0cmFjZSA9IHRyYW5zZm9ybVRyYWNlRGF0YSh0cmFjZUdlbmVyYXRvci50cmFjZSh7fSkpITtcbiAgY29uc3QgcHJvcHMgPSB7XG4gICAgdHJhY2UsXG4gICAgdXBkYXRlVmlld1JhbmdlVGltZTogKCkgPT4ge30sXG4gICAgdmlld1JhbmdlOiB7XG4gICAgICB0aW1lOiB7XG4gICAgICAgIGN1cnJlbnQ6IFswLCAxXSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICByZW5kZXIoPFNwYW5HcmFwaCB7Li4uKHByb3BzIGFzIHVua25vd24gYXMgU3BhbkdyYXBoUHJvcHMpfSAvPik7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIDxDYW52YXNTcGFuR3JhcGggLz4nLCAoKSA9PiB7XG4gICAgY29uc3QgY2FudmFzU3BhbkdyYXBoQ29tcG9uZW50ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdDYW52YXNTcGFuR3JhcGgnKTtcbiAgICBleHBlY3QoY2FudmFzU3BhbkdyYXBoQ29tcG9uZW50KS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIDxUaWNrTGFiZWxzIC8+JywgKCkgPT4ge1xuICAgIGNvbnN0IHRpY2tMYWJlbHNDb21wb25lbnQgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ1RpY2tMYWJlbHMnKTtcbiAgICBleHBlY3QodGlja0xhYmVsc0NvbXBvbmVudCkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgncmV0dXJucyBhbiBlbXB0eSBkaXYgaWYgYSB0cmFjZSBpcyBub3QgcHJvdmlkZWQnLCAoKSA9PiB7XG4gICAgY29uc3QgeyBjb250YWluZXIgfSA9IHJlbmRlcig8U3BhbkdyYXBoIHsuLi4oeyAuLi5wcm9wcywgdHJhY2U6IG51bGwgfSBhcyB1bmtub3duIGFzIFNwYW5HcmFwaFByb3BzKX0gLz4pO1xuICAgIGV4cGVjdChjb250YWluZXIuZmlyc3RDaGlsZCkudG9CZUVtcHR5RE9NRWxlbWVudCgpO1xuICB9KTtcblxuICBpdCgncmVuZGVycyA8VGlja0xhYmVscyAvPiB3aXRoIHRoZSBjb3JyZWN0IG51bW5iZXIgb2YgdGlja3MnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdGlja0xhYmVsc0RpdiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnVGlja0xhYmVscycpO1xuICAgIGV4cGVjdChnZXRBbGxCeVRlc3RJZCh0aWNrTGFiZWxzRGl2LCAndGljaycpLmxlbmd0aCkudG9CZShUSU1FTElORV9USUNLX0lOVEVSVkFMICsgMSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLGNBQWMsRUFBRUMsTUFBTSxFQUFFQyxNQUFNLFFBQVEsd0JBQXdCO0FBQ3ZFLE9BQU9DLEtBQUssTUFBTSxPQUFPO0FBRXpCLE9BQU9DLGNBQWMsTUFBTSw2QkFBNkI7QUFDeEQsT0FBT0Msa0JBQWtCLE1BQU0sa0NBQWtDO0FBQ2pFLFNBQVNDLFFBQVEsSUFBSUMsc0JBQXNCLFFBQVEsd0NBQXdDO0FBRTNGLE9BQU9DLFNBQVMsSUFBb0JDLHNCQUFzQixRQUFRLFNBQVM7QUFBQyxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFFNUVDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBTTtFQUM1Qkwsc0JBQXNCLENBQUNNLE1BQU0sQ0FBQztFQUU5QixJQUFNQyxLQUFLLEdBQUdULGtCQUFrQixDQUFDRCxjQUFjLENBQUNVLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFFO0VBQzNELElBQU1DLEtBQUssR0FBRztJQUNaRCxLQUFLLEVBQUxBLEtBQUs7SUFDTEUsbUJBQW1CLEVBQUUsU0FBQUEsb0JBQUEsRUFBTSxDQUFDLENBQUM7SUFDN0JDLFNBQVMsRUFBRTtNQUNUQyxJQUFJLEVBQUU7UUFDSkMsT0FBTyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7TUFDaEI7SUFDRjtFQUNGLENBQUM7RUFFREMsVUFBVSxDQUFDLFlBQU07SUFDZm5CLE1BQU0sZUFBQ1UsSUFBQSxDQUFDSCxTQUFTLEVBQUFhLFFBQUEsS0FBTU4sS0FBSyxDQUFpQyxDQUFDLENBQUM7RUFDakUsQ0FBQyxDQUFDO0VBRUZPLEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxZQUFNO0lBQ3RDLElBQU1DLHdCQUF3QixHQUFHckIsTUFBTSxDQUFDc0IsV0FBVyxDQUFDLGlCQUFpQixDQUFDO0lBQ3RFQyxNQUFNLENBQUNGLHdCQUF3QixDQUFDLENBQUNHLFVBQVUsQ0FBQyxDQUFDO0VBQy9DLENBQUMsQ0FBQztFQUVGSixFQUFFLENBQUMsd0JBQXdCLEVBQUUsWUFBTTtJQUNqQyxJQUFNSyxtQkFBbUIsR0FBR3pCLE1BQU0sQ0FBQ3NCLFdBQVcsQ0FBQyxZQUFZLENBQUM7SUFDNURDLE1BQU0sQ0FBQ0UsbUJBQW1CLENBQUMsQ0FBQ0QsVUFBVSxDQUFDLENBQUM7RUFDMUMsQ0FBQyxDQUFDO0VBRUZKLEVBQUUsQ0FBQyxpREFBaUQsRUFBRSxZQUFNO0lBQzFELElBQUFNLE9BQUEsR0FBc0IzQixNQUFNLGVBQUNVLElBQUEsQ0FBQ0gsU0FBUyxFQUFBYSxRQUFBLEtBQUFBLFFBQUEsS0FBV04sS0FBSztRQUFFRCxLQUFLLEVBQUU7TUFBSSxHQUFtQyxDQUFDLENBQUM7TUFBakdlLFNBQVMsR0FBQUQsT0FBQSxDQUFUQyxTQUFTO0lBQ2pCSixNQUFNLENBQUNJLFNBQVMsQ0FBQ0MsVUFBVSxDQUFDLENBQUNDLG1CQUFtQixDQUFDLENBQUM7RUFDcEQsQ0FBQyxDQUFDO0VBRUZULEVBQUUsQ0FBQywwREFBMEQsZUFBQVUsaUJBQUEsZUFBQUMsbUJBQUEsQ0FBQUMsSUFBQSxDQUFFLFNBQUFDLFFBQUE7SUFBQSxJQUFBQyxhQUFBO0lBQUEsT0FBQUgsbUJBQUEsQ0FBQUksSUFBQSxVQUFBQyxTQUFBQyxRQUFBO01BQUEsa0JBQUFBLFFBQUEsQ0FBQUMsSUFBQSxHQUFBRCxRQUFBLENBQUFFLElBQUE7UUFBQTtVQUN2REwsYUFBYSxHQUFHbEMsTUFBTSxDQUFDc0IsV0FBVyxDQUFDLFlBQVksQ0FBQztVQUN0REMsTUFBTSxDQUFDekIsY0FBYyxDQUFDb0MsYUFBYSxFQUFFLE1BQU0sQ0FBQyxDQUFDTSxNQUFNLENBQUMsQ0FBQ0MsSUFBSSxDQUFDbEMsc0JBQXNCLEdBQUcsQ0FBQyxDQUFDO1FBQUM7UUFBQTtVQUFBLE9BQUE4QixRQUFBLENBQUFLLElBQUE7TUFBQTtJQUFBLEdBQUFULE9BQUE7RUFBQSxDQUN2RixHQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119