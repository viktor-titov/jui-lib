import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
import { render, screen } from '@testing-library/react';
import React from 'react';
import TickLabels from './TickLabels';
import { jsx as _jsx } from "react/jsx-runtime";
describe('<TickLabels>', function () {
  var defaultProps = {
    numTicks: 4,
    duration: 5000
  };
  var ticks;
  beforeEach(function () {
    render( /*#__PURE__*/_jsx(TickLabels, _extends({}, defaultProps)));
    ticks = screen.getAllByTestId('tick');
  });
  it('renders the right number of ticks', function () {
    expect(ticks).toHaveLength(defaultProps.numTicks + 1);
  });
  it('places the first tick on the left', function () {
    var firstTick = ticks[0];
    expect(firstTick).toHaveStyle("left: 0%;");
  });
  it('places the last tick on the right', function () {
    var lastTick = ticks[ticks.length - 1];
    expect(lastTick).toHaveStyle("right: 0%;");
  });
  it('places middle ticks at proper intervals', function () {
    var positions = ['25%', '50%', '75%'];
    positions.forEach(function (pos, i) {
      var tick = ticks.at(i + 1);
      expect(tick).toHaveStyle("left: " + pos + ";");
    });
  });
  it('shows the correct value above each tick', function () {
    expect(screen.getByText('0Î¼s')).toBeTruthy();
    expect(screen.getByText('1.25ms')).toBeTruthy();
    expect(screen.getByText('2.5ms')).toBeTruthy();
    expect(screen.getByText('3.75ms')).toBeTruthy();
    expect(screen.getByText('5ms')).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZW5kZXIiLCJzY3JlZW4iLCJSZWFjdCIsIlRpY2tMYWJlbHMiLCJqc3giLCJfanN4IiwiZGVzY3JpYmUiLCJkZWZhdWx0UHJvcHMiLCJudW1UaWNrcyIsImR1cmF0aW9uIiwidGlja3MiLCJiZWZvcmVFYWNoIiwiX2V4dGVuZHMiLCJnZXRBbGxCeVRlc3RJZCIsIml0IiwiZXhwZWN0IiwidG9IYXZlTGVuZ3RoIiwiZmlyc3RUaWNrIiwidG9IYXZlU3R5bGUiLCJsYXN0VGljayIsImxlbmd0aCIsInBvc2l0aW9ucyIsImZvckVhY2giLCJwb3MiLCJpIiwidGljayIsImF0IiwiZ2V0QnlUZXh0IiwidG9CZVRydXRoeSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvVHJhY2VQYWdlSGVhZGVyL1NwYW5HcmFwaC9UaWNrTGFiZWxzLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxNyBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4gfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBUaWNrTGFiZWxzIGZyb20gJy4vVGlja0xhYmVscyc7XG5cbmRlc2NyaWJlKCc8VGlja0xhYmVscz4nLCAoKSA9PiB7XG4gIGNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgICBudW1UaWNrczogNCxcbiAgICBkdXJhdGlvbjogNTAwMCxcbiAgfTtcblxuICBsZXQgdGlja3M6IEhUTUxFbGVtZW50W107XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgcmVuZGVyKDxUaWNrTGFiZWxzIHsuLi5kZWZhdWx0UHJvcHN9IC8+KTtcbiAgICB0aWNrcyA9IHNjcmVlbi5nZXRBbGxCeVRlc3RJZCgndGljaycpO1xuICB9KTtcblxuICBpdCgncmVuZGVycyB0aGUgcmlnaHQgbnVtYmVyIG9mIHRpY2tzJywgKCkgPT4ge1xuICAgIGV4cGVjdCh0aWNrcykudG9IYXZlTGVuZ3RoKGRlZmF1bHRQcm9wcy5udW1UaWNrcyArIDEpO1xuICB9KTtcblxuICBpdCgncGxhY2VzIHRoZSBmaXJzdCB0aWNrIG9uIHRoZSBsZWZ0JywgKCkgPT4ge1xuICAgIGNvbnN0IGZpcnN0VGljayA9IHRpY2tzWzBdO1xuICAgIGV4cGVjdChmaXJzdFRpY2spLnRvSGF2ZVN0eWxlKGBsZWZ0OiAwJTtgKTtcbiAgfSk7XG5cbiAgaXQoJ3BsYWNlcyB0aGUgbGFzdCB0aWNrIG9uIHRoZSByaWdodCcsICgpID0+IHtcbiAgICBjb25zdCBsYXN0VGljayA9IHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdO1xuICAgIGV4cGVjdChsYXN0VGljaykudG9IYXZlU3R5bGUoYHJpZ2h0OiAwJTtgKTtcbiAgfSk7XG5cbiAgaXQoJ3BsYWNlcyBtaWRkbGUgdGlja3MgYXQgcHJvcGVyIGludGVydmFscycsICgpID0+IHtcbiAgICBjb25zdCBwb3NpdGlvbnMgPSBbJzI1JScsICc1MCUnLCAnNzUlJ107XG4gICAgcG9zaXRpb25zLmZvckVhY2goKHBvcywgaSkgPT4ge1xuICAgICAgY29uc3QgdGljayA9IHRpY2tzLmF0KGkgKyAxKTtcbiAgICAgIGV4cGVjdCh0aWNrKS50b0hhdmVTdHlsZShgbGVmdDogJHtwb3N9O2ApO1xuICAgIH0pO1xuICB9KTtcbiAgaXQoJ3Nob3dzIHRoZSBjb3JyZWN0IHZhbHVlIGFib3ZlIGVhY2ggdGljaycsICgpID0+IHtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnMM68cycpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJzEuMjVtcycpKS50b0JlVHJ1dGh5KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJzIuNW1zJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnMy43NW1zJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnNW1zJykpLnRvQmVUcnV0aHkoKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsTUFBTSxFQUFFQyxNQUFNLFFBQVEsd0JBQXdCO0FBQ3ZELE9BQU9DLEtBQUssTUFBTSxPQUFPO0FBRXpCLE9BQU9DLFVBQVUsTUFBTSxjQUFjO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBRXRDQyxRQUFRLENBQUMsY0FBYyxFQUFFLFlBQU07RUFDN0IsSUFBTUMsWUFBWSxHQUFHO0lBQ25CQyxRQUFRLEVBQUUsQ0FBQztJQUNYQyxRQUFRLEVBQUU7RUFDWixDQUFDO0VBRUQsSUFBSUMsS0FBb0I7RUFFeEJDLFVBQVUsQ0FBQyxZQUFNO0lBQ2ZYLE1BQU0sZUFBQ0ssSUFBQSxDQUFDRixVQUFVLEVBQUFTLFFBQUEsS0FBS0wsWUFBWSxDQUFHLENBQUMsQ0FBQztJQUN4Q0csS0FBSyxHQUFHVCxNQUFNLENBQUNZLGNBQWMsQ0FBQyxNQUFNLENBQUM7RUFDdkMsQ0FBQyxDQUFDO0VBRUZDLEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRSxZQUFNO0lBQzVDQyxNQUFNLENBQUNMLEtBQUssQ0FBQyxDQUFDTSxZQUFZLENBQUNULFlBQVksQ0FBQ0MsUUFBUSxHQUFHLENBQUMsQ0FBQztFQUN2RCxDQUFDLENBQUM7RUFFRk0sRUFBRSxDQUFDLG1DQUFtQyxFQUFFLFlBQU07SUFDNUMsSUFBTUcsU0FBUyxHQUFHUCxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzFCSyxNQUFNLENBQUNFLFNBQVMsQ0FBQyxDQUFDQyxXQUFXLFlBQVksQ0FBQztFQUM1QyxDQUFDLENBQUM7RUFFRkosRUFBRSxDQUFDLG1DQUFtQyxFQUFFLFlBQU07SUFDNUMsSUFBTUssUUFBUSxHQUFHVCxLQUFLLENBQUNBLEtBQUssQ0FBQ1UsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUN4Q0wsTUFBTSxDQUFDSSxRQUFRLENBQUMsQ0FBQ0QsV0FBVyxhQUFhLENBQUM7RUFDNUMsQ0FBQyxDQUFDO0VBRUZKLEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRSxZQUFNO0lBQ2xELElBQU1PLFNBQVMsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDO0lBQ3ZDQSxTQUFTLENBQUNDLE9BQU8sQ0FBQyxVQUFDQyxHQUFHLEVBQUVDLENBQUMsRUFBSztNQUM1QixJQUFNQyxJQUFJLEdBQUdmLEtBQUssQ0FBQ2dCLEVBQUUsQ0FBQ0YsQ0FBQyxHQUFHLENBQUMsQ0FBQztNQUM1QlQsTUFBTSxDQUFDVSxJQUFJLENBQUMsQ0FBQ1AsV0FBVyxZQUFVSyxHQUFHLE1BQUcsQ0FBQztJQUMzQyxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFDRlQsRUFBRSxDQUFDLHlDQUF5QyxFQUFFLFlBQU07SUFDbERDLE1BQU0sQ0FBQ2QsTUFBTSxDQUFDMEIsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUNDLFVBQVUsQ0FBQyxDQUFDO0lBQzVDYixNQUFNLENBQUNkLE1BQU0sQ0FBQzBCLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDQyxVQUFVLENBQUMsQ0FBQztJQUMvQ2IsTUFBTSxDQUFDZCxNQUFNLENBQUMwQixTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQ0MsVUFBVSxDQUFDLENBQUM7SUFDOUNiLE1BQU0sQ0FBQ2QsTUFBTSxDQUFDMEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUNDLFVBQVUsQ0FBQyxDQUFDO0lBQy9DYixNQUFNLENBQUNkLE1BQU0sQ0FBQzBCLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDQyxVQUFVLENBQUMsQ0FBQztFQUM5QyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=