import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;
// Copyright (c) 2018 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { css } from '@emotion/css';
import cx from 'classnames';
import React, { memo } from 'react';
import { config, reportInteraction } from '@grafana/runtime';
import { Button, useStyles2 } from '@grafana/ui';
import UiFindInput from '../common/UiFindInput';
import { ubFlexAuto, ubJustifyEnd } from '../uberUtilityStyles';

// eslint-disable-next-line no-duplicate-imports
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
export var getStyles = function getStyles(theme) {
  return {
    TracePageSearchBar: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n      label: TracePageSearchBar;\n      float: right;\n      position: absolute;\n      top: 0;\n      right: 0;\n      z-index: ", ";\n      background: ", ";\n      margin-bottom: -48px;\n      padding: 8px;\n      margin-right: 2px;\n      border-radius: 4px;\n      box-shadow: ", ";\n    "])), theme.zIndex.navbarFixed, theme.colors.background.primary, theme.shadows.z2),
    TracePageSearchBarBar: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose(["\n      label: TracePageSearchBarBar;\n      max-width: 20rem;\n      transition: max-width 0.5s;\n      &:focus-within {\n        max-width: 100%;\n      }\n    "]))),
    TracePageSearchBarSuffix: css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose(["\n      label: TracePageSearchBarSuffix;\n      opacity: 0.6;\n    "]))),
    TracePageSearchBarBtn: css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose(["\n      label: TracePageSearchBarBtn;\n      transition: 0.2s;\n      margin-left: 8px;\n    "]))),
    TracePageSearchBarBtnDisabled: css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteralLoose(["\n      label: TracePageSearchBarBtnDisabled;\n      opacity: 0.5;\n    "]))),
    TracePageSearchBarLocateBtn: css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteralLoose(["\n      label: TracePageSearchBarLocateBtn;\n      padding: 1px 8px 4px;\n    "])))
  };
};
export default /*#__PURE__*/memo(function TracePageSearchBar(props) {
  var _cx;
  var navigable = props.navigable,
    setSearch = props.setSearch,
    searchValue = props.searchValue,
    searchBarSuffix = props.searchBarSuffix,
    spanFindMatches = props.spanFindMatches,
    focusedSpanIdForSearch = props.focusedSpanIdForSearch,
    setSearchBarSuffix = props.setSearchBarSuffix,
    setFocusedSpanIdForSearch = props.setFocusedSpanIdForSearch,
    datasourceType = props.datasourceType;
  var styles = useStyles2(getStyles);
  var suffix = searchValue ? /*#__PURE__*/_jsx("span", {
    className: styles.TracePageSearchBarSuffix,
    "aria-label": "Search bar suffix",
    children: searchBarSuffix
  }) : null;
  var btnClass = cx(styles.TracePageSearchBarBtn, (_cx = {}, _cx[styles.TracePageSearchBarBtnDisabled] = !searchValue, _cx));
  var uiFindInputInputProps = {
    className: cx(styles.TracePageSearchBarBar, ubFlexAuto),
    name: 'search',
    suffix: suffix
  };
  var setTraceSearch = function setTraceSearch(value) {
    setFocusedSpanIdForSearch('');
    setSearchBarSuffix('');
    setSearch(value);
  };
  var nextResult = function nextResult() {
    reportInteraction('grafana_traces_trace_view_find_next_prev_clicked', {
      datasourceType: datasourceType,
      grafana_version: config.buildInfo.version,
      direction: 'next'
    });
    var spanMatches = Array.from(spanFindMatches);
    var prevMatchedIndex = spanMatches.indexOf(focusedSpanIdForSearch) ? spanMatches.indexOf(focusedSpanIdForSearch) : 0;

    // new query || at end, go to start
    if (prevMatchedIndex === -1 || prevMatchedIndex === spanMatches.length - 1) {
      setFocusedSpanIdForSearch(spanMatches[0]);
      setSearchBarSuffix(getSearchBarSuffix(1));
      return;
    }

    // get next
    setFocusedSpanIdForSearch(spanMatches[prevMatchedIndex + 1]);
    setSearchBarSuffix(getSearchBarSuffix(prevMatchedIndex + 2));
  };
  var prevResult = function prevResult() {
    reportInteraction('grafana_traces_trace_view_find_next_prev_clicked', {
      datasourceType: datasourceType,
      grafana_version: config.buildInfo.version,
      direction: 'prev'
    });
    var spanMatches = Array.from(spanFindMatches);
    var prevMatchedIndex = spanMatches.indexOf(focusedSpanIdForSearch) ? spanMatches.indexOf(focusedSpanIdForSearch) : 0;

    // new query || at start, go to end
    if (prevMatchedIndex === -1 || prevMatchedIndex === 0) {
      setFocusedSpanIdForSearch(spanMatches[spanMatches.length - 1]);
      setSearchBarSuffix(getSearchBarSuffix(spanMatches.length));
      return;
    }

    // get prev
    setFocusedSpanIdForSearch(spanMatches[prevMatchedIndex - 1]);
    setSearchBarSuffix(getSearchBarSuffix(prevMatchedIndex));
  };
  var getSearchBarSuffix = function getSearchBarSuffix(index) {
    if (spanFindMatches != null && spanFindMatches.size && (spanFindMatches == null ? void 0 : spanFindMatches.size) > 0) {
      return index + ' of ' + (spanFindMatches == null ? void 0 : spanFindMatches.size);
    }
    return '';
  };
  return /*#__PURE__*/_jsx("div", {
    className: styles.TracePageSearchBar,
    children: /*#__PURE__*/_jsxs("span", {
      className: ubJustifyEnd,
      style: {
        display: 'flex'
      },
      children: [/*#__PURE__*/_jsx(UiFindInput, {
        onChange: setTraceSearch,
        value: searchValue,
        inputProps: uiFindInputInputProps,
        allowClear: true
      }), /*#__PURE__*/_jsx(_Fragment, {
        children: navigable && /*#__PURE__*/_jsxs(_Fragment, {
          children: [/*#__PURE__*/_jsx(Button, {
            className: btnClass,
            variant: "secondary",
            disabled: !searchValue,
            type: "button",
            icon: "arrow-down",
            "aria-label": "Next results button",
            onClick: nextResult
          }), /*#__PURE__*/_jsx(Button, {
            className: btnClass,
            variant: "secondary",
            disabled: !searchValue,
            type: "button",
            icon: "arrow-up",
            "aria-label": "Prev results button",
            onClick: prevResult
          })]
        })
      })]
    })
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,