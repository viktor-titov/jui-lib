import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _extends from "@babel/runtime/helpers/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import React from 'react';
import { NONE, DURATION, TAG } from '../settings/SpanBarSettings';
import SpanBarRow from './SpanBarRow';
import { jsx as _jsx } from "react/jsx-runtime";
describe('<SpanBarRow>', function () {
  var spanID = 'some-id';
  var props = {
    addHoverIndentGuideId: jest.fn(),
    className: 'a-class-name',
    color: 'color-a',
    columnDivision: '0.5',
    hoverIndentGuideIds: new Set(),
    isChildrenExpanded: true,
    isDetailExpanded: false,
    isFilteredOut: false,
    onDetailToggled: jest.fn(),
    onChildrenToggled: jest.fn(),
    operationName: 'op-name',
    numTicks: 5,
    rpc: {
      viewStart: 0.25,
      viewEnd: 0.75,
      color: 'color-b',
      operationName: 'rpc-op-name',
      serviceName: 'rpc-service-name'
    },
    showErrorIcon: false,
    getViewedBounds: function getViewedBounds() {
      return {
        start: 0,
        end: 1
      };
    },
    span: {
      duration: 9000,
      hasChildren: true,
      process: {
        serviceName: 'service-name'
      },
      spanID: spanID,
      logs: [],
      references: []
    }
  };
  beforeEach(function () {
    props.onDetailToggled.mockReset();
    props.onChildrenToggled.mockReset();
  });
  it('renders without exploding', function () {
    expect(function () {
      return render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props)));
    }).not.toThrow();
  });
  it('escalates detail toggling', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var onDetailToggled;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props)));
          onDetailToggled = props.onDetailToggled;
          expect(onDetailToggled.mock.calls.length).toBe(0);
          _context.next = 5;
          return userEvent.click(screen.getByTestId('span-view'));
        case 5:
          expect(onDetailToggled.mock.calls).toEqual([[spanID]]);
        case 6:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
  it('escalates children toggling', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var onChildrenToggled;
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props)));
          onChildrenToggled = props.onChildrenToggled;
          expect(onChildrenToggled.mock.calls.length).toBe(0);
          _context2.next = 5;
          return userEvent.click(screen.getByTestId('icon-wrapper'));
        case 5:
          expect(onChildrenToggled.mock.calls.length).toBe(1);
        case 6:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  })));
  it('render references button', function () {
    render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props)));
    var newSpan = Object.assign({}, props.span);
    var span = Object.assign(newSpan, {
      references: [{
        refType: 'FOLLOWS_FROM',
        traceID: 'trace1',
        spanID: 'span0',
        span: {
          spanID: 'span0'
        }
      }, {
        refType: 'FOLLOWS_FROM',
        traceID: 'otherTrace',
        spanID: 'span1',
        span: {
          spanID: 'span1'
        }
      }]
    });
    render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props, {
      span: span,
      createSpanLink: function createSpanLink() {
        return {
          traceLinks: [{
            href: 'href'
          }, {
            href: 'href'
          }]
        };
      }
    })));
    expect(screen.getAllByTestId('SpanLinksMenu')).toHaveLength(1);
  });
  it('render referenced to by single span', function () {
    render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props)));
    var span = Object.assign({
      subsidiarilyReferencedBy: [{
        refType: 'FOLLOWS_FROM',
        traceID: 'trace1',
        spanID: 'span0',
        span: {
          spanID: 'span0'
        }
      }]
    }, props.span);
    render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props, {
      span: span,
      createSpanLink: function createSpanLink() {
        return {
          traceLinks: [{
            content: 'This span is referenced by another span',
            href: 'href'
          }]
        };
      }
    })));
    expect(screen.getByRole('link', {
      name: 'This span is referenced by another span'
    })).toBeInTheDocument();
  });
  it('render referenced to by multiple span', function () {
    render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props)));
    var span = Object.assign({
      subsidiarilyReferencedBy: [{
        refType: 'FOLLOWS_FROM',
        traceID: 'trace1',
        spanID: 'span0',
        span: {
          spanID: 'span0'
        }
      }, {
        refType: 'FOLLOWS_FROM',
        traceID: 'trace1',
        spanID: 'span1',
        span: {
          spanID: 'span1'
        }
      }]
    }, props.span);
    render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props, {
      span: span,
      createSpanLink: function createSpanLink() {
        return {
          traceLinks: [{
            href: 'href'
          }, {
            href: 'href'
          }]
        };
      }
    })));
    expect(screen.getAllByTestId('SpanLinksMenu')).toHaveLength(1);
  });
  describe('render span bar label', function () {
    it('with default value', function () {
      render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, props)));
      expect(screen.getByText('(9ms)')).toBeInTheDocument();
    });
    it('with none value', function () {
      var testProps = Object.assign({
        spanBarOptions: {
          type: NONE
        }
      }, props);
      render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, testProps)));
      expect(screen.queryByText('(9ms)')).not.toBeInTheDocument();
    });
    it('with duration value', function () {
      var testProps = Object.assign({
        spanBarOptions: {
          type: DURATION
        }
      }, props);
      render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, testProps)));
      expect(screen.getByText('(9ms)')).toBeInTheDocument();
    });
    it('with tag value', function () {
      var testProps = Object.assign({
        spanBarOptions: {
          type: TAG,
          tag: 'tag'
        }
      }, _extends({}, props, {
        span: {
          process: {},
          tags: [{
            key: 'tag',
            value: 'tag-value'
          }]
        }
      }));
      render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, testProps)));
      expect(screen.getByText('(tag-value)')).toBeInTheDocument();
    });
    it('with process value', function () {
      var testProps = Object.assign({
        spanBarOptions: {
          type: TAG,
          tag: 'tag'
        }
      }, _extends({}, props, {
        span: {
          process: {
            tags: [{
              key: 'tag',
              value: 'process-value'
            }]
          },
          tags: []
        }
      }));
      render( /*#__PURE__*/_jsx(SpanBarRow, _extends({}, testProps)));
      expect(screen.getByText('(process-value)')).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,