// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import traceGenerator from '../demo/trace-generators';
import { findServerChildSpan, createViewedBoundsFunc, isClientSpan, isErrorSpan, isServerSpan, spanContainsErredSpan, spanHasTag } from './utils';
describe('TraceTimelineViewer/utils', function () {
  describe('getViewedBounds()', function () {
    it('works for the full range', function () {
      var args = {
        min: 1,
        max: 2,
        viewStart: 0,
        viewEnd: 1
      };
      var _createViewedBoundsFu = createViewedBoundsFunc(args)(1, 2),
        start = _createViewedBoundsFu.start,
        end = _createViewedBoundsFu.end;
      expect(start).toBe(0);
      expect(end).toBe(1);
    });
    it('works for a sub-range with a full view', function () {
      var args = {
        min: 1,
        max: 2,
        viewStart: 0,
        viewEnd: 1
      };
      var _createViewedBoundsFu2 = createViewedBoundsFunc(args)(1.25, 1.75),
        start = _createViewedBoundsFu2.start,
        end = _createViewedBoundsFu2.end;
      expect(start).toBe(0.25);
      expect(end).toBe(0.75);
    });
    it('works for a sub-range that fills the view', function () {
      var args = {
        min: 1,
        max: 2,
        viewStart: 0.25,
        viewEnd: 0.75
      };
      var _createViewedBoundsFu3 = createViewedBoundsFunc(args)(1.25, 1.75),
        start = _createViewedBoundsFu3.start,
        end = _createViewedBoundsFu3.end;
      expect(start).toBe(0);
      expect(end).toBe(1);
    });
    it('works for a sub-range that within a sub-view', function () {
      var args = {
        min: 100,
        max: 200,
        viewStart: 0.1,
        viewEnd: 0.9
      };
      var _createViewedBoundsFu4 = createViewedBoundsFunc(args)(130, 170),
        start = _createViewedBoundsFu4.start,
        end = _createViewedBoundsFu4.end;
      expect(start).toBe(0.25);
      expect(end).toBe(0.75);
    });
  });
  describe('spanHasTag() and variants', function () {
    it('returns true iff the key/value pair is found', function () {
      var span = traceGenerator.span;
      span.tags = [{
        key: 'span.kind',
        value: 'server'
      }];
      expect(spanHasTag('span.kind', 'client', span)).toBe(false);
      expect(spanHasTag('span.kind', 'client', span)).toBe(false);
      expect(spanHasTag('span.kind', 'server', span)).toBe(true);
    });
    var spanTypeTestCases = [{
      fn: isClientSpan,
      name: 'isClientSpan',
      key: 'span.kind',
      value: 'client'
    }, {
      fn: isServerSpan,
      name: 'isServerSpan',
      key: 'span.kind',
      value: 'server'
    }, {
      fn: isErrorSpan,
      name: 'isErrorSpan',
      key: 'error',
      value: true
    }, {
      fn: isErrorSpan,
      name: 'isErrorSpan',
      key: 'error',
      value: 'true'
    }];
    spanTypeTestCases.forEach(function (testCase) {
      var msg = testCase.name + "() is true only when a " + testCase.key + "=" + testCase.value + " tag is present";
      it(msg, function () {
        var span = {
          tags: traceGenerator.tags()
        };
        expect(testCase.fn(span)).toBe(false);
        span.tags.push(testCase);
        expect(testCase.fn(span)).toBe(true);
      });
    });
  });
  describe('spanContainsErredSpan()', function () {
    it('returns true only when a descendant has an error tag', function () {
      var errorTag = {
        key: 'error',
        type: 'bool',
        value: true
      };
      var getTags = function getTags(withError) {
        return withError ? traceGenerator.tags().concat(errorTag) : traceGenerator.tags();
      };

      // Using a string to generate the test spans. Each line results in a span. The
      // left number indicates whether or not the generated span has a descendant
      // with an error tag (the expectation). The length of the line indicates the
      // depth of the span (i.e. further right is higher depth). The right number
      // indicates whether or not the span has an error tag.
      var config = "\n        1   0\n        1     0\n        0       1\n        0     0\n        1     0\n        1       1\n        0         1\n        0           0\n        1         0\n        0           1\n        0   0\n      ".trim().split('\n').map(function (s) {
        return s.trim();
      });
      // Get the expectation, str -> number -> bool
      var expectations = config.map(function (s) {
        return Boolean(Number(s[0]));
      });
      var spans = config.map(function (line) {
        return {
          depth: line.length,
          tags: getTags(+line.slice(-1))
        };
      });
      expectations.forEach(function (target, i) {
        // include the index in the expect condition to know which span failed
        // (if there is a failure, that is)
        var result = [i, spanContainsErredSpan(spans, i)];
        expect(result).toEqual([i, target]);
      });
    });
  });
  describe('findServerChildSpan()', function () {
    var spans;
    beforeEach(function () {
      spans = [{
        depth: 0,
        tags: [{
          key: 'span.kind',
          value: 'client'
        }]
      }, {
        depth: 1,
        tags: []
      }, {
        depth: 1,
        tags: [{
          key: 'span.kind',
          value: 'server'
        }]
      }, {
        depth: 1,
        tags: [{
          key: 'span.kind',
          value: 'third-kind'
        }]
      }, {
        depth: 1,
        tags: [{
          key: 'span.kind',
          value: 'server'
        }]
      }];
    });
    it('returns falsy if the frist span is not a client', function () {
      expect(findServerChildSpan(spans.slice(1))).toBeFalsy();
    });
    it('returns the first server span', function () {
      var span = findServerChildSpan(spans);
      expect(span).toBe(spans[2]);
    });
    it('bails when a non-child-depth span is encountered', function () {
      spans[1].depth++;
      expect(findServerChildSpan(spans)).toBeFalsy();
      spans[1].depth = spans[0].depth;
      expect(findServerChildSpan(spans)).toBeFalsy();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,