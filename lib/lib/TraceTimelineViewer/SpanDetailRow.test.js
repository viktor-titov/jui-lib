import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _extends from "@babel/runtime/helpers/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import React from 'react';
import { createTheme } from '@grafana/data';
import DetailState from './SpanDetail/DetailState';
import { UnthemedSpanDetailRow } from './SpanDetailRow';
import { jsx as _jsx } from "react/jsx-runtime";
var testSpan = {
  spanID: 'testSpanID',
  traceID: 'testTraceID',
  depth: 3,
  process: {
    serviceName: 'some-service',
    tags: [{
      key: 'tag-key',
      value: 'tag-value'
    }]
  }
};
var setup = function setup(propOverrides) {
  var props = _extends({
    color: 'some-color',
    columnDivision: 0.5,
    detailState: new DetailState(),
    onDetailToggled: jest.fn(),
    isFilteredOut: false,
    logItemToggle: jest.fn(),
    logsToggle: jest.fn(),
    processToggle: jest.fn(),
    createFocusSpanLink: jest.fn(),
    hoverIndentGuideIds: new Map(),
    span: testSpan,
    tagsToggle: jest.fn(),
    traceStartTime: 1000,
    theme: createTheme()
  }, propOverrides);
  return render( /*#__PURE__*/_jsx(UnthemedSpanDetailRow, _extends({}, props)));
};
describe('SpanDetailRow tests', function () {
  it('renders without exploding', function () {
    expect(function () {
      return setup();
    }).not.toThrow();
  });
  it('calls toggle on click', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var mockToggle, detailRow;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          mockToggle = jest.fn();
          setup({
            onDetailToggled: mockToggle
          });
          expect(mockToggle).not.toHaveBeenCalled();
          detailRow = screen.getByTestId('detail-row-expanded-accent');
          _context.next = 6;
          return userEvent.click(detailRow);
        case 6:
          expect(mockToggle).toHaveBeenCalled();
        case 7:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
  it('renders the span tree offset', function () {
    setup();
    expect(screen.getByTestId('SpanTreeOffset--indentGuide')).toBeInTheDocument();
  });
  it('renders the SpanDetail', function () {
    setup();
    expect(screen.getByTestId('span-detail-component')).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZW5kZXIiLCJzY3JlZW4iLCJ1c2VyRXZlbnQiLCJSZWFjdCIsImNyZWF0ZVRoZW1lIiwiRGV0YWlsU3RhdGUiLCJVbnRoZW1lZFNwYW5EZXRhaWxSb3ciLCJqc3giLCJfanN4IiwidGVzdFNwYW4iLCJzcGFuSUQiLCJ0cmFjZUlEIiwiZGVwdGgiLCJwcm9jZXNzIiwic2VydmljZU5hbWUiLCJ0YWdzIiwia2V5IiwidmFsdWUiLCJzZXR1cCIsInByb3BPdmVycmlkZXMiLCJwcm9wcyIsIl9leHRlbmRzIiwiY29sb3IiLCJjb2x1bW5EaXZpc2lvbiIsImRldGFpbFN0YXRlIiwib25EZXRhaWxUb2dnbGVkIiwiamVzdCIsImZuIiwiaXNGaWx0ZXJlZE91dCIsImxvZ0l0ZW1Ub2dnbGUiLCJsb2dzVG9nZ2xlIiwicHJvY2Vzc1RvZ2dsZSIsImNyZWF0ZUZvY3VzU3BhbkxpbmsiLCJob3ZlckluZGVudEd1aWRlSWRzIiwiTWFwIiwic3BhbiIsInRhZ3NUb2dnbGUiLCJ0cmFjZVN0YXJ0VGltZSIsInRoZW1lIiwiZGVzY3JpYmUiLCJpdCIsImV4cGVjdCIsIm5vdCIsInRvVGhyb3ciLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZSIsIm1vY2tUb2dnbGUiLCJkZXRhaWxSb3ciLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwidG9IYXZlQmVlbkNhbGxlZCIsImdldEJ5VGVzdElkIiwiY2xpY2siLCJzdG9wIiwidG9CZUluVGhlRG9jdW1lbnQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL1RyYWNlVGltZWxpbmVWaWV3ZXIvU3BhbkRldGFpbFJvdy50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4gfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCB1c2VyRXZlbnQgZnJvbSAnQHRlc3RpbmctbGlicmFyeS91c2VyLWV2ZW50JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7IGNyZWF0ZVRoZW1lIH0gZnJvbSAnQGdyYWZhbmEvZGF0YSc7XG5cbmltcG9ydCBEZXRhaWxTdGF0ZSBmcm9tICcuL1NwYW5EZXRhaWwvRGV0YWlsU3RhdGUnO1xuaW1wb3J0IHsgVW50aGVtZWRTcGFuRGV0YWlsUm93LCBTcGFuRGV0YWlsUm93UHJvcHMgfSBmcm9tICcuL1NwYW5EZXRhaWxSb3cnO1xuXG5jb25zdCB0ZXN0U3BhbiA9IHtcbiAgc3BhbklEOiAndGVzdFNwYW5JRCcsXG4gIHRyYWNlSUQ6ICd0ZXN0VHJhY2VJRCcsXG4gIGRlcHRoOiAzLFxuICBwcm9jZXNzOiB7XG4gICAgc2VydmljZU5hbWU6ICdzb21lLXNlcnZpY2UnLFxuICAgIHRhZ3M6IFt7IGtleTogJ3RhZy1rZXknLCB2YWx1ZTogJ3RhZy12YWx1ZScgfV0sXG4gIH0sXG59O1xuY29uc3Qgc2V0dXAgPSAocHJvcE92ZXJyaWRlcz86IFNwYW5EZXRhaWxSb3dQcm9wcykgPT4ge1xuICBjb25zdCBwcm9wcyA9IHtcbiAgICBjb2xvcjogJ3NvbWUtY29sb3InLFxuICAgIGNvbHVtbkRpdmlzaW9uOiAwLjUsXG4gICAgZGV0YWlsU3RhdGU6IG5ldyBEZXRhaWxTdGF0ZSgpLFxuICAgIG9uRGV0YWlsVG9nZ2xlZDogamVzdC5mbigpLFxuICAgIGlzRmlsdGVyZWRPdXQ6IGZhbHNlLFxuICAgIGxvZ0l0ZW1Ub2dnbGU6IGplc3QuZm4oKSxcbiAgICBsb2dzVG9nZ2xlOiBqZXN0LmZuKCksXG4gICAgcHJvY2Vzc1RvZ2dsZTogamVzdC5mbigpLFxuICAgIGNyZWF0ZUZvY3VzU3Bhbkxpbms6IGplc3QuZm4oKSxcbiAgICBob3ZlckluZGVudEd1aWRlSWRzOiBuZXcgTWFwKCksXG4gICAgc3BhbjogdGVzdFNwYW4sXG4gICAgdGFnc1RvZ2dsZTogamVzdC5mbigpLFxuICAgIHRyYWNlU3RhcnRUaW1lOiAxMDAwLFxuICAgIHRoZW1lOiBjcmVhdGVUaGVtZSgpLFxuICAgIC4uLnByb3BPdmVycmlkZXMsXG4gIH07XG4gIHJldHVybiByZW5kZXIoPFVudGhlbWVkU3BhbkRldGFpbFJvdyB7Li4uKHByb3BzIGFzIFNwYW5EZXRhaWxSb3dQcm9wcyl9IC8+KTtcbn07XG5cbmRlc2NyaWJlKCdTcGFuRGV0YWlsUm93IHRlc3RzJywgKCkgPT4ge1xuICBpdCgncmVuZGVycyB3aXRob3V0IGV4cGxvZGluZycsICgpID0+IHtcbiAgICBleHBlY3QoKCkgPT4gc2V0dXAoKSkubm90LnRvVGhyb3coKTtcbiAgfSk7XG5cbiAgaXQoJ2NhbGxzIHRvZ2dsZSBvbiBjbGljaycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtb2NrVG9nZ2xlID0gamVzdC5mbigpO1xuICAgIHNldHVwKHsgb25EZXRhaWxUb2dnbGVkOiBtb2NrVG9nZ2xlIH0gYXMgdW5rbm93biBhcyBTcGFuRGV0YWlsUm93UHJvcHMpO1xuICAgIGV4cGVjdChtb2NrVG9nZ2xlKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuXG4gICAgY29uc3QgZGV0YWlsUm93ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdkZXRhaWwtcm93LWV4cGFuZGVkLWFjY2VudCcpO1xuICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhkZXRhaWxSb3cpO1xuICAgIGV4cGVjdChtb2NrVG9nZ2xlKS50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIHRoZSBzcGFuIHRyZWUgb2Zmc2V0JywgKCkgPT4ge1xuICAgIHNldHVwKCk7XG5cbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdTcGFuVHJlZU9mZnNldC0taW5kZW50R3VpZGUnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgdGhlIFNwYW5EZXRhaWwnLCAoKSA9PiB7XG4gICAgc2V0dXAoKTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3NwYW4tZGV0YWlsLWNvbXBvbmVudCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxNQUFNLEVBQUVDLE1BQU0sUUFBUSx3QkFBd0I7QUFDdkQsT0FBT0MsU0FBUyxNQUFNLDZCQUE2QjtBQUNuRCxPQUFPQyxLQUFLLE1BQU0sT0FBTztBQUV6QixTQUFTQyxXQUFXLFFBQVEsZUFBZTtBQUUzQyxPQUFPQyxXQUFXLE1BQU0sMEJBQTBCO0FBQ2xE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