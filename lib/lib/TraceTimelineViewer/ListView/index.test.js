import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["children"];
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { render, screen } from '@testing-library/react';
import React from 'react';
import ListView from './index';
import { jsx as _jsx } from "react/jsx-runtime";
var DATA_LENGTH = 10;
function getHeight(index) {
  return index * 2 + 2;
}
function Item(props) {
  var children = props.children,
    rest = _objectWithoutPropertiesLoose(props, _excluded);
  return /*#__PURE__*/_jsx("div", _extends({}, rest, {
    children: children
  }));
}
var renderItem = function renderItem(itemKey, styles, itemIndex, attrs) {
  return /*#__PURE__*/_jsx(Item, _extends({
    style: styles
  }, attrs, {
    "data-testid": "item",
    children: itemIndex
  }), itemKey);
};
var props = {
  dataLength: DATA_LENGTH,
  getIndexFromKey: Number,
  getKeyFromIndex: String,
  initialDraw: 5,
  itemHeightGetter: getHeight,
  itemRenderer: renderItem,
  itemsWrapperClassName: 'SomeClassName',
  viewBuffer: 10,
  viewBufferMin: 5,
  windowScroller: true
};
describe('<ListView />', function () {
  beforeEach(function () {
    render( /*#__PURE__*/_jsx(ListView, _extends({}, props)));
  });
  it('renders without exploding', function () {
    expect(screen.getByTestId('ListView')).toBeInTheDocument();
  });
  it('renders the correct number of items', function () {
    expect(screen.getAllByTestId('item').length).toBe(DATA_LENGTH);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZW5kZXIiLCJzY3JlZW4iLCJSZWFjdCIsIkxpc3RWaWV3IiwianN4IiwiX2pzeCIsIkRBVEFfTEVOR1RIIiwiZ2V0SGVpZ2h0IiwiaW5kZXgiLCJJdGVtIiwicHJvcHMiLCJjaGlsZHJlbiIsInJlc3QiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsIl9leGNsdWRlZCIsIl9leHRlbmRzIiwicmVuZGVySXRlbSIsIml0ZW1LZXkiLCJzdHlsZXMiLCJpdGVtSW5kZXgiLCJhdHRycyIsInN0eWxlIiwiZGF0YUxlbmd0aCIsImdldEluZGV4RnJvbUtleSIsIk51bWJlciIsImdldEtleUZyb21JbmRleCIsIlN0cmluZyIsImluaXRpYWxEcmF3IiwiaXRlbUhlaWdodEdldHRlciIsIml0ZW1SZW5kZXJlciIsIml0ZW1zV3JhcHBlckNsYXNzTmFtZSIsInZpZXdCdWZmZXIiLCJ2aWV3QnVmZmVyTWluIiwid2luZG93U2Nyb2xsZXIiLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJpdCIsImV4cGVjdCIsImdldEJ5VGVzdElkIiwidG9CZUluVGhlRG9jdW1lbnQiLCJnZXRBbGxCeVRlc3RJZCIsImxlbmd0aCIsInRvQmUiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL1RyYWNlVGltZWxpbmVWaWV3ZXIvTGlzdFZpZXcvaW5kZXgudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgTGlzdFZpZXcsIHsgVExpc3RWaWV3UHJvcHMgfSBmcm9tICcuL2luZGV4JztcblxuY29uc3QgREFUQV9MRU5HVEggPSAxMDtcblxuZnVuY3Rpb24gZ2V0SGVpZ2h0KGluZGV4OiBudW1iZXIpIHtcbiAgcmV0dXJuIGluZGV4ICogMiArIDI7XG59XG5cbmZ1bmN0aW9uIEl0ZW0ocHJvcHM6IFJlYWN0LkhUTUxQcm9wczxIVE1MRGl2RWxlbWVudD4pIHtcbiAgY29uc3QgeyBjaGlsZHJlbiwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gIHJldHVybiA8ZGl2IHsuLi5yZXN0fT57Y2hpbGRyZW59PC9kaXY+O1xufVxuXG5jb25zdCByZW5kZXJJdGVtOiBUTGlzdFZpZXdQcm9wc1snaXRlbVJlbmRlcmVyJ10gPSAoaXRlbUtleSwgc3R5bGVzLCBpdGVtSW5kZXgsIGF0dHJzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPEl0ZW0ga2V5PXtpdGVtS2V5fSBzdHlsZT17c3R5bGVzfSB7Li4uYXR0cnN9IGRhdGEtdGVzdGlkPVwiaXRlbVwiPlxuICAgICAge2l0ZW1JbmRleH1cbiAgICA8L0l0ZW0+XG4gICk7XG59O1xuXG5jb25zdCBwcm9wcyA9IHtcbiAgZGF0YUxlbmd0aDogREFUQV9MRU5HVEgsXG4gIGdldEluZGV4RnJvbUtleTogTnVtYmVyLFxuICBnZXRLZXlGcm9tSW5kZXg6IFN0cmluZyxcbiAgaW5pdGlhbERyYXc6IDUsXG4gIGl0ZW1IZWlnaHRHZXR0ZXI6IGdldEhlaWdodCxcbiAgaXRlbVJlbmRlcmVyOiByZW5kZXJJdGVtLFxuICBpdGVtc1dyYXBwZXJDbGFzc05hbWU6ICdTb21lQ2xhc3NOYW1lJyxcbiAgdmlld0J1ZmZlcjogMTAsXG4gIHZpZXdCdWZmZXJNaW46IDUsXG4gIHdpbmRvd1Njcm9sbGVyOiB0cnVlLFxufTtcblxuZGVzY3JpYmUoJzxMaXN0VmlldyAvPicsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgcmVuZGVyKDxMaXN0VmlldyB7Li4ucHJvcHN9IC8+KTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgd2l0aG91dCBleHBsb2RpbmcnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnTGlzdFZpZXcnKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgdGhlIGNvcnJlY3QgbnVtYmVyIG9mIGl0ZW1zJywgKCkgPT4ge1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QWxsQnlUZXN0SWQoJ2l0ZW0nKS5sZW5ndGgpLnRvQmUoREFUQV9MRU5HVEgpO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxNQUFNLEVBQUVDLE1BQU0sUUFBUSx3QkFBd0I7QUFDdkQsT0FBT0MsS0FBSyxNQUFNLE9BQU87QUFFekIsT0FBT0MsUUFBUSxNQUEwQixTQUFTO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBRW5ELElBQU1DLFdBQVcsR0FBRyxFQUFFO0FBRXRCLFNBQVNDLFNBQVNBLENBQUNDLEtBQWEsRUFBRTtFQUNoQyxPQUFPQSxLQUFLLEdBQUcsQ0FBQyxHQUFHLENBQUM7QUFDdEI7QUFFQSxTQUFTQyxJQUFJQSxDQUFDQyxLQUFzQyxFQUFFO0VBQ3BELElBQVFDLFFBQVEsR0FBY0QsS0FBSyxDQUEzQkMsUUFBUTtJQUFLQyxJQUFJLEdBQUFDLDZCQUFBLENBQUtILEtBQUssRUFBQUksU0FBQTtFQUNuQyxvQkFBT1QsSUFBQSxRQUFBVSxRQUFBLEtBQVNILElBQUk7SUFBQUQsUUFBQSxFQUFHQTtFQUFRLEVBQU0sQ0FBQztBQUN4QztBQUVBLElBQU1LLFVBQTBDLEdBQUcsU0FBN0NBLFVBQTBDQSxDQUFJQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsU0FBUyxFQUFFQyxLQUFLLEVBQUs7RUFDeEYsb0JBQ0VmLElBQUEsQ0FBQ0ksSUFBSSxFQUFBTSxRQUFBO0lBQWVNLEtBQUssRUFBRUg7RUFBTyxHQUFLRSxLQUFLO0lBQUUsZUFBWSxNQUFNO0lBQUFULFFBQUEsRUFDN0RRO0VBQVMsSUFEREYsT0FFTCxDQUFDO0FBRVgsQ0FBQztBQUVELElBQU1QLEtBQUssR0FBRztFQUNaWSxVQUFVLEVBQUVoQixXQUFXO0VBQ3ZCaUIsZUFBZSxFQUFFQyxNQUFNO0VBQ3ZCQyxlQUFlLEVBQUVDLE1BQU07RUFDdkJDLFdBQVcsRUFBRSxDQUFDO0VBQ2RDLGdCQUFnQixFQUFFckIsU0FBUztFQUMzQnNCLFlBQVksRUFBRWIsVUFBVTtFQUN4QmMscUJBQXFCLEVBQUUsZUFBZTtFQUN0Q0MsVUFBVSxFQUFFLEVBQUU7RUFDZEMsYUFBYSxFQUFFLENBQUM7RUFDaEJDLGNBQWMsRUFBRTtBQUNsQixDQUFDO0FBRURDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM3QkMsVUFBVSxDQUFDLFlBQU07SUFDZm5DLE1BQU0sZUFBQ0ssSUFBQSxDQUFDRixRQUFRLEVBQUFZLFFBQUEsS0FBS0wsS0FBSyxDQUFHLENBQUMsQ0FBQztFQUNqQyxDQUFDLENBQUM7RUFFRjBCLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxZQUFNO0lBQ3BDQyxNQUFNLENBQUNwQyxNQUFNLENBQUNxQyxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQ0MsaUJBQWlCLENBQUMsQ0FBQztFQUM1RCxDQUFDLENBQUM7RUFFRkgsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLFlBQU07SUFDOUNDLE1BQU0sQ0FBQ3BDLE1BQU0sQ0FBQ3VDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLENBQUNDLElBQUksQ0FBQ3BDLFdBQVcsQ0FBQztFQUNoRSxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=