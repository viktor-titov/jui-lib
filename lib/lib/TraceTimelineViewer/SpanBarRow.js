import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20, _templateObject21, _templateObject22, _templateObject23;
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { css, keyframes } from '@emotion/css';
import cx from 'classnames';
import * as React from 'react';
import IoAlert from 'react-icons/lib/io/alert';
import IoArrowRightA from 'react-icons/lib/io/arrow-right-a';
import { stylesFactory, withTheme2 } from '@grafana/ui';
import { autoColor } from '../Theme';
import { DURATION, NONE, TAG } from '../settings/SpanBarSettings';
import SpanBar from './SpanBar';
import { SpanLinksMenu } from './SpanLinks';
import SpanTreeOffset from './SpanTreeOffset';
import Ticks from './Ticks';
import TimelineRow from './TimelineRow';
import { formatDuration } from './utils';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
var spanBarClassName = 'spanBar';
var spanBarLabelClassName = 'spanBarLabel';
var nameWrapperClassName = 'nameWrapper';
var nameWrapperMatchingFilterClassName = 'nameWrapperMatchingFilter';
var viewClassName = 'jaegerView';
var nameColumnClassName = 'nameColumn';
var getStyles = stylesFactory(function (theme) {
  var animations = {
    flash: keyframes(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n    label: flash;\n    from {\n      background-color: ", ";\n    }\n    to {\n      background-color: default;\n    }\n  "])), autoColor(theme, '#68b9ff'))
  };
  return {
    nameWrapper: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose(["\n      label: nameWrapper;\n      line-height: 27px;\n      overflow: hidden;\n      display: flex;\n    "]))),
    nameWrapperMatchingFilter: css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose(["\n      label: nameWrapperMatchingFilter;\n      background-color: ", ";\n    "])), autoColor(theme, '#fffce4')),
    nameColumn: css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose(["\n      label: nameColumn;\n      position: relative;\n      white-space: nowrap;\n      z-index: 1;\n      &:hover {\n        z-index: 1;\n      }\n    "]))),
    endpointName: css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteralLoose(["\n      label: endpointName;\n      color: ", ";\n    "])), autoColor(theme, '#808080')),
    view: css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteralLoose(["\n      label: view;\n      position: relative;\n    "]))),
    viewExpanded: css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteralLoose(["\n      label: viewExpanded;\n      background: ", ";\n      outline: 1px solid ", ";\n    "])), autoColor(theme, '#f8f8f8'), autoColor(theme, '#ddd')),
    viewExpandedAndMatchingFilter: css(_templateObject8 || (_templateObject8 = _taggedTemplateLiteralLoose(["\n      label: viewExpandedAndMatchingFilter;\n      background: ", ";\n      outline: 1px solid ", ";\n    "])), autoColor(theme, '#fff3d7'), autoColor(theme, '#ddd')),
    row: css(_templateObject9 || (_templateObject9 = _taggedTemplateLiteralLoose(["\n      label: row;\n      &:hover .", " {\n        opacity: 1;\n      }\n      &:hover .", " {\n        color: ", ";\n      }\n      &:hover .", " {\n        background: #f8f8f8;\n        background: linear-gradient(\n          90deg,\n          ", ",\n          ", " 75%,\n          ", "\n        );\n      }\n      &:hover .", " {\n        background-color: ", ";\n        outline: 1px solid ", ";\n      }\n    "])), spanBarClassName, spanBarLabelClassName, autoColor(theme, '#000'), nameWrapperClassName, autoColor(theme, '#fafafa'), autoColor(theme, '#f8f8f8'), autoColor(theme, '#eee'), viewClassName, autoColor(theme, '#f5f5f5'), autoColor(theme, '#ddd')),
    rowClippingLeft: css(_templateObject10 || (_templateObject10 = _taggedTemplateLiteralLoose(["\n      label: rowClippingLeft;\n      & .", "::before {\n        content: ' ';\n        height: 100%;\n        position: absolute;\n        width: 6px;\n        background-image: linear-gradient(\n          to right,\n          ", ",\n          ", "\n        );\n        left: 100%;\n        z-index: -1;\n      }\n    "])), nameColumnClassName, autoColor(theme, 'rgba(25, 25, 25, 0.25)'), autoColor(theme, 'rgba(32, 32, 32, 0)')),
    rowClippingRight: css(_templateObject11 || (_templateObject11 = _taggedTemplateLiteralLoose(["\n      label: rowClippingRight;\n      & .", "::before {\n        content: ' ';\n        height: 100%;\n        position: absolute;\n        width: 6px;\n        background-image: linear-gradient(\n          to left,\n          ", ",\n          ", "\n        );\n        right: 0%;\n        z-index: 1;\n      }\n    "])), viewClassName, autoColor(theme, 'rgba(25, 25, 25, 0.25)'), autoColor(theme, 'rgba(25, 25, 25, 0.25)')),
    rowExpanded: css(_templateObject12 || (_templateObject12 = _taggedTemplateLiteralLoose(["\n      label: rowExpanded;\n      & .", " {\n        opacity: 1;\n      }\n      & .", " {\n        color: ", ";\n      }\n      & .", ", &:hover .", " {\n        background: ", ";\n        box-shadow: 0 1px 0 ", ";\n      }\n      & .", " {\n        background: ", ";\n      }\n      &:hover .", " {\n        background: ", ";\n      }\n    "])), spanBarClassName, spanBarLabelClassName, autoColor(theme, '#000'), nameWrapperClassName, nameWrapperClassName, autoColor(theme, '#f0f0f0'), autoColor(theme, '#ddd'), nameWrapperMatchingFilterClassName, autoColor(theme, '#fff3d7'), viewClassName, autoColor(theme, '#eee')),
    rowMatchingFilter: css(_templateObject13 || (_templateObject13 = _taggedTemplateLiteralLoose(["\n      label: rowMatchingFilter;\n      background-color: ", ";\n      &:hover .", " {\n        background: linear-gradient(\n          90deg,\n          ", ",\n          ", " 75%,\n          ", "\n        );\n      }\n      &:hover .", " {\n        background-color: ", ";\n        outline: 1px solid ", ";\n      }\n    "])), autoColor(theme, '#fffbde'), nameWrapperClassName, autoColor(theme, '#fffbde'), autoColor(theme, '#fffbde'), autoColor(theme, '#f7f1c6'), viewClassName, autoColor(theme, '#f7f1c6'), autoColor(theme, '#ddd')),
    rowFocused: css(_templateObject14 || (_templateObject14 = _taggedTemplateLiteralLoose(["\n      label: rowFocused;\n      background-color: ", ";\n      animation: ", " 1s cubic-bezier(0.12, 0, 0.39, 0);\n      & .", ", .", ", .", " {\n        background-color: ", ";\n        animation: ", " 1s cubic-bezier(0.12, 0, 0.39, 0);\n      }\n      & .", " {\n        opacity: 1;\n      }\n      & .", " {\n        color: ", ";\n      }\n      &:hover .", ", :hover .", " {\n        background: ", ";\n        box-shadow: 0 1px 0 ", ";\n      }\n    "])), autoColor(theme, '#cbe7ff'), animations.flash, nameWrapperClassName, viewClassName, nameWrapperMatchingFilterClassName, autoColor(theme, '#cbe7ff'), animations.flash, spanBarClassName, spanBarLabelClassName, autoColor(theme, '#000'), nameWrapperClassName, viewClassName, autoColor(theme, '#d5ebff'), autoColor(theme, '#ddd')),
    rowExpandedAndMatchingFilter: css(_templateObject15 || (_templateObject15 = _taggedTemplateLiteralLoose(["\n      label: rowExpandedAndMatchingFilter;\n      &:hover .", " {\n        background: ", ";\n      }\n    "])), viewClassName, autoColor(theme, '#ffeccf')),
    name: css(_templateObject16 || (_templateObject16 = _taggedTemplateLiteralLoose(["\n      label: name;\n      color: ", ";\n      cursor: pointer;\n      flex: 1 1 auto;\n      outline: none;\n      overflow-y: hidden;\n      overflow-x: auto;\n      margin-right: 8px;\n      padding-left: 4px;\n      padding-right: 0.25em;\n      position: relative;\n      -ms-overflow-style: none;\n      scrollbar-width: none;\n      &::-webkit-scrollbar {\n        display: none;\n      }\n      &::before {\n        content: ' ';\n        position: absolute;\n        top: 4px;\n        bottom: 4px;\n        left: 0;\n        border-left: 4px solid;\n        border-left-color: inherit;\n      }\n      &:focus {\n        text-decoration: none;\n      }\n      &:hover > small {\n        color: ", ";\n      }\n      text-align: left;\n      background: transparent;\n      border: none;\n    "])), autoColor(theme, '#000'), autoColor(theme, '#000')),
    nameDetailExpanded: css(_templateObject17 || (_templateObject17 = _taggedTemplateLiteralLoose(["\n      label: nameDetailExpanded;\n      &::before {\n        bottom: 0;\n      }\n    "]))),
    svcName: css(_templateObject18 || (_templateObject18 = _taggedTemplateLiteralLoose(["\n      label: svcName;\n      padding: 0 0.25rem 0 0.5rem;\n      font-size: 1.05em;\n    "]))),
    svcNameChildrenCollapsed: css(_templateObject19 || (_templateObject19 = _taggedTemplateLiteralLoose(["\n      label: svcNameChildrenCollapsed;\n      font-weight: bold;\n      font-style: italic;\n    "]))),
    errorIcon: css(_templateObject20 || (_templateObject20 = _taggedTemplateLiteralLoose(["\n      label: errorIcon;\n      border-radius: 6.5px;\n      color: ", ";\n      font-size: 0.85em;\n      margin-right: 0.25rem;\n      padding: 1px;\n    "])), autoColor(theme, '#fff')),
    rpcColorMarker: css(_templateObject21 || (_templateObject21 = _taggedTemplateLiteralLoose(["\n      label: rpcColorMarker;\n      border-radius: 6.5px;\n      display: inline-block;\n      font-size: 0.85em;\n      height: 1em;\n      margin-right: 0.25rem;\n      padding: 1px;\n      width: 1em;\n      vertical-align: middle;\n    "]))),
    labelRight: css(_templateObject22 || (_templateObject22 = _taggedTemplateLiteralLoose(["\n      label: labelRight;\n      left: 100%;\n    "]))),
    labelLeft: css(_templateObject23 || (_templateObject23 = _taggedTemplateLiteralLoose(["\n      label: labelLeft;\n      right: 100%;\n    "])))
  };
});
/**
 * This was originally a stateless function, but changing to a PureComponent
 * reduced the render time of expanding a span row detail by ~50%. This is
 * even true in the case where the stateless function has the same prop types as
 * this class and arrow functions are created in the stateless function as
 * handlers to the onClick props. E.g. for now, the PureComponent is more
 * performance than the stateless function.
 */
export var UnthemedSpanBarRow = /*#__PURE__*/function (_React$PureComponent) {
  function UnthemedSpanBarRow() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$PureComponent.call.apply(_React$PureComponent, [this].concat(args)) || this;
    _this._detailToggle = function () {
      _this.props.onDetailToggled(_this.props.span.spanID);
    };
    _this._childrenToggle = function () {
      _this.props.onChildrenToggled(_this.props.span.spanID);
    };
    _this.getSpanBarLabel = function (span, spanBarOptions, duration) {
      var _spanBarOptions$type;
      var type = (_spanBarOptions$type = spanBarOptions == null ? void 0 : spanBarOptions.type) != null ? _spanBarOptions$type : '';
      if (type === NONE) {
        return '';
      } else if (type === '' || type === DURATION) {
        return "(" + duration + ")";
      } else if (type === TAG) {
        var _spanBarOptions$tag$t, _spanBarOptions$tag;
        var tagKey = (_spanBarOptions$tag$t = spanBarOptions == null || (_spanBarOptions$tag = spanBarOptions.tag) == null ? void 0 : _spanBarOptions$tag.trim()) != null ? _spanBarOptions$tag$t : '';
        if (tagKey !== '' && span.tags) {
          var _span$tags, _span$process;
          var tag = (_span$tags = span.tags) == null ? void 0 : _span$tags.find(function (tag) {
            return tag.key === tagKey;
          });
          var process = (_span$process = span.process) == null || (_span$process = _span$process.tags) == null ? void 0 : _span$process.find(function (process) {
            return process.key === tagKey;
          });
          if (tag) {
            return "(" + tag.value + ")";
          }
          if (process) {
            return "(" + process.value + ")";
          }
        }
      }
      return '';
    };
    return _this;
  }
  _inheritsLoose(UnthemedSpanBarRow, _React$PureComponent);
  var _proto = UnthemedSpanBarRow.prototype;
  _proto.render = function render() {
    var _cx, _cx2, _cx3, _cx4, _cx5;
    var _this$props = this.props,
      className = _this$props.className,
      color = _this$props.color,
      spanBarOptions = _this$props.spanBarOptions,
      columnDivision = _this$props.columnDivision,
      isChildrenExpanded = _this$props.isChildrenExpanded,
      isDetailExpanded = _this$props.isDetailExpanded,
      isMatchingFilter = _this$props.isMatchingFilter,
      isFocused = _this$props.isFocused,
      numTicks = _this$props.numTicks,
      rpc = _this$props.rpc,
      noInstrumentedServer = _this$props.noInstrumentedServer,
      showErrorIcon = _this$props.showErrorIcon,
      getViewedBounds = _this$props.getViewedBounds,
      traceStartTime = _this$props.traceStartTime,
      span = _this$props.span,
      hoverIndentGuideIds = _this$props.hoverIndentGuideIds,
      addHoverIndentGuideId = _this$props.addHoverIndentGuideId,
      removeHoverIndentGuideId = _this$props.removeHoverIndentGuideId,
      clippingLeft = _this$props.clippingLeft,
      clippingRight = _this$props.clippingRight,
      theme = _this$props.theme,
      createSpanLink = _this$props.createSpanLink,
      datasourceType = _this$props.datasourceType;
    var duration = span.duration,
      isParent = span.hasChildren,
      operationName = span.operationName,
      serviceName = span.process.serviceName;
    var label = formatDuration(duration);
    var viewBounds = getViewedBounds(span.startTime, span.startTime + span.duration);
    var viewStart = viewBounds.start;
    var viewEnd = viewBounds.end;
    var styles = getStyles(theme);
    var labelDetail = serviceName + "::" + operationName;
    var longLabel;
    var hintClassName;
    if (viewStart > 1 - viewEnd) {
      longLabel = labelDetail + " | " + label;
      hintClassName = styles.labelLeft;
    } else {
      longLabel = label + " | " + labelDetail;
      hintClassName = styles.labelRight;
    }
    var countLinks = function countLinks(links) {
      if (!links) {
        return 0;
      }
      return Object.values(links).reduce(function (count, arr) {
        return count + arr.length;
      }, 0);
    };
    return /*#__PURE__*/_jsxs(TimelineRow, {
      className: cx(styles.row, (_cx = {}, _cx[styles.rowExpanded] = isDetailExpanded, _cx[styles.rowMatchingFilter] = isMatchingFilter, _cx[styles.rowExpandedAndMatchingFilter] = isMatchingFilter && isDetailExpanded, _cx[styles.rowFocused] = isFocused, _cx[styles.rowClippingLeft] = clippingLeft, _cx[styles.rowClippingRight] = clippingRight, _cx), className),
      children: [/*#__PURE__*/_jsx(TimelineRow.Cell, {
        className: cx(styles.nameColumn, nameColumnClassName),
        width: columnDivision,
        children: /*#__PURE__*/_jsxs("div", {
          className: cx(styles.nameWrapper, nameWrapperClassName, (_cx2 = {}, _cx2[styles.nameWrapperMatchingFilter] = isMatchingFilter, _cx2.nameWrapperMatchingFilter = isMatchingFilter, _cx2)),
          children: [/*#__PURE__*/_jsx(SpanTreeOffset, {
            onClick: isParent ? this._childrenToggle : undefined,
            childrenVisible: isChildrenExpanded,
            span: span,
            hoverIndentGuideIds: hoverIndentGuideIds,
            addHoverIndentGuideId: addHoverIndentGuideId,
            removeHoverIndentGuideId: removeHoverIndentGuideId
          }), /*#__PURE__*/_jsxs("button", {
            type: "button",
            className: cx(styles.name, (_cx3 = {}, _cx3[styles.nameDetailExpanded] = isDetailExpanded, _cx3)),
            "aria-checked": isDetailExpanded,
            title: labelDetail,
            onClick: this._detailToggle,
            role: "switch",
            style: {
              borderColor: color
            },
            tabIndex: 0,
            children: [/*#__PURE__*/_jsxs("span", {
              className: cx(styles.svcName, (_cx4 = {}, _cx4[styles.svcNameChildrenCollapsed] = isParent && !isChildrenExpanded, _cx4)),
              children: [showErrorIcon && /*#__PURE__*/_jsx(IoAlert, {
                style: {
                  backgroundColor: span.errorIconColor ? autoColor(theme, span.errorIconColor) : autoColor(theme, '#db2828')
                },
                className: styles.errorIcon
              }), serviceName, ' ', rpc && /*#__PURE__*/_jsxs("span", {
                children: [/*#__PURE__*/_jsx(IoArrowRightA, {}), " ", /*#__PURE__*/_jsx("i", {
                  className: styles.rpcColorMarker,
                  style: {
                    background: rpc.color
                  }
                }), rpc.serviceName]
              }), noInstrumentedServer && /*#__PURE__*/_jsxs("span", {
                children: [/*#__PURE__*/_jsx(IoArrowRightA, {}), ' ', /*#__PURE__*/_jsx("i", {
                  className: styles.rpcColorMarker,
                  style: {
                    background: noInstrumentedServer.color
                  }
                }), noInstrumentedServer.serviceName]
              })]
            }), /*#__PURE__*/_jsx("small", {
              className: styles.endpointName,
              children: rpc ? rpc.operationName : operationName
            }), /*#__PURE__*/_jsxs("small", {
              className: styles.endpointName,
              children: [" ", this.getSpanBarLabel(span, spanBarOptions, label)]
            })]
          }), createSpanLink && function () {
            var links = createSpanLink(span);
            var count = countLinks(links);
            if (links && count === 1) {
              var _ref, _ref2, _links$logLinks$, _links$logLinks, _links$metricLinks, _links$traceLinks;
              var link = (_ref = (_ref2 = (_links$logLinks$ = (_links$logLinks = links.logLinks) == null ? void 0 : _links$logLinks[0]) != null ? _links$logLinks$ : (_links$metricLinks = links.metricLinks) == null ? void 0 : _links$metricLinks[0]) != null ? _ref2 : (_links$traceLinks = links.traceLinks) == null ? void 0 : _links$traceLinks[0]) != null ? _ref : undefined;
              if (!link) {
                return null;
              }
              return /*#__PURE__*/_jsx("a", {
                href: link.href
                // Needs to have target otherwise preventDefault would not work due to angularRouter.
                ,
                target: '_blank',
                style: {
                  marginRight: '5px'
                },
                rel: "noopener noreferrer",
                onClick: link.onClick ? function (event) {
                  if (!(event.ctrlKey || event.metaKey || event.shiftKey) && link.onClick) {
                    event.preventDefault();
                    link.onClick(event);
                  }
                } : undefined,
                children: link.content
              });
            } else if (links && count > 1) {
              return /*#__PURE__*/_jsx(SpanLinksMenu, {
                links: links,
                datasourceType: datasourceType
              });
            } else {
              return null;
            }
          }()]
        })
      }), /*#__PURE__*/_jsxs(TimelineRow.Cell, {
        className: cx(styles.view, viewClassName, (_cx5 = {}, _cx5[styles.viewExpanded] = isDetailExpanded, _cx5[styles.viewExpandedAndMatchingFilter] = isMatchingFilter && isDetailExpanded, _cx5)),
        "data-testid": "span-view",
        style: {
          cursor: 'pointer'
        },
        width: 1 - columnDivision,
        onClick: this._detailToggle,
        children: [/*#__PURE__*/_jsx(Ticks, {
          numTicks: numTicks
        }), /*#__PURE__*/_jsx(SpanBar, {
          rpc: rpc,
          viewStart: viewStart,
          viewEnd: viewEnd,
          getViewedBounds: getViewedBounds,
          color: color,
          shortLabel: label,
          longLabel: longLabel,
          traceStartTime: traceStartTime,
          span: span,
          labelClassName: spanBarLabelClassName + " " + hintClassName,
          className: spanBarClassName
        })]
      })]
    });
  };
  return UnthemedSpanBarRow;
}(React.PureComponent);
UnthemedSpanBarRow.displayName = 'UnthemedSpanBarRow';
UnthemedSpanBarRow.defaultProps = {
  className: '',
  rpc: null
};
export default withTheme2(UnthemedSpanBarRow);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,