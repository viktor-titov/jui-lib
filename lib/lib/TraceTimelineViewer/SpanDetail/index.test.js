import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _extends from "@babel/runtime/helpers/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

jest.mock('../utils');
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import React from 'react';
import traceGenerator from '../../demo/trace-generators';
import transformTraceData from '../../model/transform-trace-data';
import { formatDuration } from '../utils';
import DetailState from './DetailState';
import SpanDetail, { getAbsoluteTime } from './index';
import { jsx as _jsx } from "react/jsx-runtime";
describe('<SpanDetail>', function () {
  // use `transformTraceData` on a fake trace to get a fully processed span
  var span = transformTraceData(traceGenerator.trace({
    numberOfSpans: 1
  })).spans[0];
  var detailState = new DetailState().toggleLogs().toggleProcess().toggleReferences().toggleTags();
  var traceStartTime = 5;
  var topOfExploreViewRef = jest.fn();
  var props = {
    detailState: detailState,
    span: span,
    traceStartTime: traceStartTime,
    topOfExploreViewRef: topOfExploreViewRef,
    logItemToggle: jest.fn(),
    logsToggle: jest.fn(),
    processToggle: jest.fn(),
    tagsToggle: jest.fn(),
    warningsToggle: jest.fn(),
    referencesToggle: jest.fn(),
    createFocusSpanLink: jest.fn().mockReturnValue({}),
    topOfViewRefType: 'Explore'
  };
  span.logs = [{
    timestamp: 10,
    fields: [{
      key: 'message',
      value: 'oh the log message'
    }, {
      key: 'something',
      value: 'else'
    }]
  }, {
    timestamp: 20,
    fields: [{
      key: 'message',
      value: 'oh the next log message'
    }, {
      key: 'more',
      value: 'stuff'
    }]
  }];
  span.warnings = ['Warning 1', 'Warning 2'];
  span.references = [{
    refType: 'CHILD_OF',
    span: {
      spanID: 'span2',
      traceID: 'trace1',
      operationName: 'op1',
      process: {
        serviceName: 'service1'
      }
    },
    spanID: 'span1',
    traceID: 'trace1'
  }, {
    refType: 'CHILD_OF',
    span: {
      spanID: 'span3',
      traceID: 'trace1',
      operationName: 'op2',
      process: {
        serviceName: 'service2'
      }
    },
    spanID: 'span4',
    traceID: 'trace1'
  }, {
    refType: 'CHILD_OF',
    span: {
      spanID: 'span6',
      traceID: 'trace2',
      operationName: 'op2',
      process: {
        serviceName: 'service2'
      }
    },
    spanID: 'span5',
    traceID: 'trace2'
  }];
  beforeEach(function () {
    jest.mocked(formatDuration).mockReset();
    props.tagsToggle.mockReset();
    props.processToggle.mockReset();
    props.logsToggle.mockReset();
    props.logItemToggle.mockReset();
  });
  it('renders without exploding', function () {
    expect(function () {
      return render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
    }).not.toThrow();
  });
  it('shows the operation name', function () {
    render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
    expect(screen.getByRole('heading', {
      name: span.operationName
    })).toBeInTheDocument();
  });
  it('lists the service name, duration and start time', function () {
    render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
    expect(screen.getByText('Duration:')).toBeInTheDocument();
    expect(screen.getByText('Service:')).toBeInTheDocument();
    expect(screen.getByText('Start Time:')).toBeInTheDocument();
  });
  it('start time shows the absolute time', function () {
    render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
    var absoluteTime = getAbsoluteTime(span.startTime, 'browser');
    expect(screen.getByText(function (text) {
      return text.includes(absoluteTime);
    })).toBeInTheDocument();
  });
  it('renders the span tags', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
          _context.next = 3;
          return userEvent.click(screen.getByRole('switch', {
            name: /Attributes/
          }));
        case 3:
          expect(props.tagsToggle).toHaveBeenLastCalledWith(span.spanID);
        case 4:
        case "end":
          return _context.stop();
      }
    }, _callee);
  })));
  it('renders the process tags', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
          _context2.next = 3;
          return userEvent.click(screen.getByRole('switch', {
            name: /Resource/
          }));
        case 3:
          expect(props.processToggle).toHaveBeenLastCalledWith(span.spanID);
        case 4:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  })));
  it('renders the logs', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
          _context3.next = 3;
          return userEvent.click(screen.getByRole('switch', {
            name: /Events/
          }));
        case 3:
          expect(props.logsToggle).toHaveBeenLastCalledWith(span.spanID);
          _context3.next = 6;
          return userEvent.click(screen.getByRole('switch', {
            name: /oh the log/
          }));
        case 6:
          expect(props.logItemToggle).toHaveBeenLastCalledWith(span.spanID, props.span.logs[0]);
        case 7:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  })));
  it('renders the warnings', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
          _context4.next = 3;
          return userEvent.click(screen.getByRole('switch', {
            name: /Warnings/
          }));
        case 3:
          expect(props.warningsToggle).toHaveBeenLastCalledWith(span.spanID);
        case 4:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  })));
  it('renders the references', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
          _context5.next = 3;
          return userEvent.click(screen.getByRole('switch', {
            name: /References/
          }));
        case 3:
          expect(props.referencesToggle).toHaveBeenLastCalledWith(span.spanID);
        case 4:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  })));
  it('renders deep link URL', function () {
    render( /*#__PURE__*/_jsx(SpanDetail, _extends({}, props)));
    expect(document.getElementsByTagName('a').length).toBeGreaterThan(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsInJlbmRlciIsInNjcmVlbiIsInVzZXJFdmVudCIsIlJlYWN0IiwidHJhY2VHZW5lcmF0b3IiLCJ0cmFuc2Zvcm1UcmFjZURhdGEiLCJmb3JtYXREdXJhdGlvbiIsIkRldGFpbFN0YXRlIiwiU3BhbkRldGFpbCIsImdldEFic29sdXRlVGltZSIsImpzeCIsIl9qc3giLCJkZXNjcmliZSIsInNwYW4iLCJ0cmFjZSIsIm51bWJlck9mU3BhbnMiLCJzcGFucyIsImRldGFpbFN0YXRlIiwidG9nZ2xlTG9ncyIsInRvZ2dsZVByb2Nlc3MiLCJ0b2dnbGVSZWZlcmVuY2VzIiwidG9nZ2xlVGFncyIsInRyYWNlU3RhcnRUaW1lIiwidG9wT2ZFeHBsb3JlVmlld1JlZiIsImZuIiwicHJvcHMiLCJsb2dJdGVtVG9nZ2xlIiwibG9nc1RvZ2dsZSIsInByb2Nlc3NUb2dnbGUiLCJ0YWdzVG9nZ2xlIiwid2FybmluZ3NUb2dnbGUiLCJyZWZlcmVuY2VzVG9nZ2xlIiwiY3JlYXRlRm9jdXNTcGFuTGluayIsIm1vY2tSZXR1cm5WYWx1ZSIsInRvcE9mVmlld1JlZlR5cGUiLCJsb2dzIiwidGltZXN0YW1wIiwiZmllbGRzIiwia2V5IiwidmFsdWUiLCJ3YXJuaW5ncyIsInJlZmVyZW5jZXMiLCJyZWZUeXBlIiwic3BhbklEIiwidHJhY2VJRCIsIm9wZXJhdGlvbk5hbWUiLCJwcm9jZXNzIiwic2VydmljZU5hbWUiLCJiZWZvcmVFYWNoIiwibW9ja2VkIiwibW9ja1Jlc2V0IiwiaXQiLCJleHBlY3QiLCJfZXh0ZW5kcyIsIm5vdCIsInRvVGhyb3ciLCJnZXRCeVJvbGUiLCJuYW1lIiwidG9CZUluVGhlRG9jdW1lbnQiLCJnZXRCeVRleHQiLCJhYnNvbHV0ZVRpbWUiLCJzdGFydFRpbWUiLCJ0ZXh0IiwiaW5jbHVkZXMiLCJfYXN5bmNUb0dlbmVyYXRvciIsIl9yZWdlbmVyYXRvclJ1bnRpbWUiLCJtYXJrIiwiX2NhbGxlZSIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJjbGljayIsInRvSGF2ZUJlZW5MYXN0Q2FsbGVkV2l0aCIsInN0b3AiLCJfY2FsbGVlMiIsIl9jYWxsZWUyJCIsIl9jb250ZXh0MiIsIl9jYWxsZWUzIiwiX2NhbGxlZTMkIiwiX2NvbnRleHQzIiwiX2NhbGxlZTQiLCJfY2FsbGVlNCQiLCJfY29udGV4dDQiLCJfY2FsbGVlNSIsIl9jYWxsZWU1JCIsIl9jb250ZXh0NSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJsZW5ndGgiLCJ0b0JlR3JlYXRlclRoYW4iXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL1RyYWNlVGltZWxpbmVWaWV3ZXIvU3BhbkRldGFpbC9pbmRleC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuamVzdC5tb2NrKCcuLi91dGlscycpO1xuXG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IHVzZXJFdmVudCBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3VzZXItZXZlbnQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFRyYWNlU3BhblJlZmVyZW5jZSB9IGZyb20gJ3NyYy90eXBlcy90cmFjZSc7XG5cbmltcG9ydCB0cmFjZUdlbmVyYXRvciBmcm9tICcuLi8uLi9kZW1vL3RyYWNlLWdlbmVyYXRvcnMnO1xuaW1wb3J0IHRyYW5zZm9ybVRyYWNlRGF0YSBmcm9tICcuLi8uLi9tb2RlbC90cmFuc2Zvcm0tdHJhY2UtZGF0YSc7XG5pbXBvcnQgeyBmb3JtYXREdXJhdGlvbiB9IGZyb20gJy4uL3V0aWxzJztcblxuaW1wb3J0IERldGFpbFN0YXRlIGZyb20gJy4vRGV0YWlsU3RhdGUnO1xuXG5pbXBvcnQgU3BhbkRldGFpbCwgeyBnZXRBYnNvbHV0ZVRpbWUsIFNwYW5EZXRhaWxQcm9wcyB9IGZyb20gJy4vaW5kZXgnO1xuXG5kZXNjcmliZSgnPFNwYW5EZXRhaWw+JywgKCkgPT4ge1xuICAvLyB1c2UgYHRyYW5zZm9ybVRyYWNlRGF0YWAgb24gYSBmYWtlIHRyYWNlIHRvIGdldCBhIGZ1bGx5IHByb2Nlc3NlZCBzcGFuXG4gIGNvbnN0IHNwYW4gPSB0cmFuc2Zvcm1UcmFjZURhdGEodHJhY2VHZW5lcmF0b3IudHJhY2UoeyBudW1iZXJPZlNwYW5zOiAxIH0pKSEuc3BhbnNbMF07XG4gIGNvbnN0IGRldGFpbFN0YXRlID0gbmV3IERldGFpbFN0YXRlKCkudG9nZ2xlTG9ncygpLnRvZ2dsZVByb2Nlc3MoKS50b2dnbGVSZWZlcmVuY2VzKCkudG9nZ2xlVGFncygpO1xuICBjb25zdCB0cmFjZVN0YXJ0VGltZSA9IDU7XG4gIGNvbnN0IHRvcE9mRXhwbG9yZVZpZXdSZWYgPSBqZXN0LmZuKCk7XG4gIGNvbnN0IHByb3BzID0ge1xuICAgIGRldGFpbFN0YXRlLFxuICAgIHNwYW4sXG4gICAgdHJhY2VTdGFydFRpbWUsXG4gICAgdG9wT2ZFeHBsb3JlVmlld1JlZixcbiAgICBsb2dJdGVtVG9nZ2xlOiBqZXN0LmZuKCksXG4gICAgbG9nc1RvZ2dsZTogamVzdC5mbigpLFxuICAgIHByb2Nlc3NUb2dnbGU6IGplc3QuZm4oKSxcbiAgICB0YWdzVG9nZ2xlOiBqZXN0LmZuKCksXG4gICAgd2FybmluZ3NUb2dnbGU6IGplc3QuZm4oKSxcbiAgICByZWZlcmVuY2VzVG9nZ2xlOiBqZXN0LmZuKCksXG4gICAgY3JlYXRlRm9jdXNTcGFuTGluazogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7fSksXG4gICAgdG9wT2ZWaWV3UmVmVHlwZTogJ0V4cGxvcmUnLFxuICB9O1xuICBzcGFuLmxvZ3MgPSBbXG4gICAge1xuICAgICAgdGltZXN0YW1wOiAxMCxcbiAgICAgIGZpZWxkczogW1xuICAgICAgICB7IGtleTogJ21lc3NhZ2UnLCB2YWx1ZTogJ29oIHRoZSBsb2cgbWVzc2FnZScgfSxcbiAgICAgICAgeyBrZXk6ICdzb21ldGhpbmcnLCB2YWx1ZTogJ2Vsc2UnIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgdGltZXN0YW1wOiAyMCxcbiAgICAgIGZpZWxkczogW1xuICAgICAgICB7IGtleTogJ21lc3NhZ2UnLCB2YWx1ZTogJ29oIHRoZSBuZXh0IGxvZyBtZXNzYWdlJyB9LFxuICAgICAgICB7IGtleTogJ21vcmUnLCB2YWx1ZTogJ3N0dWZmJyB9LFxuICAgICAgXSxcbiAgICB9LFxuICBdO1xuXG4gIHNwYW4ud2FybmluZ3MgPSBbJ1dhcm5pbmcgMScsICdXYXJuaW5nIDInXTtcblxuICBzcGFuLnJlZmVyZW5jZXMgPSBbXG4gICAge1xuICAgICAgcmVmVHlwZTogJ0NISUxEX09GJyxcbiAgICAgIHNwYW46IHtcbiAgICAgICAgc3BhbklEOiAnc3BhbjInLFxuICAgICAgICB0cmFjZUlEOiAndHJhY2UxJyxcbiAgICAgICAgb3BlcmF0aW9uTmFtZTogJ29wMScsXG4gICAgICAgIHByb2Nlc3M6IHtcbiAgICAgICAgICBzZXJ2aWNlTmFtZTogJ3NlcnZpY2UxJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBzcGFuSUQ6ICdzcGFuMScsXG4gICAgICB0cmFjZUlEOiAndHJhY2UxJyxcbiAgICB9IGFzIFRyYWNlU3BhblJlZmVyZW5jZSxcbiAgICB7XG4gICAgICByZWZUeXBlOiAnQ0hJTERfT0YnLFxuICAgICAgc3Bhbjoge1xuICAgICAgICBzcGFuSUQ6ICdzcGFuMycsXG4gICAgICAgIHRyYWNlSUQ6ICd0cmFjZTEnLFxuICAgICAgICBvcGVyYXRpb25OYW1lOiAnb3AyJyxcbiAgICAgICAgcHJvY2Vzczoge1xuICAgICAgICAgIHNlcnZpY2VOYW1lOiAnc2VydmljZTInLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHNwYW5JRDogJ3NwYW40JyxcbiAgICAgIHRyYWNlSUQ6ICd0cmFjZTEnLFxuICAgIH0gYXMgVHJhY2VTcGFuUmVmZXJlbmNlLFxuICAgIHtcbiAgICAgIHJlZlR5cGU6ICdDSElMRF9PRicsXG4gICAgICBzcGFuOiB7XG4gICAgICAgIHNwYW5JRDogJ3NwYW42JyxcbiAgICAgICAgdHJhY2VJRDogJ3RyYWNlMicsXG4gICAgICAgIG9wZXJhdGlvbk5hbWU6ICdvcDInLFxuICAgICAgICBwcm9jZXNzOiB7XG4gICAgICAgICAgc2VydmljZU5hbWU6ICdzZXJ2aWNlMicsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgc3BhbklEOiAnc3BhbjUnLFxuICAgICAgdHJhY2VJRDogJ3RyYWNlMicsXG4gICAgfSBhcyBUcmFjZVNwYW5SZWZlcmVuY2UsXG4gIF07XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5tb2NrZWQoZm9ybWF0RHVyYXRpb24pLm1vY2tSZXNldCgpO1xuICAgIHByb3BzLnRhZ3NUb2dnbGUubW9ja1Jlc2V0KCk7XG4gICAgcHJvcHMucHJvY2Vzc1RvZ2dsZS5tb2NrUmVzZXQoKTtcbiAgICBwcm9wcy5sb2dzVG9nZ2xlLm1vY2tSZXNldCgpO1xuICAgIHByb3BzLmxvZ0l0ZW1Ub2dnbGUubW9ja1Jlc2V0KCk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIHdpdGhvdXQgZXhwbG9kaW5nJywgKCkgPT4ge1xuICAgIGV4cGVjdCgoKSA9PiByZW5kZXIoPFNwYW5EZXRhaWwgey4uLihwcm9wcyBhcyB1bmtub3duIGFzIFNwYW5EZXRhaWxQcm9wcyl9IC8+KSkubm90LnRvVGhyb3coKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3dzIHRoZSBvcGVyYXRpb24gbmFtZScsICgpID0+IHtcbiAgICByZW5kZXIoPFNwYW5EZXRhaWwgey4uLihwcm9wcyBhcyB1bmtub3duIGFzIFNwYW5EZXRhaWxQcm9wcyl9IC8+KTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnaGVhZGluZycsIHsgbmFtZTogc3Bhbi5vcGVyYXRpb25OYW1lIH0pKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnbGlzdHMgdGhlIHNlcnZpY2UgbmFtZSwgZHVyYXRpb24gYW5kIHN0YXJ0IHRpbWUnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxTcGFuRGV0YWlsIHsuLi4ocHJvcHMgYXMgdW5rbm93biBhcyBTcGFuRGV0YWlsUHJvcHMpfSAvPik7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ0R1cmF0aW9uOicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdTZXJ2aWNlOicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdTdGFydCBUaW1lOicpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICB9KTtcblxuICBpdCgnc3RhcnQgdGltZSBzaG93cyB0aGUgYWJzb2x1dGUgdGltZScsICgpID0+IHtcbiAgICByZW5kZXIoPFNwYW5EZXRhaWwgey4uLihwcm9wcyBhcyB1bmtub3duIGFzIFNwYW5EZXRhaWxQcm9wcyl9IC8+KTtcbiAgICBjb25zdCBhYnNvbHV0ZVRpbWUgPSBnZXRBYnNvbHV0ZVRpbWUoc3Bhbi5zdGFydFRpbWUsICdicm93c2VyJyk7XG4gICAgZXhwZWN0KFxuICAgICAgc2NyZWVuLmdldEJ5VGV4dCgodGV4dCkgPT4ge1xuICAgICAgICByZXR1cm4gdGV4dC5pbmNsdWRlcyhhYnNvbHV0ZVRpbWUpO1xuICAgICAgfSlcbiAgICApLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIHRoZSBzcGFuIHRhZ3MnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyKDxTcGFuRGV0YWlsIHsuLi4ocHJvcHMgYXMgdW5rbm93biBhcyBTcGFuRGV0YWlsUHJvcHMpfSAvPik7XG4gICAgYXdhaXQgdXNlckV2ZW50LmNsaWNrKHNjcmVlbi5nZXRCeVJvbGUoJ3N3aXRjaCcsIHsgbmFtZTogL0F0dHJpYnV0ZXMvIH0pKTtcbiAgICBleHBlY3QocHJvcHMudGFnc1RvZ2dsZSkudG9IYXZlQmVlbkxhc3RDYWxsZWRXaXRoKHNwYW4uc3BhbklEKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgdGhlIHByb2Nlc3MgdGFncycsIGFzeW5jICgpID0+IHtcbiAgICByZW5kZXIoPFNwYW5EZXRhaWwgey4uLihwcm9wcyBhcyB1bmtub3duIGFzIFNwYW5EZXRhaWxQcm9wcyl9IC8+KTtcbiAgICBhd2FpdCB1c2VyRXZlbnQuY2xpY2soc2NyZWVuLmdldEJ5Um9sZSgnc3dpdGNoJywgeyBuYW1lOiAvUmVzb3VyY2UvIH0pKTtcbiAgICBleHBlY3QocHJvcHMucHJvY2Vzc1RvZ2dsZSkudG9IYXZlQmVlbkxhc3RDYWxsZWRXaXRoKHNwYW4uc3BhbklEKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgdGhlIGxvZ3MnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyKDxTcGFuRGV0YWlsIHsuLi4ocHJvcHMgYXMgdW5rbm93biBhcyBTcGFuRGV0YWlsUHJvcHMpfSAvPik7XG4gICAgYXdhaXQgdXNlckV2ZW50LmNsaWNrKHNjcmVlbi5nZXRCeVJvbGUoJ3N3aXRjaCcsIHsgbmFtZTogL0V2ZW50cy8gfSkpO1xuICAgIGV4cGVjdChwcm9wcy5sb2dzVG9nZ2xlKS50b0hhdmVCZWVuTGFzdENhbGxlZFdpdGgoc3Bhbi5zcGFuSUQpO1xuICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhzY3JlZW4uZ2V0QnlSb2xlKCdzd2l0Y2gnLCB7IG5hbWU6IC9vaCB0aGUgbG9nLyB9KSk7XG4gICAgZXhwZWN0KHByb3BzLmxvZ0l0ZW1Ub2dnbGUpLnRvSGF2ZUJlZW5MYXN0Q2FsbGVkV2l0aChzcGFuLnNwYW5JRCwgcHJvcHMuc3Bhbi5sb2dzWzBdKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgdGhlIHdhcm5pbmdzJywgYXN5bmMgKCkgPT4ge1xuICAgIHJlbmRlcig8U3BhbkRldGFpbCB7Li4uKHByb3BzIGFzIHVua25vd24gYXMgU3BhbkRldGFpbFByb3BzKX0gLz4pO1xuICAgIGF3YWl0IHVzZXJFdmVudC5jbGljayhzY3JlZW4uZ2V0QnlSb2xlKCdzd2l0Y2gnLCB7IG5hbWU6IC9XYXJuaW5ncy8gfSkpO1xuICAgIGV4cGVjdChwcm9wcy53YXJuaW5nc1RvZ2dsZSkudG9IYXZlQmVlbkxhc3RDYWxsZWRXaXRoKHNwYW4uc3BhbklEKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgdGhlIHJlZmVyZW5jZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgcmVuZGVyKDxTcGFuRGV0YWlsIHsuLi4ocHJvcHMgYXMgdW5rbm93biBhcyBTcGFuRGV0YWlsUHJvcHMpfSAvPik7XG4gICAgYXdhaXQgdXNlckV2ZW50LmNsaWNrKHNjcmVlbi5nZXRCeVJvbGUoJ3N3aXRjaCcsIHsgbmFtZTogL1JlZmVyZW5jZXMvIH0pKTtcbiAgICBleHBlY3QocHJvcHMucmVmZXJlbmNlc1RvZ2dsZSkudG9IYXZlQmVlbkxhc3RDYWxsZWRXaXRoKHNwYW4uc3BhbklEKTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgZGVlcCBsaW5rIFVSTCcsICgpID0+IHtcbiAgICByZW5kZXIoPFNwYW5EZXRhaWwgey4uLihwcm9wcyBhcyB1bmtub3duIGFzIFNwYW5EZXRhaWxQcm9wcyl9IC8+KTtcbiAgICBleHBlY3QoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKS5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigxKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6Ijs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUFBLElBQUksQ0FBQ0MsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUVyQixTQUFTQyxNQUFNLEVBQUVDLE1BQU0sUUFBUSx3QkFBd0I7QUFDdkQsT0FBT0MsU0FBUyxNQUFNLDZCQUE2QjtBQUNuRCxPQUFPQyxLQUFLLE1BQU0sT0FBTztBQUd6QixPQUFPQyxjQUFjLE1BQU0sNkJBQTZCO0FBQ3hELE9BQU9DLGtCQUFrQixNQUFNLGtDQUFrQztBQUNqRSxTQUFTQyxjQUFjLFFBQVEsVUFBVTtBQUV6QyxPQUFPQyxXQUFXLE1BQU0sZUFBZTtBQUV2QyxPQUFPQyxVQUFVLElBQUlDLGVBQWUsUUFBeUIsU0FBUztBQUFDLFNBQUFDLEdBQUEsSUFBQUMsSUFBQTtBQUV2RUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxZQUFNO0VBQzdCO0VBQ0EsSUFBTUMsSUFBSSxHQUFHUixrQkFBa0IsQ0FBQ0QsY0FBYyxDQUFDVSxLQUFLLENBQUM7SUFBRUMsYUFBYSxFQUFFO0VBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBRUMsS0FBSyxDQUFDLENBQUMsQ0FBQztFQUNyRixJQUFNQyxXQUFXLEdBQUcsSUFBSVYsV0FBVyxDQUFDLENBQUMsQ0FBQ1csVUFBVSxDQUFDLENBQUMsQ0FBQ0MsYUFBYSxDQUFDLENBQUMsQ0FBQ0MsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDQyxVQUFVLENBQUMsQ0FBQztFQUNsRyxJQUFNQyxjQUFjLEdBQUcsQ0FBQztFQUN4QixJQUFNQyxtQkFBbUIsR0FBR3pCLElBQUksQ0FBQzBCLEVBQUUsQ0FBQyxDQUFDO0VBQ3JDLElBQU1DLEtBQUssR0FBRztJQUNaUixXQUFXLEVBQVhBLFdBQVc7SUFDWEosSUFBSSxFQUFKQSxJQUFJO0lBQ0pTLGNBQWMsRUFBZEEsY0FBYztJQUNkQyxtQkFBbUIsRUFBbkJBLG1CQUFtQjtJQUNuQkcsYUFBYSxFQUFFNUIsSUFBSSxDQUFDMEIsRUFBRSxDQUFDLENBQUM7SUFDeEJHLFVBQVUsRUFBRTdCLElBQUksQ0FBQzBCLEVBQUUsQ0FBQyxDQUFDO0lBQ3JCSSxhQUFhLEVBQUU5QixJQUFJLENBQUMwQixFQUFFLENBQUMsQ0FBQztJQUN4QkssVUFBVSxFQUFFL0IsSUFBSSxDQUFDMEIsRUFBRSxDQUFDLENBQUM7SUFDckJNLGNBQWMsRUFBRWhDLElBQUksQ0FBQzBCLEVBQUUsQ0FBQyxDQUFDO0lBQ3pCTyxnQkFBZ0IsRUFBRWpDLElBQUksQ0FBQzBCLEVBQUUsQ0FBQyxDQUFDO0lBQzNCUSxtQkFBbUIsRUFBRWxDLElBQUksQ0FBQzBCLEVBQUUsQ0FBQyxDQUFDLENBQUNTLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsREMsZ0JBQWdCLEVBQUU7RUFDcEIsQ0FBQztFQUNEckIsSUFBSSxDQUFDc0IsSUFBSSxHQUFHLENBQ1Y7SUFDRUMsU0FBUyxFQUFFLEVBQUU7SUFDYkMsTUFBTSxFQUFFLENBQ047TUFBRUMsR0FBRyxFQUFFLFNBQVM7TUFBRUMsS0FBSyxFQUFFO0lBQXFCLENBQUMsRUFDL0M7TUFBRUQsR0FBRyxFQUFFLFdBQVc7TUFBRUMsS0FBSyxFQUFFO0lBQU8sQ0FBQztFQUV2QyxDQUFDLEVBQ0Q7SUFDRUgsU0FBUyxFQUFFLEVBQUU7SUFDYkMsTUFBTSxFQUFFLENBQ047TUFBRUMsR0FBRyxFQUFFLFNBQVM7TUFBRUMsS0FBSyxFQUFFO0lBQTBCLENBQUMsRUFDcEQ7TUFBRUQsR0FBRyxFQUFFLE1BQU07TUFBRUMsS0FBSyxFQUFFO0lBQVEsQ0FBQztFQUVuQyxDQUFDLENBQ0Y7RUFFRDFCLElBQUksQ0FBQzJCLFFBQVEsR0FBRyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUM7RUFFMUMzQixJQUFJLENBQUM0QixVQUFVLEdBQUcsQ0FDaEI7SUFDRUMsT0FBTyxFQUFFLFVBQVU7SUFDbkI3QixJQUFJLEVBQUU7TUFDSjhCLE1BQU0sRUFBRSxPQUFPO01BQ2ZDLE9BQU8sRUFBRSxRQUFRO01BQ2pCQyxhQUFhLEVBQUUsS0FBSztNQUNwQkMsT0FBTyxFQUFFO1FBQ1BDLFdBQVcsRUFBRTtNQUNmO0lBQ0YsQ0FBQztJQUNESixNQUFNLEVBQUUsT0FBTztJQUNmQyxPQUFPLEVBQUU7RUFDWCxDQUFDLEVBQ0Q7SUFDRUYsT0FBTyxFQUFFLFVBQVU7SUFDbkI3QixJQUFJLEVBQUU7TUFDSjhCLE1BQU0sRUFBRSxPQUFPO01BQ2ZDLE9BQU8sRUFBRSxRQUFRO01BQ2pCQyxhQUFhLEVBQUUsS0FBSztNQUNwQkMsT0FBTyxFQUFFO1FBQ1BDLFdBQVcsRUFBRTtNQUNmO0lBQ0YsQ0FBQztJQUNESixNQUFNLEVBQUUsT0FBTztJQUNmQyxPQUFPLEVBQUU7RUFDWCxDQUFDLEVBQ0Q7SUFDRUYsT0FBTyxFQUFFLFVBQVU7SUFDbkI3QixJQUFJLEVBQUU7TUFDSjhCLE1BQU0sRUFBRSxPQUFPO01BQ2ZDLE9BQU8sRUFBRSxRQUFRO01BQ2pCQyxhQUFhLEVBQUUsS0FBSztNQUNwQkMsT0FBTyxFQUFFO1FBQ1BDLFdBQVcsRUFBRTtNQUNmO0lBQ0YsQ0FBQztJQUNESixNQUFNLEVBQUUsT0FBTztJQUNmQyxPQUFPLEVBQUU7RUFDWCxDQUFDLENBQ0Y7RUFFREksVUFBVSxDQUFDLFlBQU07SUFDZmxELElBQUksQ0FBQ21ELE1BQU0sQ0FBQzNDLGNBQWMsQ0FBQyxDQUFDNEMsU0FBUyxDQUFDLENBQUM7SUFDdkN6QixLQUFLLENBQUNJLFVBQVUsQ0FBQ3FCLFNBQVMsQ0FBQyxDQUFDO0lBQzVCekIsS0FBSyxDQUFDRyxhQUFhLENBQUNzQixTQUFTLENBQUMsQ0FBQztJQUMvQnpCLEtBQUssQ0FBQ0UsVUFBVSxDQUFDdUIsU0FBUyxDQUFDLENBQUM7SUFDNUJ6QixLQUFLLENBQUNDLGFBQWEsQ0FBQ3dCLFNBQVMsQ0FBQyxDQUFDO0VBQ2pDLENBQUMsQ0FBQztFQUVGQyxFQUFFLENBQUMsMkJBQTJCLEVBQUUsWUFBTTtJQUNwQ0MsTUFBTSxDQUFDO01BQUEsT0FBTXBELE1BQU0sZUFBQ1csSUFBQSxDQUFDSCxVQUFVLEVBQUE2QyxRQUFBLEtBQU01QixLQUFLLENBQWtDLENBQUMsQ0FBQztJQUFBLEVBQUMsQ0FBQzZCLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLENBQUM7RUFDL0YsQ0FBQyxDQUFDO0VBRUZKLEVBQUUsQ0FBQywwQkFBMEIsRUFBRSxZQUFNO0lBQ25DbkQsTUFBTSxlQUFDVyxJQUFBLENBQUNILFVBQVUsRUFBQTZDLFFBQUEsS0FBTTVCLEtBQUssQ0FBa0MsQ0FBQyxDQUFDO0lBQ2pFMkIsTUFBTSxDQUFDbkQsTUFBTSxDQUFDdUQsU0FBUyxDQUFDLFNBQVMsRUFBRTtNQUFFQyxJQUFJLEVBQUU1QyxJQUFJLENBQUNnQztJQUFjLENBQUMsQ0FBQyxDQUFDLENBQUNhLGlCQUFpQixDQUFDLENBQUM7RUFDdkYsQ0FBQyxDQUFDO0VBRUZQLEVBQUUsQ0FBQyxpREFBaUQsRUFBRSxZQUFNO0lBQzFEbkQsTUFBTSxlQUFDVyxJQUFBLENBQUNILFVBQVUsRUFBQTZDLFFBQUEsS0FBTTVCLEtBQUssQ0FBa0MsQ0FBQyxDQUFDO0lBQ2pFMkIsTUFBTSxDQUFDbkQsTUFBTSxDQUFDMEQsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUNELGlCQUFpQixDQUFDLENBQUM7SUFDekROLE1BQU0sQ0FBQ25ELE1BQU0sQ0FBQzBELFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDRCxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3hETixNQUFNLENBQUNuRCxNQUFNLENBQUMwRCxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQ0QsaUJBQWlCLENBQUMsQ0FBQztFQUM3RCxDQUFDLENBQUM7RUFFRlAsRUFBRSxDQUFDLG9DQUFvQyxFQUFFLFlBQU07SUFDN0NuRCxNQUFNLGVBQUNXLElBQUEsQ0FBQ0gsVUFBVSxFQUFBNkMsUUFBQSxLQUFNNUIsS0FBSyxDQUFrQyxDQUFDLENBQUM7SUFDakUsSUFBTW1DLFlBQVksR0FBR25ELGVBQWUsQ0FBQ0ksSUFBSSxDQUFDZ0QsU0FBUyxFQUFFLFNBQVMsQ0FBQztJQUMvRFQsTUFBTSxDQUNKbkQsTUFBTSxDQUFDMEQsU0FBUyxDQUFDLFVBQUNHLElBQUksRUFBSztNQUN6QixPQUFPQSxJQUFJLENBQUNDLFFBQVEsQ0FBQ0gsWUFBWSxDQUFDO0lBQ3BDLENBQUMsQ0FDSCxDQUFDLENBQUNGLGlCQUFpQixDQUFDLENBQUM7RUFDdkIsQ0FBQyxDQUFDO0VBRUZQLEVBQUUsQ0FBQyx1QkFBdUIsZUFBQWEsaUJBQUEsZUFBQUMsbUJBQUEsQ0FBQUMsSUFBQSxDQUFFLFNBQUFDLFFBQUE7SUFBQSxPQUFBRixtQkFBQSxDQUFBRyxJQUFBLFVBQUFDLFNBQUFDLFFBQUE7TUFBQSxrQkFBQUEsUUFBQSxDQUFBQyxJQUFBLEdBQUFELFFBQUEsQ0FBQUUsSUFBQTtRQUFBO1VBQzFCeEUsTUFBTSxlQUFDVyxJQUFBLENBQUNILFVBQVUsRUFBQTZDLFFBQUEsS0FBTTVCLEtBQUssQ0FBa0MsQ0FBQyxDQUFDO1VBQUM2QyxRQUFBLENBQUFFLElBQUE7VUFBQSxPQUM1RHRFLFNBQVMsQ0FBQ3VFLEtBQUssQ0FBQ3hFLE1BQU0sQ0FBQ3VELFNBQVMsQ0FBQyxRQUFRLEVBQUU7WUFBRUMsSUFBSSxFQUFFO1VBQWEsQ0FBQyxDQUFDLENBQUM7UUFBQTtVQUN6RUwsTUFBTSxDQUFDM0IsS0FBSyxDQUFDSSxVQUFVLENBQUMsQ0FBQzZDLHdCQUF3QixDQUFDN0QsSUFBSSxDQUFDOEIsTUFBTSxDQUFDO1FBQUM7UUFBQTtVQUFBLE9BQUEyQixRQUFBLENBQUFLLElBQUE7TUFBQTtJQUFBLEdBQUFSLE9BQUE7RUFBQSxDQUNoRSxHQUFDO0VBRUZoQixFQUFFLENBQUMsMEJBQTBCLGVBQUFhLGlCQUFBLGVBQUFDLG1CQUFBLENBQUFDLElBQUEsQ0FBRSxTQUFBVSxTQUFBO0lBQUEsT0FBQVgsbUJBQUEsQ0FBQUcsSUFBQSxVQUFBUyxVQUFBQyxTQUFBO01BQUEsa0JBQUFBLFNBQUEsQ0FBQVAsSUFBQSxHQUFBTyxTQUFBLENBQUFOLElBQUE7UUFBQTtVQUM3QnhFLE1BQU0sZUFBQ1csSUFBQSxDQUFDSCxVQUFVLEVBQUE2QyxRQUFBLEtBQU01QixLQUFLLENBQWtDLENBQUMsQ0FBQztVQUFDcUQsU0FBQSxDQUFBTixJQUFBO1VBQUEsT0FDNUR0RSxTQUFTLENBQUN1RSxLQUFLLENBQUN4RSxNQUFNLENBQUN1RCxTQUFTLENBQUMsUUFBUSxFQUFFO1lBQUVDLElBQUksRUFBRTtVQUFXLENBQUMsQ0FBQyxDQUFDO1FBQUE7VUFDdkVMLE1BQU0sQ0FBQzNCLEtBQUssQ0FBQ0csYUFBYSxDQUFDLENBQUM4Qyx3QkFBd0IsQ0FBQzdELElBQUksQ0FBQzhCLE1BQU0sQ0FBQztRQUFDO1FBQUE7VUFBQSxPQUFBbUMsU0FBQSxDQUFBSCxJQUFBO01BQUE7SUFBQSxHQUFBQyxRQUFBO0VBQUEsQ0FDbkUsR0FBQztFQUVGekIsRUFBRSxDQUFDLGtCQUFrQixlQUFBYSxpQkFBQSxlQUFBQyxtQkFBQSxDQUFBQyxJQUFBLENBQUUsU0FBQWEsU0FBQTtJQUFBLE9BQUFkLG1CQUFBLENBQUFHLElBQUEsVUFBQVksVUFBQUMsU0FBQTtNQUFBLGtCQUFBQSxTQUFBLENBQUFWLElBQUEsR0FBQVUsU0FBQSxDQUFBVCxJQUFBO1FBQUE7VUFDckJ4RSxNQUFNLGVBQUNXLElBQUEsQ0FBQ0gsVUFBVSxFQUFBNkMsUUFBQSxLQUFNNUIsS0FBSyxDQUFrQyxDQUFDLENBQUM7VUFBQ3dELFNBQUEsQ0FBQVQsSUFBQTtVQUFBLE9BQzVEdEUsU0FBUyxDQUFDdUUsS0FBSyxDQUFDeEUsTUFBTSxDQUFDdUQsU0FBUyxDQUFDLFFBQVEsRUFBRTtZQUFFQyxJQUFJLEVBQUU7VUFBUyxDQUFDLENBQUMsQ0FBQztRQUFBO1VBQ3JFTCxNQUFNLENBQUMzQixLQUFLLENBQUNFLFVBQVUsQ0FBQyxDQUFDK0Msd0JBQXdCLENBQUM3RCxJQUFJLENBQUM4QixNQUFNLENBQUM7VUFBQ3NDLFNBQUEsQ0FBQVQsSUFBQTtVQUFBLE9BQ3pEdEUsU0FBUyxDQUFDdUUsS0FBSyxDQUFDeEUsTUFBTSxDQUFDdUQsU0FBUyxDQUFDLFFBQVEsRUFBRTtZQUFFQyxJQUFJLEVBQUU7VUFBYSxDQUFDLENBQUMsQ0FBQztRQUFBO1VBQ3pFTCxNQUFNLENBQUMzQixLQUFLLENBQUNDLGFBQWEsQ0FBQyxDQUFDZ0Qsd0JBQXdCLENBQUM3RCxJQUFJLENBQUM4QixNQUFNLEVBQUVsQixLQUFLLENBQUNaLElBQUksQ0FBQ3NCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUFDO1FBQUE7VUFBQSxPQUFBOEMsU0FBQSxDQUFBTixJQUFBO01BQUE7SUFBQSxHQUFBSSxRQUFBO0VBQUEsQ0FDdkYsR0FBQztFQUVGNUIsRUFBRSxDQUFDLHNCQUFzQixlQUFBYSxpQkFBQSxlQUFBQyxtQkFBQSxDQUFBQyxJQUFBLENBQUUsU0FBQWdCLFNBQUE7SUFBQSxPQUFBakIsbUJBQUEsQ0FBQUcsSUFBQSxVQUFBZSxVQUFBQyxTQUFBO01BQUEsa0JBQUFBLFNBQUEsQ0FBQWIsSUFBQSxHQUFBYSxTQUFBLENBQUFaLElBQUE7UUFBQTtVQUN6QnhFLE1BQU0sZUFBQ1csSUFBQSxDQUFDSCxVQUFVLEVBQUE2QyxRQUFBLEtBQU01QixLQUFLLENBQWtDLENBQUMsQ0FBQztVQUFDMkQsU0FBQSxDQUFBWixJQUFBO1VBQUEsT0FDNUR0RSxTQUFTLENBQUN1RSxLQUFLLENBQUN4RSxNQUFNLENBQUN1RCxTQUFTLENBQUMsUUFBUSxFQUFFO1lBQUVDLElBQUksRUFBRTtVQUFXLENBQUMsQ0FBQyxDQUFDO1FBQUE7VUFDdkVMLE1BQU0sQ0FBQzNCLEtBQUssQ0FBQ0ssY0FBYyxDQUFDLENBQUM0Qyx3QkFBd0IsQ0FBQzdELElBQUksQ0FBQzhCLE1BQU0sQ0FBQztRQUFDO1FBQUE7VUFBQSxPQUFBeUMsU0FBQSxDQUFBVCxJQUFBO01BQUE7SUFBQSxHQUFBTyxRQUFBO0VBQUEsQ0FDcEUsR0FBQztFQUVGL0IsRUFBRSxDQUFDLHdCQUF3QixlQUFBYSxpQkFBQSxlQUFBQyxtQkFBQSxDQUFBQyxJQUFBLENBQUUsU0FBQW1CLFNBQUE7SUFBQSxPQUFBcEIsbUJBQUEsQ0FBQUcsSUFBQSxVQUFBa0IsVUFBQUMsU0FBQTtNQUFBLGtCQUFBQSxTQUFBLENBQUFoQixJQUFBLEdBQUFnQixTQUFBLENBQUFmLElBQUE7UUFBQTtVQUMzQnhFLE1BQU0sZUFBQ1csSUFBQSxDQUFDSCxVQUFVLEVBQUE2QyxRQUFBLEtBQU01QixLQUFLLENBQWtDLENBQUMsQ0FBQztVQUFDOEQsU0FBQSxDQUFBZixJQUFBO1VBQUEsT0FDNUR0RSxTQUFTLENBQUN1RSxLQUFLLENBQUN4RSxNQUFNLENBQUN1RCxTQUFTLENBQUMsUUFBUSxFQUFFO1lBQUVDLElBQUksRUFBRTtVQUFhLENBQUMsQ0FBQyxDQUFDO1FBQUE7VUFDekVMLE1BQU0sQ0FBQzNCLEtBQUssQ0FBQ00sZ0JBQWdCLENBQUMsQ0FBQzJDLHdCQUF3QixDQUFDN0QsSUFBSSxDQUFDOEIsTUFBTSxDQUFDO1FBQUM7UUFBQTtVQUFBLE9BQUE0QyxTQUFBLENBQUFaLElBQUE7TUFBQTtJQUFBLEdBQUFVLFFBQUE7RUFBQSxDQUN0RSxHQUFDO0VBRUZsQyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsWUFBTTtJQUNoQ25ELE1BQU0sZUFBQ1csSUFBQSxDQUFDSCxVQUFVLEVBQUE2QyxRQUFBLEtBQU01QixLQUFLLENBQWtDLENBQUMsQ0FBQztJQUNqRTJCLE1BQU0sQ0FBQ29DLFFBQVEsQ0FBQ0Msb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUNDLE1BQU0sQ0FBQyxDQUFDQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0VBQ3RFLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==