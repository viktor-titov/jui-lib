import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { render, screen, within } from '@testing-library/react';
import React from 'react';
import AccordianText from './AccordianText';
import { jsx as _jsx } from "react/jsx-runtime";
var warnings = ['Duplicated tag', 'Duplicated spanId'];
describe('<AccordianText>', function () {
  var props = {
    compact: false,
    data: warnings,
    highContrast: false,
    isOpen: false,
    label: 'le-label',
    onToggle: jest.fn()
  };
  it('renders without exploding', function () {
    render( /*#__PURE__*/_jsx(AccordianText, _extends({}, props)));
    expect(function () {
      return render( /*#__PURE__*/_jsx(AccordianText, _extends({}, props)));
    }).not.toThrow();
  });
  it('renders the label', function () {
    render( /*#__PURE__*/_jsx(AccordianText, _extends({}, props)));
    var _within = within(screen.getByTestId('AccordianText--header')),
      getByText = _within.getByText;
    expect(getByText(props.label)).toBeInTheDocument();
  });
  it('renders the content when it is expanded', function () {
    props.isOpen = true;
    render( /*#__PURE__*/_jsx(AccordianText, _extends({}, props)));
    warnings.forEach(function (warning) {
      expect(screen.getByText(warning)).toBeInTheDocument();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZW5kZXIiLCJzY3JlZW4iLCJ3aXRoaW4iLCJSZWFjdCIsIkFjY29yZGlhblRleHQiLCJqc3giLCJfanN4Iiwid2FybmluZ3MiLCJkZXNjcmliZSIsInByb3BzIiwiY29tcGFjdCIsImRhdGEiLCJoaWdoQ29udHJhc3QiLCJpc09wZW4iLCJsYWJlbCIsIm9uVG9nZ2xlIiwiamVzdCIsImZuIiwiaXQiLCJfZXh0ZW5kcyIsImV4cGVjdCIsIm5vdCIsInRvVGhyb3ciLCJfd2l0aGluIiwiZ2V0QnlUZXN0SWQiLCJnZXRCeVRleHQiLCJ0b0JlSW5UaGVEb2N1bWVudCIsImZvckVhY2giLCJ3YXJuaW5nIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9UcmFjZVRpbWVsaW5lVmlld2VyL1NwYW5EZXRhaWwvQWNjb3JkaWFuVGV4dC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTkgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIHdpdGhpbiB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IEFjY29yZGlhblRleHQgZnJvbSAnLi9BY2NvcmRpYW5UZXh0JztcblxuY29uc3Qgd2FybmluZ3MgPSBbJ0R1cGxpY2F0ZWQgdGFnJywgJ0R1cGxpY2F0ZWQgc3BhbklkJ107XG5cbmRlc2NyaWJlKCc8QWNjb3JkaWFuVGV4dD4nLCAoKSA9PiB7XG4gIGNvbnN0IHByb3BzID0ge1xuICAgIGNvbXBhY3Q6IGZhbHNlLFxuICAgIGRhdGE6IHdhcm5pbmdzLFxuICAgIGhpZ2hDb250cmFzdDogZmFsc2UsXG4gICAgaXNPcGVuOiBmYWxzZSxcbiAgICBsYWJlbDogJ2xlLWxhYmVsJyxcbiAgICBvblRvZ2dsZTogamVzdC5mbigpLFxuICB9O1xuXG4gIGl0KCdyZW5kZXJzIHdpdGhvdXQgZXhwbG9kaW5nJywgKCkgPT4ge1xuICAgIHJlbmRlcig8QWNjb3JkaWFuVGV4dCB7Li4ucHJvcHN9IC8+KTtcbiAgICBleHBlY3QoKCkgPT4gcmVuZGVyKDxBY2NvcmRpYW5UZXh0IHsuLi5wcm9wc30gLz4pKS5ub3QudG9UaHJvdygpO1xuICB9KTtcblxuICBpdCgncmVuZGVycyB0aGUgbGFiZWwnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxBY2NvcmRpYW5UZXh0IHsuLi5wcm9wc30gLz4pO1xuICAgIGNvbnN0IHsgZ2V0QnlUZXh0IH0gPSB3aXRoaW4oc2NyZWVuLmdldEJ5VGVzdElkKCdBY2NvcmRpYW5UZXh0LS1oZWFkZXInKSk7XG4gICAgZXhwZWN0KGdldEJ5VGV4dChwcm9wcy5sYWJlbCkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIHRoZSBjb250ZW50IHdoZW4gaXQgaXMgZXhwYW5kZWQnLCAoKSA9PiB7XG4gICAgcHJvcHMuaXNPcGVuID0gdHJ1ZTtcbiAgICByZW5kZXIoPEFjY29yZGlhblRleHQgey4uLnByb3BzfSAvPik7XG4gICAgd2FybmluZ3MuZm9yRWFjaCgod2FybmluZykgPT4ge1xuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQod2FybmluZykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxNQUFNLEVBQUVDLE1BQU0sRUFBRUMsTUFBTSxRQUFRLHdCQUF3QjtBQUMvRCxPQUFPQyxLQUFLLE1BQU0sT0FBTztBQUV6QixPQUFPQyxhQUFhLE1BQU0saUJBQWlCO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBRTVDLElBQU1DLFFBQVEsR0FBRyxDQUFDLGdCQUFnQixFQUFFLG1CQUFtQixDQUFDO0FBRXhEQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsWUFBTTtFQUNoQyxJQUFNQyxLQUFLLEdBQUc7SUFDWkMsT0FBTyxFQUFFLEtBQUs7SUFDZEMsSUFBSSxFQUFFSixRQUFRO0lBQ2RLLFlBQVksRUFBRSxLQUFLO0lBQ25CQyxNQUFNLEVBQUUsS0FBSztJQUNiQyxLQUFLLEVBQUUsVUFBVTtJQUNqQkMsUUFBUSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsQ0FBQztFQUNwQixDQUFDO0VBRURDLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxZQUFNO0lBQ3BDbEIsTUFBTSxlQUFDTSxJQUFBLENBQUNGLGFBQWEsRUFBQWUsUUFBQSxLQUFLVixLQUFLLENBQUcsQ0FBQyxDQUFDO0lBQ3BDVyxNQUFNLENBQUM7TUFBQSxPQUFNcEIsTUFBTSxlQUFDTSxJQUFBLENBQUNGLGFBQWEsRUFBQWUsUUFBQSxLQUFLVixLQUFLLENBQUcsQ0FBQyxDQUFDO0lBQUEsRUFBQyxDQUFDWSxHQUFHLENBQUNDLE9BQU8sQ0FBQyxDQUFDO0VBQ2xFLENBQUMsQ0FBQztFQUVGSixFQUFFLENBQUMsbUJBQW1CLEVBQUUsWUFBTTtJQUM1QmxCLE1BQU0sZUFBQ00sSUFBQSxDQUFDRixhQUFhLEVBQUFlLFFBQUEsS0FBS1YsS0FBSyxDQUFHLENBQUMsQ0FBQztJQUNwQyxJQUFBYyxPQUFBLEdBQXNCckIsTUFBTSxDQUFDRCxNQUFNLENBQUN1QixXQUFXLENBQUMsdUJBQXVCLENBQUMsQ0FBQztNQUFqRUMsU0FBUyxHQUFBRixPQUFBLENBQVRFLFNBQVM7SUFDakJMLE1BQU0sQ0FBQ0ssU0FBUyxDQUFDaEIsS0FBSyxDQUFDSyxLQUFLLENBQUMsQ0FBQyxDQUFDWSxpQkFBaUIsQ0FBQyxDQUFDO0VBQ3BELENBQUMsQ0FBQztFQUVGUixFQUFFLENBQUMseUNBQXlDLEVBQUUsWUFBTTtJQUNsRFQsS0FBSyxDQUFDSSxNQUFNLEdBQUcsSUFBSTtJQUNuQmIsTUFBTSxlQUFDTSxJQUFBLENBQUNGLGFBQWEsRUFBQWUsUUFBQSxLQUFLVixLQUFLLENBQUcsQ0FBQyxDQUFDO0lBQ3BDRixRQUFRLENBQUNvQixPQUFPLENBQUMsVUFBQ0MsT0FBTyxFQUFLO01BQzVCUixNQUFNLENBQUNuQixNQUFNLENBQUN3QixTQUFTLENBQUNHLE9BQU8sQ0FBQyxDQUFDLENBQUNGLGlCQUFpQixDQUFDLENBQUM7SUFDdkQsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiaWdub3JlTGlzdCI6W119