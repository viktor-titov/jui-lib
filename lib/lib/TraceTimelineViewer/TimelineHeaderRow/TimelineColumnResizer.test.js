import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { fireEvent, render, screen } from '@testing-library/react';
import cx from 'classnames';
import React from 'react';
import TimelineColumnResizer, { getStyles } from './TimelineColumnResizer';
import { jsx as _jsx } from "react/jsx-runtime";
var mockOnChange = jest.fn();
describe('<TimelineColumnResizer>', function () {
  var props = {
    min: 0.1,
    max: 0.9,
    onChange: mockOnChange,
    position: 0.5,
    columnResizeHandleHeight: 10
  };
  beforeEach(function () {
    mockOnChange.mockReset();
    render( /*#__PURE__*/_jsx(TimelineColumnResizer, _extends({}, props)));
  });
  it('renders without exploding', function () {
    expect(screen.getByTestId('TimelineColumnResizer')).toBeTruthy();
    expect(screen.getByTestId('TimelineColumnResizer--gripIcon')).toBeTruthy();
    expect(screen.getByTestId('TimelineColumnResizer--dragger')).toBeTruthy();
  });
  it('does not render a dragging indicator when not dragging', function () {
    var styles = getStyles();
    expect(screen.getByTestId('TimelineColumnResizer--dragger')).toHaveStyle("right: " + undefined);
    expect(screen.getByTestId('TimelineColumnResizer--dragger')).toHaveClass(styles.dragger);
  });
  it('renders a dragging indicator when dragging', function () {
    var styles = getStyles();
    fireEvent.mouseDown(screen.getByTestId('TimelineColumnResizer--dragger'), {
      clientX: 0
    });
    fireEvent.mouseMove(screen.getByTestId('TimelineColumnResizer--dragger'), {
      clientX: -5
    });
    expect(screen.getByTestId('TimelineColumnResizer--dragger')).toHaveClass(cx(styles.dragger, styles.draggerDragging, styles.draggerDraggingLeft));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmaXJlRXZlbnQiLCJyZW5kZXIiLCJzY3JlZW4iLCJjeCIsIlJlYWN0IiwiVGltZWxpbmVDb2x1bW5SZXNpemVyIiwiZ2V0U3R5bGVzIiwianN4IiwiX2pzeCIsIm1vY2tPbkNoYW5nZSIsImplc3QiLCJmbiIsImRlc2NyaWJlIiwicHJvcHMiLCJtaW4iLCJtYXgiLCJvbkNoYW5nZSIsInBvc2l0aW9uIiwiY29sdW1uUmVzaXplSGFuZGxlSGVpZ2h0IiwiYmVmb3JlRWFjaCIsIm1vY2tSZXNldCIsIl9leHRlbmRzIiwiaXQiLCJleHBlY3QiLCJnZXRCeVRlc3RJZCIsInRvQmVUcnV0aHkiLCJzdHlsZXMiLCJ0b0hhdmVTdHlsZSIsInVuZGVmaW5lZCIsInRvSGF2ZUNsYXNzIiwiZHJhZ2dlciIsIm1vdXNlRG93biIsImNsaWVudFgiLCJtb3VzZU1vdmUiLCJkcmFnZ2VyRHJhZ2dpbmciLCJkcmFnZ2VyRHJhZ2dpbmdMZWZ0Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9UcmFjZVRpbWVsaW5lVmlld2VyL1RpbWVsaW5lSGVhZGVyUm93L1RpbWVsaW5lQ29sdW1uUmVzaXplci50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTcgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgZmlyZUV2ZW50LCByZW5kZXIsIHNjcmVlbiB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnO1xuaW1wb3J0IGN4IGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IFRpbWVsaW5lQ29sdW1uUmVzaXplciwgeyBnZXRTdHlsZXMsIFRpbWVsaW5lQ29sdW1uUmVzaXplclByb3BzIH0gZnJvbSAnLi9UaW1lbGluZUNvbHVtblJlc2l6ZXInO1xuXG5jb25zdCBtb2NrT25DaGFuZ2UgPSBqZXN0LmZuKCk7XG5cbmRlc2NyaWJlKCc8VGltZWxpbmVDb2x1bW5SZXNpemVyPicsICgpID0+IHtcbiAgY29uc3QgcHJvcHM6IFRpbWVsaW5lQ29sdW1uUmVzaXplclByb3BzID0ge1xuICAgIG1pbjogMC4xLFxuICAgIG1heDogMC45LFxuICAgIG9uQ2hhbmdlOiBtb2NrT25DaGFuZ2UsXG4gICAgcG9zaXRpb246IDAuNSxcbiAgICBjb2x1bW5SZXNpemVIYW5kbGVIZWlnaHQ6IDEwLFxuICB9O1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIG1vY2tPbkNoYW5nZS5tb2NrUmVzZXQoKTtcbiAgICByZW5kZXIoPFRpbWVsaW5lQ29sdW1uUmVzaXplciB7Li4ucHJvcHN9IC8+KTtcbiAgfSk7XG5cbiAgaXQoJ3JlbmRlcnMgd2l0aG91dCBleHBsb2RpbmcnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnVGltZWxpbmVDb2x1bW5SZXNpemVyJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdUaW1lbGluZUNvbHVtblJlc2l6ZXItLWdyaXBJY29uJykpLnRvQmVUcnV0aHkoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdUaW1lbGluZUNvbHVtblJlc2l6ZXItLWRyYWdnZXInKSkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnZG9lcyBub3QgcmVuZGVyIGEgZHJhZ2dpbmcgaW5kaWNhdG9yIHdoZW4gbm90IGRyYWdnaW5nJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0eWxlcyA9IGdldFN0eWxlcygpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ1RpbWVsaW5lQ29sdW1uUmVzaXplci0tZHJhZ2dlcicpKS50b0hhdmVTdHlsZShgcmlnaHQ6ICR7dW5kZWZpbmVkfWApO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ1RpbWVsaW5lQ29sdW1uUmVzaXplci0tZHJhZ2dlcicpKS50b0hhdmVDbGFzcyhzdHlsZXMuZHJhZ2dlcik7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIGEgZHJhZ2dpbmcgaW5kaWNhdG9yIHdoZW4gZHJhZ2dpbmcnLCAoKSA9PiB7XG4gICAgY29uc3Qgc3R5bGVzID0gZ2V0U3R5bGVzKCk7XG4gICAgZmlyZUV2ZW50Lm1vdXNlRG93bihzY3JlZW4uZ2V0QnlUZXN0SWQoJ1RpbWVsaW5lQ29sdW1uUmVzaXplci0tZHJhZ2dlcicpLCB7IGNsaWVudFg6IDAgfSk7XG4gICAgZmlyZUV2ZW50Lm1vdXNlTW92ZShzY3JlZW4uZ2V0QnlUZXN0SWQoJ1RpbWVsaW5lQ29sdW1uUmVzaXplci0tZHJhZ2dlcicpLCB7IGNsaWVudFg6IC01IH0pO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ1RpbWVsaW5lQ29sdW1uUmVzaXplci0tZHJhZ2dlcicpKS50b0hhdmVDbGFzcyhcbiAgICAgIGN4KHN0eWxlcy5kcmFnZ2VyLCBzdHlsZXMuZHJhZ2dlckRyYWdnaW5nLCBzdHlsZXMuZHJhZ2dlckRyYWdnaW5nTGVmdClcbiAgICApO1xuICB9KTtcbn0pO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsU0FBUyxFQUFFQyxNQUFNLEVBQUVDLE1BQU0sUUFBUSx3QkFBd0I7QUFDbEUsT0FBT0MsRUFBRSxNQUFNLFlBQVk7QUFDM0IsT0FBT0MsS0FBSyxNQUFNLE9BQU87QUFFekIsT0FBT0MscUJBQXFCLElBQUlDLFNBQVMsUUFBb0MseUJBQXlCO0FBQUMsU0FBQUMsR0FBQSxJQUFBQyxJQUFBO0FBRXZHLElBQU1DLFlBQVksR0FBR0MsSUFBSSxDQUFDQyxFQUFFLENBQUMsQ0FBQztBQUU5QkMsUUFBUSxDQUFDLHlCQUF5QixFQUFFLFlBQU07RUFDeEMsSUFBTUMsS0FBaUMsR0FBRztJQUN4Q0MsR0FBRyxFQUFFLEdBQUc7SUFDUkMsR0FBRyxFQUFFLEdBQUc7SUFDUkMsUUFBUSxFQUFFUCxZQUFZO0lBQ3RCUSxRQUFRLEVBQUUsR0FBRztJQUNiQyx3QkFBd0IsRUFBRTtFQUM1QixDQUFDO0VBRURDLFVBQVUsQ0FBQyxZQUFNO0lBQ2ZWLFlBQVksQ0FBQ1csU0FBUyxDQUFDLENBQUM7SUFDeEJuQixNQUFNLGVBQUNPLElBQUEsQ0FBQ0gscUJBQXFCLEVBQUFnQixRQUFBLEtBQUtSLEtBQUssQ0FBRyxDQUFDLENBQUM7RUFDOUMsQ0FBQyxDQUFDO0VBRUZTLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxZQUFNO0lBQ3BDQyxNQUFNLENBQUNyQixNQUFNLENBQUNzQixXQUFXLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDQyxVQUFVLENBQUMsQ0FBQztJQUNoRUYsTUFBTSxDQUFDckIsTUFBTSxDQUFDc0IsV0FBVyxDQUFDLGlDQUFpQyxDQUFDLENBQUMsQ0FBQ0MsVUFBVSxDQUFDLENBQUM7SUFDMUVGLE1BQU0sQ0FBQ3JCLE1BQU0sQ0FBQ3NCLFdBQVcsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUNDLFVBQVUsQ0FBQyxDQUFDO0VBQzNFLENBQUMsQ0FBQztFQUVGSCxFQUFFLENBQUMsd0RBQXdELEVBQUUsWUFBTTtJQUNqRSxJQUFNSSxNQUFNLEdBQUdwQixTQUFTLENBQUMsQ0FBQztJQUMxQmlCLE1BQU0sQ0FBQ3JCLE1BQU0sQ0FBQ3NCLFdBQVcsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUNHLFdBQVcsYUFBV0MsU0FBVyxDQUFDO0lBQy9GTCxNQUFNLENBQUNyQixNQUFNLENBQUNzQixXQUFXLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDSyxXQUFXLENBQUNILE1BQU0sQ0FBQ0ksT0FBTyxDQUFDO0VBQzFGLENBQUMsQ0FBQztFQUVGUixFQUFFLENBQUMsNENBQTRDLEVBQUUsWUFBTTtJQUNyRCxJQUFNSSxNQUFNLEdBQUdwQixTQUFTLENBQUMsQ0FBQztJQUMxQk4sU0FBUyxDQUFDK0IsU0FBUyxDQUFDN0IsTUFBTSxDQUFDc0IsV0FBVyxDQUFDLGdDQUFnQyxDQUFDLEVBQUU7TUFBRVEsT0FBTyxFQUFFO0lBQUUsQ0FBQyxDQUFDO0lBQ3pGaEMsU0FBUyxDQUFDaUMsU0FBUyxDQUFDL0IsTUFBTSxDQUFDc0IsV0FBVyxDQUFDLGdDQUFnQyxDQUFDLEVBQUU7TUFBRVEsT0FBTyxFQUFFLENBQUM7SUFBRSxDQUFDLENBQUM7SUFDMUZULE1BQU0sQ0FBQ3JCLE1BQU0sQ0FBQ3NCLFdBQVcsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDLENBQUNLLFdBQVcsQ0FDdEUxQixFQUFFLENBQUN1QixNQUFNLENBQUNJLE9BQU8sRUFBRUosTUFBTSxDQUFDUSxlQUFlLEVBQUVSLE1BQU0sQ0FBQ1MsbUJBQW1CLENBQ3ZFLENBQUM7RUFDSCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=