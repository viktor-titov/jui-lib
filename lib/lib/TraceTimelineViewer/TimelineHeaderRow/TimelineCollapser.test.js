import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { render, screen } from '@testing-library/react';
import React from 'react';
import { TimelineCollapser } from './TimelineCollapser';
import { jsx as _jsx } from "react/jsx-runtime";
var setup = function setup() {
  var props = {
    onCollapseAll: function onCollapseAll() {},
    onCollapseOne: function onCollapseOne() {},
    onExpandAll: function onExpandAll() {},
    onExpandOne: function onExpandOne() {}
  };
  return render( /*#__PURE__*/_jsx(TimelineCollapser, _extends({}, props)));
};
describe('TimelineCollapser test', function () {
  it('renders without exploding', function () {
    expect(function () {
      return setup();
    }).not.toThrow();
  });
  it('renders correctly', function () {
    setup();
    expect(screen.getByTestId('TimelineCollapser')).toBeInTheDocument();
    expect(screen.getByRole('button', {
      name: 'Expand All'
    })).toBeInTheDocument();
    expect(screen.getByRole('button', {
      name: 'Collapse All'
    })).toBeInTheDocument();
    expect(screen.getByRole('button', {
      name: 'Expand +1'
    })).toBeInTheDocument();
    expect(screen.getByRole('button', {
      name: 'Collapse +1'
    })).toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZW5kZXIiLCJzY3JlZW4iLCJSZWFjdCIsIlRpbWVsaW5lQ29sbGFwc2VyIiwianN4IiwiX2pzeCIsInNldHVwIiwicHJvcHMiLCJvbkNvbGxhcHNlQWxsIiwib25Db2xsYXBzZU9uZSIsIm9uRXhwYW5kQWxsIiwib25FeHBhbmRPbmUiLCJfZXh0ZW5kcyIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJub3QiLCJ0b1Rocm93IiwiZ2V0QnlUZXN0SWQiLCJ0b0JlSW5UaGVEb2N1bWVudCIsImdldEJ5Um9sZSIsIm5hbWUiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL1RyYWNlVGltZWxpbmVWaWV3ZXIvVGltZWxpbmVIZWFkZXJSb3cvVGltZWxpbmVDb2xsYXBzZXIudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuIH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdCc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgeyBUaW1lbGluZUNvbGxhcHNlciB9IGZyb20gJy4vVGltZWxpbmVDb2xsYXBzZXInO1xuXG5jb25zdCBzZXR1cCA9ICgpID0+IHtcbiAgY29uc3QgcHJvcHMgPSB7XG4gICAgb25Db2xsYXBzZUFsbDogKCkgPT4ge30sXG4gICAgb25Db2xsYXBzZU9uZTogKCkgPT4ge30sXG4gICAgb25FeHBhbmRBbGw6ICgpID0+IHt9LFxuICAgIG9uRXhwYW5kT25lOiAoKSA9PiB7fSxcbiAgfTtcbiAgcmV0dXJuIHJlbmRlcig8VGltZWxpbmVDb2xsYXBzZXIgey4uLnByb3BzfSAvPik7XG59O1xuXG5kZXNjcmliZSgnVGltZWxpbmVDb2xsYXBzZXIgdGVzdCcsICgpID0+IHtcbiAgaXQoJ3JlbmRlcnMgd2l0aG91dCBleHBsb2RpbmcnLCAoKSA9PiB7XG4gICAgZXhwZWN0KCgpID0+IHNldHVwKCkpLm5vdC50b1Rocm93KCk7XG4gIH0pO1xuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBzZXR1cCgpO1xuXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnVGltZWxpbmVDb2xsYXBzZXInKSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAnRXhwYW5kIEFsbCcgfSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogJ0NvbGxhcHNlIEFsbCcgfSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogJ0V4cGFuZCArMScgfSkpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogJ0NvbGxhcHNlICsxJyB9KSkudG9CZUluVGhlRG9jdW1lbnQoKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLE1BQU0sRUFBRUMsTUFBTSxRQUFRLHdCQUF3QjtBQUN2RCxPQUFPQyxLQUFLLE1BQU0sT0FBTztBQUV6QixTQUFTQyxpQkFBaUIsUUFBUSxxQkFBcUI7QUFBQyxTQUFBQyxHQUFBLElBQUFDLElBQUE7QUFFeEQsSUFBTUMsS0FBSyxHQUFHLFNBQVJBLEtBQUtBLENBQUEsRUFBUztFQUNsQixJQUFNQyxLQUFLLEdBQUc7SUFDWkMsYUFBYSxFQUFFLFNBQUFBLGNBQUEsRUFBTSxDQUFDLENBQUM7SUFDdkJDLGFBQWEsRUFBRSxTQUFBQSxjQUFBLEVBQU0sQ0FBQyxDQUFDO0lBQ3ZCQyxXQUFXLEVBQUUsU0FBQUEsWUFBQSxFQUFNLENBQUMsQ0FBQztJQUNyQkMsV0FBVyxFQUFFLFNBQUFBLFlBQUEsRUFBTSxDQUFDO0VBQ3RCLENBQUM7RUFDRCxPQUFPWCxNQUFNLGVBQUNLLElBQUEsQ0FBQ0YsaUJBQWlCLEVBQUFTLFFBQUEsS0FBS0wsS0FBSyxDQUFHLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBRURNLFFBQVEsQ0FBQyx3QkFBd0IsRUFBRSxZQUFNO0VBQ3ZDQyxFQUFFLENBQUMsMkJBQTJCLEVBQUUsWUFBTTtJQUNwQ0MsTUFBTSxDQUFDO01BQUEsT0FBTVQsS0FBSyxDQUFDLENBQUM7SUFBQSxFQUFDLENBQUNVLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDLENBQUM7RUFDckMsQ0FBQyxDQUFDO0VBRUZILEVBQUUsQ0FBQyxtQkFBbUIsRUFBRSxZQUFNO0lBQzVCUixLQUFLLENBQUMsQ0FBQztJQUVQUyxNQUFNLENBQUNkLE1BQU0sQ0FBQ2lCLFdBQVcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUNDLGlCQUFpQixDQUFDLENBQUM7SUFDbkVKLE1BQU0sQ0FBQ2QsTUFBTSxDQUFDbUIsU0FBUyxDQUFDLFFBQVEsRUFBRTtNQUFFQyxJQUFJLEVBQUU7SUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDRixpQkFBaUIsQ0FBQyxDQUFDO0lBQzlFSixNQUFNLENBQUNkLE1BQU0sQ0FBQ21CLFNBQVMsQ0FBQyxRQUFRLEVBQUU7TUFBRUMsSUFBSSxFQUFFO0lBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQ0YsaUJBQWlCLENBQUMsQ0FBQztJQUNoRkosTUFBTSxDQUFDZCxNQUFNLENBQUNtQixTQUFTLENBQUMsUUFBUSxFQUFFO01BQUVDLElBQUksRUFBRTtJQUFZLENBQUMsQ0FBQyxDQUFDLENBQUNGLGlCQUFpQixDQUFDLENBQUM7SUFDN0VKLE1BQU0sQ0FBQ2QsTUFBTSxDQUFDbUIsU0FBUyxDQUFDLFFBQVEsRUFBRTtNQUFFQyxJQUFJLEVBQUU7SUFBYyxDQUFDLENBQUMsQ0FBQyxDQUFDRixpQkFBaUIsQ0FBQyxDQUFDO0VBQ2pGLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==