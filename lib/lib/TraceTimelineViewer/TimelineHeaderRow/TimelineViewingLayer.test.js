import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { render, screen } from '@testing-library/react';
import React from 'react';
import TimelineViewingLayer from './TimelineViewingLayer';
import { jsx as _jsx } from "react/jsx-runtime";
describe('<TimelineViewingLayer>', function () {
  var viewStart = 0.25;
  var viewEnd = 0.9;
  var props = {
    boundsInvalidator: Math.random(),
    updateNextViewRangeTime: jest.fn(),
    updateViewRangeTime: jest.fn(),
    viewRangeTime: {
      current: [viewStart, viewEnd]
    }
  };
  it('renders without exploding', function () {
    render( /*#__PURE__*/_jsx(TimelineViewingLayer, _extends({}, props)));
    expect(screen.getByTestId('TimelineViewingLayer')).toBeTruthy();
  });
  describe('render()', function () {
    it('renders nothing without a nextViewRangeTime', function () {
      render( /*#__PURE__*/_jsx(TimelineViewingLayer, _extends({}, props)));
      expect(screen.queryByTestId('TimelineViewingLayer--cursorGuide')).not.toBeInTheDocument();
    });
  });
  it('renders the cursor when it is the only non-current value set', function () {
    var cursor = viewStart + 0.5 * (viewEnd - viewStart);
    var baseViewRangeTime = _extends({}, props.viewRangeTime, {
      cursor: cursor
    });
    props = _extends({}, props, {
      viewRangeTime: baseViewRangeTime
    });
    render( /*#__PURE__*/_jsx(TimelineViewingLayer, _extends({}, props)));
    expect(screen.queryByTestId('TimelineViewingLayer--cursorGuide')).toBeInTheDocument();
  });
  it('does not render the cursor when shiftStart, shiftEnd, or reframe are present', function () {
    var cursor = viewStart + 0.5 * (viewEnd - viewStart);
    var baseViewRangeTime = _extends({}, props.viewRangeTime, {
      cursor: cursor
    });
    var viewRangeTime = _extends({}, baseViewRangeTime, {
      shiftStart: cursor,
      shiftEnd: cursor,
      reframe: {
        anchor: cursor,
        shift: cursor
      }
    });
    props = _extends({}, props, {
      viewRangeTime: viewRangeTime
    });
    render( /*#__PURE__*/_jsx(TimelineViewingLayer, _extends({}, props)));
    expect(screen.queryByTestId('TimelineViewingLayer--cursorGuide')).not.toBeInTheDocument();
    viewRangeTime = _extends({}, baseViewRangeTime, {
      shiftEnd: cursor
    });
    props = _extends({}, props, {
      viewRangeTime: viewRangeTime
    });
    render( /*#__PURE__*/_jsx(TimelineViewingLayer, _extends({}, props)));
    expect(screen.queryByTestId('TimelineViewingLayer--cursorGuide')).not.toBeInTheDocument();
    viewRangeTime = _extends({}, baseViewRangeTime, {
      reframe: {
        anchor: cursor,
        shift: cursor
      }
    });
    props = _extends({}, props, {
      viewRangeTime: viewRangeTime
    });
    render( /*#__PURE__*/_jsx(TimelineViewingLayer, _extends({}, props)));
    expect(screen.queryByTestId('TimelineViewingLayer--cursorGuide')).not.toBeInTheDocument();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,