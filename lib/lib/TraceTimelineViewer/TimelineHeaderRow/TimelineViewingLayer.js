import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8;
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { css, cx } from '@emotion/css';
import * as React from 'react';
import { stylesFactory } from '@grafana/ui';
import DraggableManager from '../../utils/DraggableManager';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
// exported for testing
export var getStyles = stylesFactory(function () {
  return {
    TimelineViewingLayer: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n      label: TimelineViewingLayer;\n      bottom: 0;\n      cursor: vertical-text;\n      left: 0;\n      position: absolute;\n      right: 0;\n      top: 0;\n    "]))),
    TimelineViewingLayerCursorGuide: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose(["\n      label: TimelineViewingLayerCursorGuide;\n      position: absolute;\n      top: 0;\n      bottom: 0;\n      left: 0;\n      width: 1px;\n      background-color: red;\n    "]))),
    TimelineViewingLayerDragged: css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose(["\n      label: TimelineViewingLayerDragged;\n      position: absolute;\n      top: 0;\n      bottom: 0;\n    "]))),
    TimelineViewingLayerDraggedDraggingLeft: css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose(["\n      label: TimelineViewingLayerDraggedDraggingLeft;\n      border-left: 1px solid;\n    "]))),
    TimelineViewingLayerDraggedDraggingRight: css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteralLoose(["\n      label: TimelineViewingLayerDraggedDraggingRight;\n      border-right: 1px solid;\n    "]))),
    TimelineViewingLayerDraggedShiftDrag: css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteralLoose(["\n      label: TimelineViewingLayerDraggedShiftDrag;\n      background-color: rgba(68, 68, 255, 0.2);\n      border-color: #44f;\n    "]))),
    TimelineViewingLayerDraggedReframeDrag: css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteralLoose(["\n      label: TimelineViewingLayerDraggedReframeDrag;\n      background-color: rgba(255, 68, 68, 0.2);\n      border-color: #f44;\n    "]))),
    TimelineViewingLayerFullOverlay: css(_templateObject8 || (_templateObject8 = _taggedTemplateLiteralLoose(["\n      label: TimelineViewingLayerFullOverlay;\n      bottom: 0;\n      cursor: col-resize;\n      left: 0;\n      position: fixed;\n      right: 0;\n      top: 0;\n      user-select: none;\n    "])))
  };
});
function isOutOfView(layout) {
  return Reflect.has(layout, 'isOutOfView');
}

/**
 * Map from a sub range to the greater view range, e.g, when the view range is
 * the middle half ([0.25, 0.75]), a value of 0.25 befomes 3/8.
 * @returns {number}
 */
function mapFromViewSubRange(viewStart, viewEnd, value) {
  return viewStart + value * (viewEnd - viewStart);
}

/**
 * Map a value from the view ([0, 1]) to a sub-range, e.g, when the view range is
 * the middle half ([0.25, 0.75]), a value of 3/8 becomes 1/4.
 * @returns {number}
 */
function mapToViewSubRange(viewStart, viewEnd, value) {
  return (value - viewStart) / (viewEnd - viewStart);
}

/**
 * Get the layout for the "next" view range time, e.g. the difference from the
 * drag start and the drag end. This is driven by `shiftStart`, `shiftEnd` or
 * `reframe` on `props.viewRangeTime`, not by the current state of the
 * component. So, it reflects in-progress dragging from the span minimap.
 */
function getNextViewLayout(start, position) {
  var _ref = start < position ? [start, position] : [position, start],
    left = _ref[0],
    right = _ref[1];
  if (left >= 1 || right <= 0) {
    return {
      isOutOfView: true
    };
  }
  if (left < 0) {
    left = 0;
  }
  if (right > 1) {
    right = 1;
  }
  return {
    isDraggingLeft: start > position,
    left: left * 100 + "%",
    width: (right - left) * 100 + "%"
  };
}

/**
 * Render the visual indication of the "next" view range.
 */
function getMarkers(viewStart, viewEnd, from, to, isShift) {
  var _cx;
  var mappedFrom = mapToViewSubRange(viewStart, viewEnd, from);
  var mappedTo = mapToViewSubRange(viewStart, viewEnd, to);
  var layout = getNextViewLayout(mappedFrom, mappedTo);
  if (isOutOfView(layout)) {
    return null;
  }
  var isDraggingLeft = layout.isDraggingLeft,
    left = layout.left,
    width = layout.width;
  var styles = getStyles();
  var cls = cx((_cx = {}, _cx[styles.TimelineViewingLayerDraggedDraggingRight] = !isDraggingLeft, _cx[styles.TimelineViewingLayerDraggedReframeDrag] = !isShift, _cx[styles.TimelineViewingLayerDraggedShiftDrag] = isShift, _cx));
  return /*#__PURE__*/_jsx("div", {
    className: cx(styles.TimelineViewingLayerDragged, styles.TimelineViewingLayerDraggedDraggingLeft, cls),
    style: {
      left: left,
      width: width
    },
    "data-testid": "Dragged"
  });
}

/**
 * `TimelineViewingLayer` is rendered on top of the TimelineHeaderRow time
 * labels; it handles showing the current view range and handles mouse UX for
 * modifying it.
 */
var TimelineViewingLayer = /*#__PURE__*/function (_React$PureComponent) {
  function TimelineViewingLayer(props) {
    var _this;
    _this = _React$PureComponent.call(this, props) || this;
    _this._setRoot = function (elm) {
      _this._root = elm;
    };
    _this._getDraggingBounds = function () {
      if (!_this._root) {
        throw new Error('invalid state');
      }
      var _this$_root$getBoundi = _this._root.getBoundingClientRect(),
        clientXLeft = _this$_root$getBoundi.left,
        width = _this$_root$getBoundi.width;
      return {
        clientXLeft: clientXLeft,
        width: width
      };
    };
    _this._handleReframeMouseMove = function (_ref2) {
      var value = _ref2.value;
      var _this$props$viewRange = _this.props.viewRangeTime.current,
        viewStart = _this$props$viewRange[0],
        viewEnd = _this$props$viewRange[1];
      var cursor = mapFromViewSubRange(viewStart, viewEnd, value);
      _this.props.updateNextViewRangeTime({
        cursor: cursor
      });
    };
    _this._handleReframeMouseLeave = function () {
      _this.props.updateNextViewRangeTime({
        cursor: undefined
      });
    };
    _this._handleReframeDragUpdate = function (_ref3) {
      var value = _ref3.value;
      var _this$props$viewRange2 = _this.props.viewRangeTime,
        current = _this$props$viewRange2.current,
        reframe = _this$props$viewRange2.reframe;
      var viewStart = current[0],
        viewEnd = current[1];
      var shift = mapFromViewSubRange(viewStart, viewEnd, value);
      var anchor = reframe ? reframe.anchor : shift;
      var update = {
        reframe: {
          anchor: anchor,
          shift: shift
        }
      };
      _this.props.updateNextViewRangeTime(update);
    };
    _this._handleReframeDragEnd = function (_ref4) {
      var manager = _ref4.manager,
        value = _ref4.value;
      var _this$props$viewRange3 = _this.props.viewRangeTime,
        current = _this$props$viewRange3.current,
        reframe = _this$props$viewRange3.reframe;
      var viewStart = current[0],
        viewEnd = current[1];
      var shift = mapFromViewSubRange(viewStart, viewEnd, value);
      var anchor = reframe ? reframe.anchor : shift;
      var _ref5 = shift < anchor ? [shift, anchor] : [anchor, shift],
        start = _ref5[0],
        end = _ref5[1];
      manager.resetBounds();
      _this.props.updateViewRangeTime(start, end, 'timeline-header');
    };
    _this._draggerReframe = new DraggableManager({
      getBounds: _this._getDraggingBounds,
      onDragEnd: _this._handleReframeDragEnd,
      onDragMove: _this._handleReframeDragUpdate,
      onDragStart: _this._handleReframeDragUpdate,
      onMouseLeave: _this._handleReframeMouseLeave,
      onMouseMove: _this._handleReframeMouseMove
    });
    _this._root = undefined;
    return _this;
  }
  _inheritsLoose(TimelineViewingLayer, _React$PureComponent);
  var _proto = TimelineViewingLayer.prototype;
  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
    var boundsInvalidator = this.props.boundsInvalidator;
    if (boundsInvalidator !== nextProps.boundsInvalidator) {
      this._draggerReframe.resetBounds();
    }
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this._draggerReframe.dispose();
  };
  _proto.render = function render() {
    var viewRangeTime = this.props.viewRangeTime;
    var current = viewRangeTime.current,
      cursor = viewRangeTime.cursor,
      reframe = viewRangeTime.reframe,
      shiftEnd = viewRangeTime.shiftEnd,
      shiftStart = viewRangeTime.shiftStart;
    var viewStart = current[0],
      viewEnd = current[1];
    var haveNextTimeRange = reframe != null || shiftEnd != null || shiftStart != null;
    var cusrorPosition;
    if (!haveNextTimeRange && cursor != null && cursor >= viewStart && cursor <= viewEnd) {
      cusrorPosition = mapToViewSubRange(viewStart, viewEnd, cursor) * 100 + "%";
    }
    var styles = getStyles();
    return /*#__PURE__*/_jsxs("div", {
      "aria-hidden": true,
      className: styles.TimelineViewingLayer,
      ref: this._setRoot,
      onMouseDown: this._draggerReframe.handleMouseDown,
      onMouseLeave: this._draggerReframe.handleMouseLeave,
      onMouseMove: this._draggerReframe.handleMouseMove,
      "data-testid": "TimelineViewingLayer",
      children: [cusrorPosition != null && /*#__PURE__*/_jsx("div", {
        className: styles.TimelineViewingLayerCursorGuide,
        style: {
          left: cusrorPosition
        },
        "data-testid": "TimelineViewingLayer--cursorGuide"
      }), reframe != null && getMarkers(viewStart, viewEnd, reframe.anchor, reframe.shift, false), shiftEnd != null && getMarkers(viewStart, viewEnd, viewEnd, shiftEnd, true), shiftStart != null && getMarkers(viewStart, viewEnd, viewStart, shiftStart, true)]
    });
  };
  return TimelineViewingLayer;
}(React.PureComponent);
export { TimelineViewingLayer as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,