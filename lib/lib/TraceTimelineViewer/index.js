import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _inheritsLoose from "@babel/runtime/helpers/inheritsLoose";
import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
var _excluded = ["setSpanNameColumnWidth", "updateNextViewRangeTime", "updateViewRangeTime", "viewRange", "traceTimeline", "theme", "topOfViewRef", "focusedSpanIdForSearch"];
var _templateObject;
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { css } from '@emotion/css';
import React from 'react';
import { config, reportInteraction } from '@grafana/runtime';
import { stylesFactory, withTheme2 } from '@grafana/ui';
import { autoColor } from '../Theme';
import { merge as mergeShortcuts } from '../keyboard-shortcuts';
import TimelineHeaderRow from './TimelineHeaderRow';
import VirtualizedTraceView from './VirtualizedTraceView';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
var getStyles = stylesFactory(function (theme) {
  return {
    TraceTimelineViewer: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n      label: TraceTimelineViewer;\n      border-bottom: 1px solid ", ";\n\n      & .json-markup {\n        line-height: 17px;\n        font-size: 13px;\n        font-family: monospace;\n        white-space: pre-wrap;\n      }\n\n      & .json-markup-key {\n        font-weight: bold;\n      }\n\n      & .json-markup-bool {\n        color: ", ";\n      }\n\n      & .json-markup-string {\n        color: ", ";\n      }\n\n      & .json-markup-null {\n        color: ", ";\n      }\n\n      & .json-markup-number {\n        color: ", ";\n      }\n    "])), autoColor(theme, '#bbb'), autoColor(theme, 'firebrick'), autoColor(theme, 'teal'), autoColor(theme, 'teal'), autoColor(theme, 'blue', 'black'))
  };
});
var NUM_TICKS = 5;

/**
 * `TraceTimelineViewer` now renders the header row because it is sensitive to
 * `props.viewRange.time.cursor`. If `VirtualizedTraceView` renders it, it will
 * re-render the ListView every time the cursor is moved on the trace minimap
 * or `TimelineHeaderRow`.
 */
export var UnthemedTraceTimelineViewer = /*#__PURE__*/function (_React$PureComponent) {
  function UnthemedTraceTimelineViewer(props) {
    var _this;
    _this = _React$PureComponent.call(this, props) || this;
    _this.collapseAll = function () {
      _this.props.collapseAll(_this.props.trace.spans);
      reportInteraction('grafana_traces_traceID_expand_collapse_clicked', {
        datasourceType: _this.props.datasourceType,
        grafana_version: config.buildInfo.version,
        type: 'collapseAll'
      });
    };
    _this.collapseOne = function () {
      _this.props.collapseOne(_this.props.trace.spans);
      reportInteraction('grafana_traces_traceID_expand_collapse_clicked', {
        datasourceType: _this.props.datasourceType,
        grafana_version: config.buildInfo.version,
        type: 'collapseOne'
      });
    };
    _this.expandAll = function () {
      _this.props.expandAll();
      reportInteraction('grafana_traces_traceID_expand_collapse_clicked', {
        datasourceType: _this.props.datasourceType,
        grafana_version: config.buildInfo.version,
        type: 'expandAll'
      });
    };
    _this.expandOne = function () {
      _this.props.expandOne(_this.props.trace.spans);
      reportInteraction('grafana_traces_traceID_expand_collapse_clicked', {
        datasourceType: _this.props.datasourceType,
        grafana_version: config.buildInfo.version,
        type: 'expandOne'
      });
    };
    _this.state = {
      height: 0
    };
    return _this;
  }
  _inheritsLoose(UnthemedTraceTimelineViewer, _React$PureComponent);
  var _proto = UnthemedTraceTimelineViewer.prototype;
  _proto.componentDidMount = function componentDidMount() {
    mergeShortcuts({
      collapseAll: this.collapseAll,
      expandAll: this.expandAll,
      collapseOne: this.collapseOne,
      expandOne: this.expandOne
    });
  };
  _proto.render = function render() {
    var _this2 = this;
    var _this$props = this.props,
      setSpanNameColumnWidth = _this$props.setSpanNameColumnWidth,
      updateNextViewRangeTime = _this$props.updateNextViewRangeTime,
      updateViewRangeTime = _this$props.updateViewRangeTime,
      viewRange = _this$props.viewRange,
      traceTimeline = _this$props.traceTimeline,
      theme = _this$props.theme,
      topOfViewRef = _this$props.topOfViewRef,
      focusedSpanIdForSearch = _this$props.focusedSpanIdForSearch,
      rest = _objectWithoutPropertiesLoose(_this$props, _excluded);
    var trace = rest.trace;
    var styles = getStyles(theme);
    return /*#__PURE__*/_jsxs("div", {
      className: styles.TraceTimelineViewer,
      ref: function ref(_ref) {
        return _ref && _this2.setState({
          height: _ref.getBoundingClientRect().height
        });
      },
      children: [/*#__PURE__*/_jsx(TimelineHeaderRow, {
        duration: trace.duration,
        nameColumnWidth: traceTimeline.spanNameColumnWidth,
        numTicks: NUM_TICKS,
        onCollapseAll: this.collapseAll,
        onCollapseOne: this.collapseOne,
        onColummWidthChange: setSpanNameColumnWidth,
        onExpandAll: this.expandAll,
        onExpandOne: this.expandOne,
        viewRangeTime: viewRange.time,
        updateNextViewRangeTime: updateNextViewRangeTime,
        updateViewRangeTime: updateViewRangeTime,
        columnResizeHandleHeight: this.state.height
      }), /*#__PURE__*/_jsx(VirtualizedTraceView, _extends({}, rest, traceTimeline, {
        setSpanNameColumnWidth: setSpanNameColumnWidth,
        currentViewRangeTime: viewRange.time.current,
        topOfViewRef: topOfViewRef,
        focusedSpanIdForSearch: focusedSpanIdForSearch,
        datasourceType: this.props.datasourceType
      }))]
    });
  };
  return UnthemedTraceTimelineViewer;
}(React.PureComponent);
export default withTheme2(UnthemedTraceTimelineViewer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,