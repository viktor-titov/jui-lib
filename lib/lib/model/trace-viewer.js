// Copyright (c) 2020 The Jaeger Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { memoize } from 'lodash';
export function _getTraceNameImpl(spans) {
  // Use a span with no references to another span in given array
  // prefering the span with the fewest references
  // using start time as a tie breaker
  var candidateSpan;
  var allIDs = new Set(spans.map(function (_ref) {
    var spanID = _ref.spanID;
    return spanID;
  }));
  var _loop = function _loop(i) {
      var hasInternalRef = spans[i].references && spans[i].references.some(function (_ref2) {
        var traceID = _ref2.traceID,
          spanID = _ref2.spanID;
        return traceID === spans[i].traceID && allIDs.has(spanID);
      });
      if (hasInternalRef) {
        return 0; // continue
      }
      if (!candidateSpan) {
        candidateSpan = spans[i];
        return 0; // continue
      }
      var thisRefLength = spans[i].references && spans[i].references.length || 0;
      var candidateRefLength = candidateSpan.references && candidateSpan.references.length || 0;
      if (thisRefLength < candidateRefLength || thisRefLength === candidateRefLength && spans[i].startTime < candidateSpan.startTime) {
        candidateSpan = spans[i];
      }
    },
    _ret;
  for (var i = 0; i < spans.length; i++) {
    _ret = _loop(i);
    if (_ret === 0) continue;
  }
  return candidateSpan ? candidateSpan.process.serviceName + ": " + candidateSpan.operationName : '';
}
export var getTraceName = memoize(_getTraceNameImpl, function (spans) {
  if (!spans.length) {
    return 0;
  }
  return spans[0].traceID;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZW1vaXplIiwiX2dldFRyYWNlTmFtZUltcGwiLCJzcGFucyIsImNhbmRpZGF0ZVNwYW4iLCJhbGxJRHMiLCJTZXQiLCJtYXAiLCJfcmVmIiwic3BhbklEIiwiX2xvb3AiLCJpIiwiaGFzSW50ZXJuYWxSZWYiLCJyZWZlcmVuY2VzIiwic29tZSIsIl9yZWYyIiwidHJhY2VJRCIsImhhcyIsInRoaXNSZWZMZW5ndGgiLCJsZW5ndGgiLCJjYW5kaWRhdGVSZWZMZW5ndGgiLCJzdGFydFRpbWUiLCJfcmV0IiwicHJvY2VzcyIsInNlcnZpY2VOYW1lIiwib3BlcmF0aW9uTmFtZSIsImdldFRyYWNlTmFtZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvbW9kZWwvdHJhY2Utdmlld2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMCBUaGUgSmFlZ2VyIEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgbWVtb2l6ZSB9IGZyb20gJ2xvZGFzaCc7XG5cbmltcG9ydCB7IFRyYWNlU3BhbiB9IGZyb20gJy4uL3R5cGVzL3RyYWNlJztcblxuZXhwb3J0IGZ1bmN0aW9uIF9nZXRUcmFjZU5hbWVJbXBsKHNwYW5zOiBUcmFjZVNwYW5bXSkge1xuICAvLyBVc2UgYSBzcGFuIHdpdGggbm8gcmVmZXJlbmNlcyB0byBhbm90aGVyIHNwYW4gaW4gZ2l2ZW4gYXJyYXlcbiAgLy8gcHJlZmVyaW5nIHRoZSBzcGFuIHdpdGggdGhlIGZld2VzdCByZWZlcmVuY2VzXG4gIC8vIHVzaW5nIHN0YXJ0IHRpbWUgYXMgYSB0aWUgYnJlYWtlclxuICBsZXQgY2FuZGlkYXRlU3BhbjogVHJhY2VTcGFuIHwgdW5kZWZpbmVkO1xuICBjb25zdCBhbGxJRHM6IFNldDxzdHJpbmc+ID0gbmV3IFNldChzcGFucy5tYXAoKHsgc3BhbklEIH0pID0+IHNwYW5JRCkpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3BhbnMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBoYXNJbnRlcm5hbFJlZiA9XG4gICAgICBzcGFuc1tpXS5yZWZlcmVuY2VzICYmXG4gICAgICBzcGFuc1tpXS5yZWZlcmVuY2VzLnNvbWUoKHsgdHJhY2VJRCwgc3BhbklEIH0pID0+IHRyYWNlSUQgPT09IHNwYW5zW2ldLnRyYWNlSUQgJiYgYWxsSURzLmhhcyhzcGFuSUQpKTtcbiAgICBpZiAoaGFzSW50ZXJuYWxSZWYpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICghY2FuZGlkYXRlU3Bhbikge1xuICAgICAgY2FuZGlkYXRlU3BhbiA9IHNwYW5zW2ldO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgY29uc3QgdGhpc1JlZkxlbmd0aCA9IChzcGFuc1tpXS5yZWZlcmVuY2VzICYmIHNwYW5zW2ldLnJlZmVyZW5jZXMubGVuZ3RoKSB8fCAwO1xuICAgIGNvbnN0IGNhbmRpZGF0ZVJlZkxlbmd0aCA9IChjYW5kaWRhdGVTcGFuLnJlZmVyZW5jZXMgJiYgY2FuZGlkYXRlU3Bhbi5yZWZlcmVuY2VzLmxlbmd0aCkgfHwgMDtcblxuICAgIGlmIChcbiAgICAgIHRoaXNSZWZMZW5ndGggPCBjYW5kaWRhdGVSZWZMZW5ndGggfHxcbiAgICAgICh0aGlzUmVmTGVuZ3RoID09PSBjYW5kaWRhdGVSZWZMZW5ndGggJiYgc3BhbnNbaV0uc3RhcnRUaW1lIDwgY2FuZGlkYXRlU3Bhbi5zdGFydFRpbWUpXG4gICAgKSB7XG4gICAgICBjYW5kaWRhdGVTcGFuID0gc3BhbnNbaV07XG4gICAgfVxuICB9XG4gIHJldHVybiBjYW5kaWRhdGVTcGFuID8gYCR7Y2FuZGlkYXRlU3Bhbi5wcm9jZXNzLnNlcnZpY2VOYW1lfTogJHtjYW5kaWRhdGVTcGFuLm9wZXJhdGlvbk5hbWV9YCA6ICcnO1xufVxuXG5leHBvcnQgY29uc3QgZ2V0VHJhY2VOYW1lID0gbWVtb2l6ZShfZ2V0VHJhY2VOYW1lSW1wbCwgKHNwYW5zOiBUcmFjZVNwYW5bXSkgPT4ge1xuICBpZiAoIXNwYW5zLmxlbmd0aCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIHJldHVybiBzcGFuc1swXS50cmFjZUlEO1xufSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLE9BQU8sUUFBUSxRQUFRO0FBSWhDLE9BQU8sU0FBU0MsaUJBQWlCQSxDQUFDQyxLQUFrQixFQUFFO0VBQ3BEO0VBQ0E7RUFDQTtFQUNBLElBQUlDLGFBQW9DO0VBQ3hDLElBQU1DLE1BQW1CLEdBQUcsSUFBSUMsR0FBRyxDQUFDSCxLQUFLLENBQUNJLEdBQUcsQ0FBQyxVQUFBQyxJQUFBO0lBQUEsSUFBR0MsTUFBTSxHQUFBRCxJQUFBLENBQU5DLE1BQU07SUFBQSxPQUFPQSxNQUFNO0VBQUEsRUFBQyxDQUFDO0VBQUMsSUFBQUMsS0FBQSxZQUFBQSxNQUFBQyxDQUFBLEVBRWhDO01BQ3JDLElBQU1DLGNBQWMsR0FDbEJULEtBQUssQ0FBQ1EsQ0FBQyxDQUFDLENBQUNFLFVBQVUsSUFDbkJWLEtBQUssQ0FBQ1EsQ0FBQyxDQUFDLENBQUNFLFVBQVUsQ0FBQ0MsSUFBSSxDQUFDLFVBQUFDLEtBQUE7UUFBQSxJQUFHQyxPQUFPLEdBQUFELEtBQUEsQ0FBUEMsT0FBTztVQUFFUCxNQUFNLEdBQUFNLEtBQUEsQ0FBTk4sTUFBTTtRQUFBLE9BQU9PLE9BQU8sS0FBS2IsS0FBSyxDQUFDUSxDQUFDLENBQUMsQ0FBQ0ssT0FBTyxJQUFJWCxNQUFNLENBQUNZLEdBQUcsQ0FBQ1IsTUFBTSxDQUFDO01BQUEsRUFBQztNQUN2RyxJQUFJRyxjQUFjLEVBQUU7UUFBQTtNQUVwQjtNQUVBLElBQUksQ0FBQ1IsYUFBYSxFQUFFO1FBQ2xCQSxhQUFhLEdBQUdELEtBQUssQ0FBQ1EsQ0FBQyxDQUFDO1FBQUM7TUFFM0I7TUFFQSxJQUFNTyxhQUFhLEdBQUlmLEtBQUssQ0FBQ1EsQ0FBQyxDQUFDLENBQUNFLFVBQVUsSUFBSVYsS0FBSyxDQUFDUSxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxDQUFDTSxNQUFNLElBQUssQ0FBQztNQUM5RSxJQUFNQyxrQkFBa0IsR0FBSWhCLGFBQWEsQ0FBQ1MsVUFBVSxJQUFJVCxhQUFhLENBQUNTLFVBQVUsQ0FBQ00sTUFBTSxJQUFLLENBQUM7TUFFN0YsSUFDRUQsYUFBYSxHQUFHRSxrQkFBa0IsSUFDakNGLGFBQWEsS0FBS0Usa0JBQWtCLElBQUlqQixLQUFLLENBQUNRLENBQUMsQ0FBQyxDQUFDVSxTQUFTLEdBQUdqQixhQUFhLENBQUNpQixTQUFVLEVBQ3RGO1FBQ0FqQixhQUFhLEdBQUdELEtBQUssQ0FBQ1EsQ0FBQyxDQUFDO01BQzFCO0lBQ0YsQ0FBQztJQUFBVyxJQUFBO0VBdEJELEtBQUssSUFBSVgsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHUixLQUFLLENBQUNnQixNQUFNLEVBQUVSLENBQUMsRUFBRTtJQUFBVyxJQUFBLEdBQUFaLEtBQUEsQ0FBQUMsQ0FBQTtJQUFBLElBQUFXLElBQUEsUUFLakM7RUFBUztFQWtCYixPQUFPbEIsYUFBYSxHQUFNQSxhQUFhLENBQUNtQixPQUFPLENBQUNDLFdBQVcsVUFBS3BCLGFBQWEsQ0FBQ3FCLGFBQWEsR0FBSyxFQUFFO0FBQ3BHO0FBRUEsT0FBTyxJQUFNQyxZQUFZLEdBQUd6QixPQUFPLENBQUNDLGlCQUFpQixFQUFFLFVBQUNDLEtBQWtCLEVBQUs7RUFDN0UsSUFBSSxDQUFDQSxLQUFLLENBQUNnQixNQUFNLEVBQUU7SUFDakIsT0FBTyxDQUFDO0VBQ1Y7RUFDQSxPQUFPaEIsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDYSxPQUFPO0FBQ3pCLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==