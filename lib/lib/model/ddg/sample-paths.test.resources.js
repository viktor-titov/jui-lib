// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

export var simplePayloadElemMaker = function simplePayloadElemMaker(label) {
  return {
    operation: label + "Operation",
    service: label + "Service"
  };
};
export var focalPayloadElem = simplePayloadElemMaker('focal');
var sameFocalServicePayloadElem = {
  operation: 'someOtherOperation',
  service: focalPayloadElem.service
};
var pathLengthener = function pathLengthener(path) {
  var prequels = [];
  var sequels = [];
  path.forEach(function (_ref) {
    var operation = _ref.operation,
      service = _ref.service;
    if (operation !== focalPayloadElem.operation && service !== focalPayloadElem.service) {
      prequels.push({
        operation: "prequel-" + operation,
        service: service
      });
      sequels.push({
        operation: operation,
        service: "sequel-" + service
      });
    }
  });
  return [].concat(prequels, path, sequels);
};
export var firstPayloadElem = simplePayloadElemMaker('first');
export var beforePayloadElem = simplePayloadElemMaker('before');
export var midPayloadElem = simplePayloadElemMaker('mid');
export var afterPayloadElem = simplePayloadElemMaker('after');
export var lastPayloadElem = simplePayloadElemMaker('last');
export var shortPath = [beforePayloadElem, focalPayloadElem];
export var simplePath = [firstPayloadElem, beforePayloadElem, focalPayloadElem, afterPayloadElem, lastPayloadElem];
export var longSimplePath = pathLengthener(simplePath);
export var noFocalPath = [firstPayloadElem, beforePayloadElem, midPayloadElem, afterPayloadElem, lastPayloadElem];
export var doubleFocalPath = [firstPayloadElem, beforePayloadElem, focalPayloadElem, midPayloadElem, focalPayloadElem, afterPayloadElem, lastPayloadElem];
export var almostDoubleFocalPath = [firstPayloadElem, beforePayloadElem, sameFocalServicePayloadElem, midPayloadElem, focalPayloadElem, afterPayloadElem, lastPayloadElem];
var divergentPayloadElem = simplePayloadElemMaker('divergentPayloadElem');
export var convergentPaths = [[firstPayloadElem, focalPayloadElem, divergentPayloadElem, afterPayloadElem, lastPayloadElem], [firstPayloadElem, focalPayloadElem, midPayloadElem, afterPayloadElem, lastPayloadElem]];
var generationPayloadElems = {
  afterFocalMid: simplePayloadElemMaker('afterFocalMid'),
  afterTarget0: simplePayloadElemMaker('afterTarget0'),
  afterTarget1: simplePayloadElemMaker('afterTarget1'),
  beforeFocalMid: simplePayloadElemMaker('beforeFocalMid'),
  beforeTarget0: simplePayloadElemMaker('beforeTarget0'),
  beforeTarget1: simplePayloadElemMaker('beforeTarget1'),
  target: simplePayloadElemMaker('target')
};
export var generationPaths = [[generationPayloadElems.beforeTarget0, generationPayloadElems.target, generationPayloadElems.beforeFocalMid, focalPayloadElem], [generationPayloadElems.beforeTarget1, generationPayloadElems.target, generationPayloadElems.beforeFocalMid, focalPayloadElem], [focalPayloadElem, generationPayloadElems.afterFocalMid, generationPayloadElems.target], [focalPayloadElem, generationPayloadElems.afterFocalMid, generationPayloadElems.target, generationPayloadElems.afterTarget0], [focalPayloadElem, generationPayloadElems.afterFocalMid, generationPayloadElems.target, generationPayloadElems.afterTarget1], [generationPayloadElems.target, generationPayloadElems.beforeFocalMid, focalPayloadElem]];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,