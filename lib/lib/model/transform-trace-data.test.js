// Copyright (c) 2019 The Jaeger Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import transformTraceData, { orderTags, deduplicateTags } from './transform-trace-data';
describe('orderTags()', function () {
  it('correctly orders tags', function () {
    var orderedTags = orderTags([{
      key: 'b.ip',
      value: '8.8.4.4'
    }, {
      key: 'http.Status_code',
      value: '200'
    }, {
      key: 'z.ip',
      value: '8.8.8.16'
    }, {
      key: 'a.ip',
      value: '8.8.8.8'
    }, {
      key: 'http.message',
      value: 'ok'
    }], ['z.', 'a.', 'HTTP.']);
    expect(orderedTags).toEqual([{
      key: 'z.ip',
      value: '8.8.8.16'
    }, {
      key: 'a.ip',
      value: '8.8.8.8'
    }, {
      key: 'http.message',
      value: 'ok'
    }, {
      key: 'http.Status_code',
      value: '200'
    }, {
      key: 'b.ip',
      value: '8.8.4.4'
    }]);
  });
});
describe('deduplicateTags()', function () {
  it('deduplicates tags', function () {
    var tagsInfo = deduplicateTags([{
      key: 'b.ip',
      value: '8.8.4.4'
    }, {
      key: 'b.ip',
      value: '8.8.8.8'
    }, {
      key: 'b.ip',
      value: '8.8.4.4'
    }, {
      key: 'a.ip',
      value: '8.8.8.8'
    }]);
    expect(tagsInfo.tags).toEqual([{
      key: 'b.ip',
      value: '8.8.4.4'
    }, {
      key: 'b.ip',
      value: '8.8.8.8'
    }, {
      key: 'a.ip',
      value: '8.8.8.8'
    }]);
    expect(tagsInfo.warnings).toEqual(['Duplicate tag "b.ip:8.8.4.4"']);
  });
});
describe('transformTraceData()', function () {
  var startTime = 1586160015434000;
  var duration = 34000;
  var traceID = 'f77950feed55c1ce91dd8e87896623a6';
  var rootSpanID = 'd4dcb46e95b781f5';
  var rootOperationName = 'rootOperation';
  var serviceName = 'serviceName';
  var spans = [{
    traceID: traceID,
    spanID: '41f71485ed2593e4',
    operationName: 'someOperationName',
    references: [{
      refType: 'CHILD_OF',
      traceID: traceID,
      spanID: rootSpanID
    }],
    startTime: startTime,
    duration: duration,
    tags: [],
    processID: 'p1'
  }, {
    traceID: traceID,
    spanID: '4f623fd33c213cba',
    operationName: 'anotherOperationName',
    references: [{
      refType: 'CHILD_OF',
      traceID: traceID,
      spanID: rootSpanID
    }],
    startTime: startTime + 100,
    duration: duration,
    tags: [],
    processID: 'p1'
  }];
  var rootSpanWithMissingRef = {
    traceID: traceID,
    spanID: rootSpanID,
    operationName: rootOperationName,
    references: [{
      refType: 'CHILD_OF',
      traceID: traceID,
      spanID: 'missingSpanId'
    }],
    startTime: startTime + 50,
    duration: duration,
    tags: [],
    processID: 'p1'
  };
  var rootSpanWithoutRefs = {
    traceID: traceID,
    spanID: rootSpanID,
    operationName: rootOperationName,
    startTime: startTime + 50,
    duration: duration,
    tags: [],
    processID: 'p1'
  };
  var processes = {
    p1: {
      serviceName: serviceName,
      tags: []
    }
  };
  it('should return null for trace without traceID', function () {
    var traceData = {
      traceID: undefined,
      processes: processes,
      spans: spans
    };
    expect(transformTraceData(traceData)).toEqual(null);
  });
  it('should return trace data with correct traceName based on root span with missing ref', function () {
    var traceData = {
      traceID: traceID,
      processes: processes,
      spans: [].concat(spans, [rootSpanWithMissingRef])
    };
    expect(transformTraceData(traceData).traceName).toEqual(serviceName + ": " + rootOperationName);
  });
  it('should return trace data with correct traceName based on root span without any refs', function () {
    var traceData = {
      traceID: traceID,
      processes: processes,
      spans: [].concat(spans, [rootSpanWithoutRefs])
    };
    expect(transformTraceData(traceData).traceName).toEqual(serviceName + ": " + rootOperationName);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0cmFuc2Zvcm1UcmFjZURhdGEiLCJvcmRlclRhZ3MiLCJkZWR1cGxpY2F0ZVRhZ3MiLCJkZXNjcmliZSIsIml0Iiwib3JkZXJlZFRhZ3MiLCJrZXkiLCJ2YWx1ZSIsImV4cGVjdCIsInRvRXF1YWwiLCJ0YWdzSW5mbyIsInRhZ3MiLCJ3YXJuaW5ncyIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwidHJhY2VJRCIsInJvb3RTcGFuSUQiLCJyb290T3BlcmF0aW9uTmFtZSIsInNlcnZpY2VOYW1lIiwic3BhbnMiLCJzcGFuSUQiLCJvcGVyYXRpb25OYW1lIiwicmVmZXJlbmNlcyIsInJlZlR5cGUiLCJwcm9jZXNzSUQiLCJyb290U3BhbldpdGhNaXNzaW5nUmVmIiwicm9vdFNwYW5XaXRob3V0UmVmcyIsInByb2Nlc3NlcyIsInAxIiwidHJhY2VEYXRhIiwidW5kZWZpbmVkIiwiY29uY2F0IiwidHJhY2VOYW1lIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9tb2RlbC90cmFuc2Zvcm0tdHJhY2UtZGF0YS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxOSBUaGUgSmFlZ2VyIEF1dGhvcnMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IFRyYWNlUmVzcG9uc2UgfSBmcm9tICcuLi90eXBlcy90cmFjZSc7XG5cbmltcG9ydCB0cmFuc2Zvcm1UcmFjZURhdGEsIHsgb3JkZXJUYWdzLCBkZWR1cGxpY2F0ZVRhZ3MgfSBmcm9tICcuL3RyYW5zZm9ybS10cmFjZS1kYXRhJztcblxuZGVzY3JpYmUoJ29yZGVyVGFncygpJywgKCkgPT4ge1xuICBpdCgnY29ycmVjdGx5IG9yZGVycyB0YWdzJywgKCkgPT4ge1xuICAgIGNvbnN0IG9yZGVyZWRUYWdzID0gb3JkZXJUYWdzKFxuICAgICAgW1xuICAgICAgICB7IGtleTogJ2IuaXAnLCB2YWx1ZTogJzguOC40LjQnIH0sXG4gICAgICAgIHsga2V5OiAnaHR0cC5TdGF0dXNfY29kZScsIHZhbHVlOiAnMjAwJyB9LFxuICAgICAgICB7IGtleTogJ3ouaXAnLCB2YWx1ZTogJzguOC44LjE2JyB9LFxuICAgICAgICB7IGtleTogJ2EuaXAnLCB2YWx1ZTogJzguOC44LjgnIH0sXG4gICAgICAgIHsga2V5OiAnaHR0cC5tZXNzYWdlJywgdmFsdWU6ICdvaycgfSxcbiAgICAgIF0sXG4gICAgICBbJ3ouJywgJ2EuJywgJ0hUVFAuJ11cbiAgICApO1xuICAgIGV4cGVjdChvcmRlcmVkVGFncykudG9FcXVhbChbXG4gICAgICB7IGtleTogJ3ouaXAnLCB2YWx1ZTogJzguOC44LjE2JyB9LFxuICAgICAgeyBrZXk6ICdhLmlwJywgdmFsdWU6ICc4LjguOC44JyB9LFxuICAgICAgeyBrZXk6ICdodHRwLm1lc3NhZ2UnLCB2YWx1ZTogJ29rJyB9LFxuICAgICAgeyBrZXk6ICdodHRwLlN0YXR1c19jb2RlJywgdmFsdWU6ICcyMDAnIH0sXG4gICAgICB7IGtleTogJ2IuaXAnLCB2YWx1ZTogJzguOC40LjQnIH0sXG4gICAgXSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdkZWR1cGxpY2F0ZVRhZ3MoKScsICgpID0+IHtcbiAgaXQoJ2RlZHVwbGljYXRlcyB0YWdzJywgKCkgPT4ge1xuICAgIGNvbnN0IHRhZ3NJbmZvID0gZGVkdXBsaWNhdGVUYWdzKFtcbiAgICAgIHsga2V5OiAnYi5pcCcsIHZhbHVlOiAnOC44LjQuNCcgfSxcbiAgICAgIHsga2V5OiAnYi5pcCcsIHZhbHVlOiAnOC44LjguOCcgfSxcbiAgICAgIHsga2V5OiAnYi5pcCcsIHZhbHVlOiAnOC44LjQuNCcgfSxcbiAgICAgIHsga2V5OiAnYS5pcCcsIHZhbHVlOiAnOC44LjguOCcgfSxcbiAgICBdKTtcblxuICAgIGV4cGVjdCh0YWdzSW5mby50YWdzKS50b0VxdWFsKFtcbiAgICAgIHsga2V5OiAnYi5pcCcsIHZhbHVlOiAnOC44LjQuNCcgfSxcbiAgICAgIHsga2V5OiAnYi5pcCcsIHZhbHVlOiAnOC44LjguOCcgfSxcbiAgICAgIHsga2V5OiAnYS5pcCcsIHZhbHVlOiAnOC44LjguOCcgfSxcbiAgICBdKTtcbiAgICBleHBlY3QodGFnc0luZm8ud2FybmluZ3MpLnRvRXF1YWwoWydEdXBsaWNhdGUgdGFnIFwiYi5pcDo4LjguNC40XCInXSk7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCd0cmFuc2Zvcm1UcmFjZURhdGEoKScsICgpID0+IHtcbiAgY29uc3Qgc3RhcnRUaW1lID0gMTU4NjE2MDAxNTQzNDAwMDtcbiAgY29uc3QgZHVyYXRpb24gPSAzNDAwMDtcbiAgY29uc3QgdHJhY2VJRCA9ICdmNzc5NTBmZWVkNTVjMWNlOTFkZDhlODc4OTY2MjNhNic7XG4gIGNvbnN0IHJvb3RTcGFuSUQgPSAnZDRkY2I0NmU5NWI3ODFmNSc7XG4gIGNvbnN0IHJvb3RPcGVyYXRpb25OYW1lID0gJ3Jvb3RPcGVyYXRpb24nO1xuICBjb25zdCBzZXJ2aWNlTmFtZSA9ICdzZXJ2aWNlTmFtZSc7XG5cbiAgY29uc3Qgc3BhbnMgPSBbXG4gICAge1xuICAgICAgdHJhY2VJRCxcbiAgICAgIHNwYW5JRDogJzQxZjcxNDg1ZWQyNTkzZTQnLFxuICAgICAgb3BlcmF0aW9uTmFtZTogJ3NvbWVPcGVyYXRpb25OYW1lJyxcbiAgICAgIHJlZmVyZW5jZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHJlZlR5cGU6ICdDSElMRF9PRicsXG4gICAgICAgICAgdHJhY2VJRCxcbiAgICAgICAgICBzcGFuSUQ6IHJvb3RTcGFuSUQsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgc3RhcnRUaW1lLFxuICAgICAgZHVyYXRpb24sXG4gICAgICB0YWdzOiBbXSxcbiAgICAgIHByb2Nlc3NJRDogJ3AxJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIHRyYWNlSUQsXG4gICAgICBzcGFuSUQ6ICc0ZjYyM2ZkMzNjMjEzY2JhJyxcbiAgICAgIG9wZXJhdGlvbk5hbWU6ICdhbm90aGVyT3BlcmF0aW9uTmFtZScsXG4gICAgICByZWZlcmVuY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICByZWZUeXBlOiAnQ0hJTERfT0YnLFxuICAgICAgICAgIHRyYWNlSUQsXG4gICAgICAgICAgc3BhbklEOiByb290U3BhbklELFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIHN0YXJ0VGltZTogc3RhcnRUaW1lICsgMTAwLFxuICAgICAgZHVyYXRpb24sXG4gICAgICB0YWdzOiBbXSxcbiAgICAgIHByb2Nlc3NJRDogJ3AxJyxcbiAgICB9LFxuICBdO1xuXG4gIGNvbnN0IHJvb3RTcGFuV2l0aE1pc3NpbmdSZWYgPSB7XG4gICAgdHJhY2VJRCxcbiAgICBzcGFuSUQ6IHJvb3RTcGFuSUQsXG4gICAgb3BlcmF0aW9uTmFtZTogcm9vdE9wZXJhdGlvbk5hbWUsXG4gICAgcmVmZXJlbmNlczogW1xuICAgICAge1xuICAgICAgICByZWZUeXBlOiAnQ0hJTERfT0YnLFxuICAgICAgICB0cmFjZUlELFxuICAgICAgICBzcGFuSUQ6ICdtaXNzaW5nU3BhbklkJyxcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzdGFydFRpbWU6IHN0YXJ0VGltZSArIDUwLFxuICAgIGR1cmF0aW9uLFxuICAgIHRhZ3M6IFtdLFxuICAgIHByb2Nlc3NJRDogJ3AxJyxcbiAgfTtcblxuICBjb25zdCByb290U3BhbldpdGhvdXRSZWZzID0ge1xuICAgIHRyYWNlSUQsXG4gICAgc3BhbklEOiByb290U3BhbklELFxuICAgIG9wZXJhdGlvbk5hbWU6IHJvb3RPcGVyYXRpb25OYW1lLFxuICAgIHN0YXJ0VGltZTogc3RhcnRUaW1lICsgNTAsXG4gICAgZHVyYXRpb24sXG4gICAgdGFnczogW10sXG4gICAgcHJvY2Vzc0lEOiAncDEnLFxuICB9O1xuXG4gIGNvbnN0IHByb2Nlc3NlcyA9IHtcbiAgICBwMToge1xuICAgICAgc2VydmljZU5hbWUsXG4gICAgICB0YWdzOiBbXSxcbiAgICB9LFxuICB9O1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIG51bGwgZm9yIHRyYWNlIHdpdGhvdXQgdHJhY2VJRCcsICgpID0+IHtcbiAgICBjb25zdCB0cmFjZURhdGEgPSB7XG4gICAgICB0cmFjZUlEOiB1bmRlZmluZWQsXG4gICAgICBwcm9jZXNzZXMsXG4gICAgICBzcGFucyxcbiAgICB9IGFzIHVua25vd24gYXMgVHJhY2VSZXNwb25zZTtcblxuICAgIGV4cGVjdCh0cmFuc2Zvcm1UcmFjZURhdGEodHJhY2VEYXRhKSkudG9FcXVhbChudWxsKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gdHJhY2UgZGF0YSB3aXRoIGNvcnJlY3QgdHJhY2VOYW1lIGJhc2VkIG9uIHJvb3Qgc3BhbiB3aXRoIG1pc3NpbmcgcmVmJywgKCkgPT4ge1xuICAgIGNvbnN0IHRyYWNlRGF0YSA9IHtcbiAgICAgIHRyYWNlSUQsXG4gICAgICBwcm9jZXNzZXMsXG4gICAgICBzcGFuczogWy4uLnNwYW5zLCByb290U3BhbldpdGhNaXNzaW5nUmVmXSxcbiAgICB9IGFzIHVua25vd24gYXMgVHJhY2VSZXNwb25zZTtcblxuICAgIGV4cGVjdCh0cmFuc2Zvcm1UcmFjZURhdGEodHJhY2VEYXRhKSEudHJhY2VOYW1lKS50b0VxdWFsKGAke3NlcnZpY2VOYW1lfTogJHtyb290T3BlcmF0aW9uTmFtZX1gKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gdHJhY2UgZGF0YSB3aXRoIGNvcnJlY3QgdHJhY2VOYW1lIGJhc2VkIG9uIHJvb3Qgc3BhbiB3aXRob3V0IGFueSByZWZzJywgKCkgPT4ge1xuICAgIGNvbnN0IHRyYWNlRGF0YSA9IHtcbiAgICAgIHRyYWNlSUQsXG4gICAgICBwcm9jZXNzZXMsXG4gICAgICBzcGFuczogWy4uLnNwYW5zLCByb290U3BhbldpdGhvdXRSZWZzXSxcbiAgICB9IGFzIHVua25vd24gYXMgVHJhY2VSZXNwb25zZTtcblxuICAgIGV4cGVjdCh0cmFuc2Zvcm1UcmFjZURhdGEodHJhY2VEYXRhKSEudHJhY2VOYW1lKS50b0VxdWFsKGAke3NlcnZpY2VOYW1lfTogJHtyb290T3BlcmF0aW9uTmFtZX1gKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSUEsT0FBT0Esa0JBQWtCLElBQUlDLFNBQVMsRUFBRUMsZUFBZSxRQUFRLHdCQUF3QjtBQUV2RkMsUUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFNO0VBQzVCQyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsWUFBTTtJQUNoQyxJQUFNQyxXQUFXLEdBQUdKLFNBQVMsQ0FDM0IsQ0FDRTtNQUFFSyxHQUFHLEVBQUUsTUFBTTtNQUFFQyxLQUFLLEVBQUU7SUFBVSxDQUFDLEVBQ2pDO01BQUVELEdBQUcsRUFBRSxrQkFBa0I7TUFBRUMsS0FBSyxF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