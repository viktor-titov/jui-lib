// Copyright (c) 2017 The Jaeger Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { uniq as _uniq } from 'lodash';
import memoize from 'lru-memoize';
import { getConfigValue } from '../utils/config/get-config';
import { getParent } from './span';
var parameterRegExp = /#\{([^{}]*)\}/g;
function getParamNames(str) {
  var names = new Set();
  str.replace(parameterRegExp, function (match, name) {
    names.add(name);
    return match;
  });
  return Array.from(names);
}
function stringSupplant(str, encodeFn, map) {
  return str.replace(parameterRegExp, function (_, name) {
    var value = map[name];
    return value == null ? '' : encodeFn(value);
  });
}
export function processTemplate(template, encodeFn) {
  if (typeof template !== 'string') {
    /*
     // kept on ice until #123 is implemented:
    if (template && Array.isArray(template.parameters) && (typeof template.template === 'function')) {
      return template;
    }
     */
    throw new Error('Invalid template');
  }
  return {
    parameters: getParamNames(template),
    template: stringSupplant.bind(null, template, encodeFn)
  };
}
export function createTestFunction(entry) {
  if (typeof entry === 'string') {
    return function (arg) {
      return arg === entry;
    };
  }
  if (Array.isArray(entry)) {
    return function (arg) {
      return entry.indexOf(arg) > -1;
    };
  }
  /*
   // kept on ice until #123 is implemented:
  if (entry instanceof RegExp) {
    return (arg: any) => entry.test(arg);
  }
  if (typeof entry === 'function') {
    return entry;
  }
   */
  if (entry == null) {
    return function () {
      return true;
    };
  }
  throw new Error("Invalid value: " + entry);
}
var identity = function identity(a) {
  return a;
};
export function processLinkPattern(pattern) {
  try {
    var url = processTemplate(pattern.url, encodeURIComponent);
    var text = processTemplate(pattern.text, identity);
    return {
      object: pattern,
      type: createTestFunction(pattern.type),
      key: createTestFunction(pattern.key),
      value: createTestFunction(pattern.value),
      url: url,
      text: text,
      parameters: _uniq(url.parameters.concat(text.parameters))
    };
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error("Ignoring invalid link pattern: " + error, pattern);
    return null;
  }
}
export function getParameterInArray(name, array) {
  if (array) {
    return array.find(function (entry) {
      return entry.key === name;
    });
  }
  return undefined;
}
export function getParameterInAncestor(name, span) {
  var currentSpan = span;
  while (currentSpan) {
    var result = getParameterInArray(name, currentSpan.tags) || getParameterInArray(name, currentSpan.process.tags);
    if (result) {
      return result;
    }
    currentSpan = getParent(currentSpan);
  }
  return undefined;
}
function callTemplate(template, data) {
  return template.template(data);
}
export function computeTraceLink(linkPatterns, trace) {
  var result = [];
  var validKeys = Object.keys(trace).filter(function (key) {
    return typeof trace[key] === 'string' || trace[key] === 'number';
  });
  linkPatterns == null || linkPatterns.filter(function (pattern) {
    return pattern == null ? void 0 : pattern.type('traces');
  }).forEach(function (pattern) {
    var parameterValues = {};
    var allParameters = pattern == null ? void 0 : pattern.parameters.every(function (parameter) {
      var key = parameter;
      if (validKeys.includes(key)) {
        // At this point is safe to access to trace object using parameter variable because
        // we validated parameter against validKeys, this implies that parameter a keyof Trace.
        parameterValues[parameter] = trace[key];
        return true;
      }
      return false;
    });
    if (allParameters) {
      result.push({
        url: callTemplate(pattern.url, parameterValues),
        text: callTemplate(pattern.text, parameterValues)
      });
    }
  });
  return result;
}
export function computeLinks(linkPatterns, span, items, itemIndex) {
  var item = items[itemIndex];
  var type = 'logs';
  var processTags = span.process.tags === items;
  if (processTags) {
    type = 'process';
  }
  var spanTags = span.tags === items;
  if (spanTags) {
    type = 'tags';
  }
  var result = [];
  linkPatterns.forEach(function (pattern) {
    if (pattern.type(type) && pattern.key(item.key) && pattern.value(item.value)) {
      var parameterValues = {};
      var allParameters = pattern.parameters.every(function (parameter) {
        var entry = getParameterInArray(parameter, items);
        if (!entry && !processTags) {
          // do not look in ancestors for process tags because the same object may appear in different places in the hierarchy
          // and the cache in getLinks uses that object as a key
          entry = getParameterInAncestor(parameter, span);
        }
        if (entry) {
          parameterValues[parameter] = entry.value;
          return true;
        }
        // eslint-disable-next-line no-console
        console.warn("Skipping link pattern, missing parameter " + parameter + " for key " + item.key + " in " + type + ".", pattern.object);
        return false;
      });
      if (allParameters) {
        result.push({
          url: callTemplate(pattern.url, parameterValues),
          text: callTemplate(pattern.text, parameterValues)
        });
      }
    }
  });
  return result;
}
export function createGetLinks(linkPatterns, cache) {
  return function (span, items, itemIndex) {
    if (linkPatterns.length === 0) {
      return [];
    }
    var item = items[itemIndex];
    var result = cache.get(item);
    if (!result) {
      result = computeLinks(linkPatterns, span, items, itemIndex);
      cache.set(item, result);
    }
    return result;
  };
}
var processedLinks = (getConfigValue('linkPatterns') || []).map(processLinkPattern).filter(function (link) {
  return Boolean(link);
});
export var getTraceLinks = memoize(10)(function (trace) {
  var result = [];
  if (!trace) {
    return result;
  }
  return computeTraceLink(processedLinks, trace);
});
export default createGetLinks(processedLinks, new WeakMap());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,