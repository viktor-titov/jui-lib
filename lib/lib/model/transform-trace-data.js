import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { isEqual as _isEqual } from 'lodash';

// @ts-ignore
import { getTraceSpanIdsAsTree } from '../selectors/trace';

// @ts-ignore

import { getConfigValue } from '../utils/config/get-config';
import { getTraceName } from './trace-viewer';

// exported for tests
export function deduplicateTags(spanTags) {
  var warningsHash = new Map();
  var tags = spanTags.reduce(function (uniqueTags, tag) {
    if (!uniqueTags.some(function (t) {
      return t.key === tag.key && t.value === tag.value;
    })) {
      uniqueTags.push(tag);
    } else {
      warningsHash.set(tag.key + ":" + tag.value, "Duplicate tag \"" + tag.key + ":" + tag.value + "\"");
    }
    return uniqueTags;
  }, []);
  var warnings = Array.from(warningsHash.values());
  return {
    tags: tags,
    warnings: warnings
  };
}

// exported for tests
export function orderTags(spanTags, topPrefixes) {
  var _spanTags$slice;
  var orderedTags = (_spanTags$slice = spanTags == null ? void 0 : spanTags.slice()) != null ? _spanTags$slice : [];
  var tp = (topPrefixes || []).map(function (p) {
    return p.toLowerCase();
  });
  orderedTags.sort(function (a, b) {
    var aKey = a.key.toLowerCase();
    var bKey = b.key.toLowerCase();
    for (var i = 0; i < tp.length; i++) {
      var p = tp[i];
      if (aKey.startsWith(p) && !bKey.startsWith(p)) {
        return -1;
      }
      if (!aKey.startsWith(p) && bKey.startsWith(p)) {
        return 1;
      }
    }
    if (aKey > bKey) {
      return 1;
    }
    if (aKey < bKey) {
      return -1;
    }
    return 0;
  });
  return orderedTags;
}

/**
 * NOTE: Mutates `data` - Transform the HTTP response data into the form the app
 * generally requires.
 */
export default function transformTraceData(data) {
  if (!(data != null && data.traceID)) {
    return null;
  }
  var traceID = data.traceID.toLowerCase();
  var traceEndTime = 0;
  var traceStartTime = Number.MAX_SAFE_INTEGER;
  var spanIdCounts = new Map();
  var spanMap = new Map();
  // filter out spans with empty start times
  // eslint-disable-next-line no-param-reassign
  data.spans = data.spans.filter(function (span) {
    return Boolean(span.startTime);
  });

  // Sort process tags
  data.processes = Object.entries(data.processes).reduce(function (processes, _ref) {
    var id = _ref[0],
      process = _ref[1];
    processes[id] = _extends({}, process, {
      tags: orderTags(process.tags)
    });
    return processes;
  }, {});
  var max = data.spans.length;
  for (var i = 0; i < max; i++) {
    var span = data.spans[i];
    var startTime = span.startTime,
      duration = span.duration,
      processID = span.processID;
    var spanID = span.spanID;
    // check for start / end time for the trace
    if (startTime < traceStartTime) {
      traceStartTime = startTime;
    }
    if (startTime + duration > traceEndTime) {
      traceEndTime = startTime + duration;
    }
    // make sure span IDs are unique
    var idCount = spanIdCounts.get(spanID);
    if (idCount != null) {
      // eslint-disable-next-line no-console
      console.warn("Dupe spanID, " + (idCount + 1) + " x " + spanID, span, spanMap.get(spanID));
      if (_isEqual(span, spanMap.get(spanID))) {
        // eslint-disable-next-line no-console
        console.warn('\t two spans with same ID have `isEqual(...) === true`');
      }
      spanIdCounts.set(spanID, idCount + 1);
      spanID = spanID + "_" + idCount;
      span.spanID = spanID;
    } else {
      spanIdCounts.set(spanID, 1);
    }
    span.process = data.processes[processID];
    spanMap.set(spanID, span);
  }
  // tree is necessary to sort the spans, so children follow parents, and
  // siblings are sorted by start time
  var tree = getTraceSpanIdsAsTree(data);
  var spans = [];
  var svcCounts = {};

  // Eslint complains about number type not needed but then TS complains it is implicitly any.
  // eslint-disable-next-line @typescript-eslint/no-inferrable-types
  tree.walk(function (spanID, node, depth) {
    if (depth === void 0) {
      depth = 0;
    }
    if (spanID === '__root__') {
      return;
    }
    if (typeof spanID !== 'string') {
      return;
    }
    var span = spanMap.get(spanID);
    if (!span) {
      return;
    }
    var serviceName = span.process.serviceName;
    svcCounts[serviceName] = (svcCounts[serviceName] || 0) + 1;
    span.relativeStartTime = span.startTime - traceStartTime;
    span.depth = depth - 1;
    span.hasChildren = node.children.length > 0;
    span.childSpanCount = node.children.length;
    span.warnings = span.warnings || [];
    span.tags = span.tags || [];
    span.references = span.references || [];
    var tagsInfo = deduplicateTags(span.tags);
    span.tags = orderTags(tagsInfo.tags, getConfigValue('topTagPrefixes'));
    span.warnings = span.warnings.concat(tagsInfo.warnings);
    span.references.forEach(function (ref, index) {
      var refSpan = spanMap.get(ref.spanID);
      if (refSpan) {
        // eslint-disable-next-line no-param-reassign
        ref.span = refSpan;
        if (index > 0) {
          // Don't take into account the parent, just other references.
          refSpan.subsidiarilyReferencedBy = refSpan.subsidiarilyReferencedBy || [];
          refSpan.subsidiarilyReferencedBy.push({
            spanID: spanID,
            traceID: traceID,
            span: span,
            refType: ref.refType
          });
        }
      }
    });
    spans.push(span);
  });
  var traceName = getTraceName(spans);
  var services = Object.keys(svcCounts).map(function (name) {
    return {
      name: name,
      numberOfSpans: svcCounts[name]
    };
  });
  return {
    services: services,
    spans: spans,
    traceID: traceID,
    traceName: traceName,
    // can't use spread operator for intersection types
    // repl: https://goo.gl/4Z23MJ
    // issue: https://github.com/facebook/flow/issues/1511
    processes: data.processes,
    duration: traceEndTime - traceStartTime,
    startTime: traceStartTime,
    endTime: traceEndTime
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc0VxdWFsIiwiX2lzRXF1YWwiLCJnZXRUcmFjZVNwYW5JZHNBc1RyZWUiLCJnZXRDb25maWdWYWx1ZSIsImdldFRyYWNlTmFtZSIsImRlZHVwbGljYXRlVGFncyIsInNwYW5UYWdzIiwid2FybmluZ3NIYXNoIiwiTWFwIiwidGFncyIsInJlZHVjZSIsInVuaXF1ZVRhZ3MiLCJ0YWciLCJzb21lIiwidCIsImtleSIsInZhbHVlIiwicHVzaCIsInNldCIsIndhcm5pbmdzIiwiQXJyYXkiLCJmcm9tIiwidmFsdWVzIiwib3JkZXJUYWdzIiwidG9wUHJlZml4ZXMiLCJfc3BhblRhZ3Mkc2xpY2UiLCJvcmRlcmVkVGFncyIsInNsaWNlIiwidHAiLCJtYXAiLCJwIiwidG9Mb3dlckNhc2UiLCJzb3J0IiwiYSIsImIiLCJhS2V5IiwiYktleSIsImkiLCJsZW5ndGgiLCJzdGFydHNXaXRoIiwidHJhbnNmb3JtVHJhY2VEYXRhIiwiZGF0YSIsInRyYWNlSUQiLCJ0cmFjZUVuZFRpbWUiLCJ0cmFjZVN0YXJ0VGltZSIsIk51bWJlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJzcGFuSWRDb3VudHMiLCJzcGFuTWFwIiwic3BhbnMiLCJmaWx0ZXIiLCJzcGFuIiwiQm9vbGVhbiIsInN0YXJ0VGltZSIsInByb2Nlc3NlcyIsIk9iamVjdCIsImVudHJpZXMiLCJfcmVmIiwiaWQiLCJwcm9jZXNzIiwiX2V4dGVuZHMiLCJtYXgiLCJkdXJhdGlvbiIsInByb2Nlc3NJRCIsInNwYW5JRCIsImlkQ291bnQiLCJnZXQiLCJjb25zb2xlIiwid2FybiIsInRyZWUiLCJzdmNDb3VudHMiLCJ3YWxrIiwibm9kZSIsImRlcHRoIiwic2VydmljZU5hbWUiLCJyZWxhdGl2ZVN0YXJ0VGltZSIsImhhc0NoaWxkcmVuIiwiY2hpbGRyZW4iLCJjaGlsZFNwYW5Db3VudCIsInJlZmVyZW5jZXMiLCJ0YWdzSW5mbyIsImNvbmNhdCIsImZvckVhY2giLCJyZWYiLCJpbmRleCIsInJlZlNwYW4iLCJzdWJzaWRpYXJpbHlSZWZlcmVuY2VkQnkiLCJyZWZUeXBlIiwidHJhY2VOYW1lIiwic2VydmljZXMiLCJrZXlzIiwibmFtZSIsIm51bWJlck9mU3BhbnMiLCJlbmRUaW1lIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9tb2RlbC90cmFuc2Zvcm0tdHJhY2UtZGF0YS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IGlzRXF1YWwgYXMgX2lzRXF1YWwgfSBmcm9tICdsb2Rhc2gnO1xuXG4vLyBAdHMtaWdub3JlXG5pbXBvcnQgeyBnZXRUcmFjZVNwYW5JZHNBc1RyZWUgfSBmcm9tICcuLi9zZWxlY3RvcnMvdHJhY2UnO1xuaW1wb3J0IHsgVHJhY2VLZXlWYWx1ZVBhaXIsIFRyYWNlU3BhbiwgVHJhY2UsIFRyYWNlUmVzcG9uc2UsIFRyYWNlUHJvY2VzcyB9IGZyb20gJy4uL3R5cGVzL3RyYWNlJztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCBUcmVlTm9kZSBmcm9tICcuLi91dGlscy9UcmVlTm9kZSc7XG5pbXBvcnQgeyBnZXRDb25maWdWYWx1ZSB9IGZyb20gJy4uL3V0aWxzL2NvbmZpZy9nZXQtY29uZmlnJztcblxuaW1wb3J0IHsgZ2V0VHJhY2VOYW1lIH0gZnJvbSAnLi90cmFjZS12aWV3ZXInO1xuXG4vLyBleHBvcnRlZCBmb3IgdGVzdHNcbmV4cG9ydCBmdW5jdGlvbiBkZWR1cGxpY2F0ZVRhZ3Moc3BhblRhZ3M6IFRyYWNlS2V5VmFsdWVQYWlyW10pIHtcbiAgY29uc3Qgd2FybmluZ3NIYXNoOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcbiAgY29uc3QgdGFnczogVHJhY2VLZXlWYWx1ZVBhaXJbXSA9IHNwYW5UYWdzLnJlZHVjZTxUcmFjZUtleVZhbHVlUGFpcltdPigodW5pcXVlVGFncywgdGFnKSA9PiB7XG4gICAgaWYgKCF1bmlxdWVUYWdzLnNvbWUoKHQpID0+IHQua2V5ID09PSB0YWcua2V5ICYmIHQudmFsdWUgPT09IHRhZy52YWx1ZSkpIHtcbiAgICAgIHVuaXF1ZVRhZ3MucHVzaCh0YWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuaW5nc0hhc2guc2V0KGAke3RhZy5rZXl9OiR7dGFnLnZhbHVlfWAsIGBEdXBsaWNhdGUgdGFnIFwiJHt0YWcua2V5fToke3RhZy52YWx1ZX1cImApO1xuICAgIH1cbiAgICByZXR1cm4gdW5pcXVlVGFncztcbiAgfSwgW10pO1xuICBjb25zdCB3YXJuaW5ncyA9IEFycmF5LmZyb20od2FybmluZ3NIYXNoLnZhbHVlcygpKTtcbiAgcmV0dXJuIHsgdGFncywgd2FybmluZ3MgfTtcbn1cblxuLy8gZXhwb3J0ZWQgZm9yIHRlc3RzXG5leHBvcnQgZnVuY3Rpb24gb3JkZXJUYWdzKHNwYW5UYWdzOiBUcmFjZUtleVZhbHVlUGFpcltdLCB0b3BQcmVmaXhlcz86IHN0cmluZ1tdKSB7XG4gIGNvbnN0IG9yZGVyZWRUYWdzOiBUcmFjZUtleVZhbHVlUGFpcltdID0gc3BhblRhZ3M/LnNsaWNlKCkgPz8gW107XG4gIGNvbnN0IHRwID0gKHRvcFByZWZpeGVzIHx8IFtdKS5tYXAoKHA6IHN0cmluZykgPT4gcC50b0xvd2VyQ2FzZSgpKTtcblxuICBvcmRlcmVkVGFncy5zb3J0KChhLCBiKSA9PiB7XG4gICAgY29uc3QgYUtleSA9IGEua2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgYktleSA9IGIua2V5LnRvTG93ZXJDYXNlKCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRwLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBwID0gdHBbaV07XG4gICAgICBpZiAoYUtleS5zdGFydHNXaXRoKHApICYmICFiS2V5LnN0YXJ0c1dpdGgocCkpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgaWYgKCFhS2V5LnN0YXJ0c1dpdGgocCkgJiYgYktleS5zdGFydHNXaXRoKHApKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhS2V5ID4gYktleSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmIChhS2V5IDwgYktleSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSk7XG5cbiAgcmV0dXJuIG9yZGVyZWRUYWdzO1xufVxuXG4vKipcbiAqIE5PVEU6IE11dGF0ZXMgYGRhdGFgIC0gVHJhbnNmb3JtIHRoZSBIVFRQIHJlc3BvbnNlIGRhdGEgaW50byB0aGUgZm9ybSB0aGUgYXBwXG4gKiBnZW5lcmFsbHkgcmVxdWlyZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zZm9ybVRyYWNlRGF0YShkYXRhOiBUcmFjZVJlc3BvbnNlIHwgdW5kZWZpbmVkKTogVHJhY2UgfCBudWxsIHtcbiAgaWYgKCFkYXRhPy50cmFjZUlEKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgY29uc3QgdHJhY2VJRCA9IGRhdGEudHJhY2VJRC50b0xvd2VyQ2FzZSgpO1xuXG4gIGxldCB0cmFjZUVuZFRpbWUgPSAwO1xuICBsZXQgdHJhY2VTdGFydFRpbWUgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgY29uc3Qgc3BhbklkQ291bnRzID0gbmV3IE1hcCgpO1xuICBjb25zdCBzcGFuTWFwID0gbmV3IE1hcDxzdHJpbmcsIFRyYWNlU3Bhbj4oKTtcbiAgLy8gZmlsdGVyIG91dCBzcGFucyB3aXRoIGVtcHR5IHN0YXJ0IHRpbWVzXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBkYXRhLnNwYW5zID0gZGF0YS5zcGFucy5maWx0ZXIoKHNwYW4pID0+IEJvb2xlYW4oc3Bhbi5zdGFydFRpbWUpKTtcblxuICAvLyBTb3J0IHByb2Nlc3MgdGFnc1xuICBkYXRhLnByb2Nlc3NlcyA9IE9iamVjdC5lbnRyaWVzKGRhdGEucHJvY2Vzc2VzKS5yZWR1Y2U8UmVjb3JkPHN0cmluZywgVHJhY2VQcm9jZXNzPj4oKHByb2Nlc3NlcywgW2lkLCBwcm9jZXNzXSkgPT4ge1xuICAgIHByb2Nlc3Nlc1tpZF0gPSB7XG4gICAgICAuLi5wcm9jZXNzLFxuICAgICAgdGFnczogb3JkZXJUYWdzKHByb2Nlc3MudGFncyksXG4gICAgfTtcbiAgICByZXR1cm4gcHJvY2Vzc2VzO1xuICB9LCB7fSk7XG5cbiAgY29uc3QgbWF4ID0gZGF0YS5zcGFucy5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcbiAgICBjb25zdCBzcGFuOiBUcmFjZVNwYW4gPSBkYXRhLnNwYW5zW2ldIGFzIFRyYWNlU3BhbjtcbiAgICBjb25zdCB7IHN0YXJ0VGltZSwgZHVyYXRpb24sIHByb2Nlc3NJRCB9ID0gc3BhbjtcblxuICAgIGxldCBzcGFuSUQgPSBzcGFuLnNwYW5JRDtcbiAgICAvLyBjaGVjayBmb3Igc3RhcnQgLyBlbmQgdGltZSBmb3IgdGhlIHRyYWNlXG4gICAgaWYgKHN0YXJ0VGltZSA8IHRyYWNlU3RhcnRUaW1lKSB7XG4gICAgICB0cmFjZVN0YXJ0VGltZSA9IHN0YXJ0VGltZTtcbiAgICB9XG4gICAgaWYgKHN0YXJ0VGltZSArIGR1cmF0aW9uID4gdHJhY2VFbmRUaW1lKSB7XG4gICAgICB0cmFjZUVuZFRpbWUgPSBzdGFydFRpbWUgKyBkdXJhdGlvbjtcbiAgICB9XG4gICAgLy8gbWFrZSBzdXJlIHNwYW4gSURzIGFyZSB1bmlxdWVcbiAgICBjb25zdCBpZENvdW50ID0gc3BhbklkQ291bnRzLmdldChzcGFuSUQpO1xuICAgIGlmIChpZENvdW50ICE9IG51bGwpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICBjb25zb2xlLndhcm4oYER1cGUgc3BhbklELCAke2lkQ291bnQgKyAxfSB4ICR7c3BhbklEfWAsIHNwYW4sIHNwYW5NYXAuZ2V0KHNwYW5JRCkpO1xuICAgICAgaWYgKF9pc0VxdWFsKHNwYW4sIHNwYW5NYXAuZ2V0KHNwYW5JRCkpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybignXFx0IHR3byBzcGFucyB3aXRoIHNhbWUgSUQgaGF2ZSBgaXNFcXVhbCguLi4pID09PSB0cnVlYCcpO1xuICAgICAgfVxuICAgICAgc3BhbklkQ291bnRzLnNldChzcGFuSUQsIGlkQ291bnQgKyAxKTtcbiAgICAgIHNwYW5JRCA9IGAke3NwYW5JRH1fJHtpZENvdW50fWA7XG4gICAgICBzcGFuLnNwYW5JRCA9IHNwYW5JRDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3BhbklkQ291bnRzLnNldChzcGFuSUQsIDEpO1xuICAgIH1cbiAgICBzcGFuLnByb2Nlc3MgPSBkYXRhLnByb2Nlc3Nlc1twcm9jZXNzSURdO1xuICAgIHNwYW5NYXAuc2V0KHNwYW5JRCwgc3Bhbik7XG4gIH1cbiAgLy8gdHJlZSBpcyBuZWNlc3NhcnkgdG8gc29ydCB0aGUgc3BhbnMsIHNvIGNoaWxkcmVuIGZvbGxvdyBwYXJlbnRzLCBhbmRcbiAgLy8gc2libGluZ3MgYXJlIHNvcnRlZCBieSBzdGFydCB0aW1lXG4gIGNvbnN0IHRyZWUgPSBnZXRUcmFjZVNwYW5JZHNBc1RyZWUoZGF0YSk7XG4gIGNvbnN0IHNwYW5zOiBUcmFjZVNwYW5bXSA9IFtdO1xuICBjb25zdCBzdmNDb3VudHM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcblxuICAvLyBFc2xpbnQgY29tcGxhaW5zIGFib3V0IG51bWJlciB0eXBlIG5vdCBuZWVkZWQgYnV0IHRoZW4gVFMgY29tcGxhaW5zIGl0IGlzIGltcGxpY2l0bHkgYW55LlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWluZmVycmFibGUtdHlwZXNcbiAgdHJlZS53YWxrKChzcGFuSUQ6IHN0cmluZyB8IG51bWJlciB8IHVuZGVmaW5lZCwgbm9kZTogVHJlZU5vZGUsIGRlcHRoOiBudW1iZXIgPSAwKSA9PiB7XG4gICAgaWYgKHNwYW5JRCA9PT0gJ19fcm9vdF9fJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNwYW5JRCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3BhbiA9IHNwYW5NYXAuZ2V0KHNwYW5JRCkgYXMgVHJhY2VTcGFuO1xuICAgIGlmICghc3Bhbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IHNlcnZpY2VOYW1lIH0gPSBzcGFuLnByb2Nlc3M7XG4gICAgc3ZjQ291bnRzW3NlcnZpY2VOYW1lXSA9IChzdmNDb3VudHNbc2VydmljZU5hbWVdIHx8IDApICsgMTtcbiAgICBzcGFuLnJlbGF0aXZlU3RhcnRUaW1lID0gc3Bhbi5zdGFydFRpbWUgLSB0cmFjZVN0YXJ0VGltZTtcbiAgICBzcGFuLmRlcHRoID0gZGVwdGggLSAxO1xuICAgIHNwYW4uaGFzQ2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLmxlbmd0aCA+IDA7XG4gICAgc3Bhbi5jaGlsZFNwYW5Db3VudCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoO1xuICAgIHNwYW4ud2FybmluZ3MgPSBzcGFuLndhcm5pbmdzIHx8IFtdO1xuICAgIHNwYW4udGFncyA9IHNwYW4udGFncyB8fCBbXTtcbiAgICBzcGFuLnJlZmVyZW5jZXMgPSBzcGFuLnJlZmVyZW5jZXMgfHwgW107XG4gICAgY29uc3QgdGFnc0luZm8gPSBkZWR1cGxpY2F0ZVRhZ3Moc3Bhbi50YWdzKTtcbiAgICBzcGFuLnRhZ3MgPSBvcmRlclRhZ3ModGFnc0luZm8udGFncywgZ2V0Q29uZmlnVmFsdWUoJ3RvcFRhZ1ByZWZpeGVzJykpO1xuICAgIHNwYW4ud2FybmluZ3MgPSBzcGFuLndhcm5pbmdzLmNvbmNhdCh0YWdzSW5mby53YXJuaW5ncyk7XG4gICAgc3Bhbi5yZWZlcmVuY2VzLmZvckVhY2goKHJlZiwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHJlZlNwYW4gPSBzcGFuTWFwLmdldChyZWYuc3BhbklEKSBhcyBUcmFjZVNwYW47XG4gICAgICBpZiAocmVmU3Bhbikge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgcmVmLnNwYW4gPSByZWZTcGFuO1xuICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgLy8gRG9uJ3QgdGFrZSBpbnRvIGFjY291bnQgdGhlIHBhcmVudCwganVzdCBvdGhlciByZWZlcmVuY2VzLlxuICAgICAgICAgIHJlZlNwYW4uc3Vic2lkaWFyaWx5UmVmZXJlbmNlZEJ5ID0gcmVmU3Bhbi5zdWJzaWRpYXJpbHlSZWZlcmVuY2VkQnkgfHwgW107XG4gICAgICAgICAgcmVmU3Bhbi5zdWJzaWRpYXJpbHlSZWZlcmVuY2VkQnkucHVzaCh7XG4gICAgICAgICAgICBzcGFuSUQsXG4gICAgICAgICAgICB0cmFjZUlELFxuICAgICAgICAgICAgc3BhbixcbiAgICAgICAgICAgIHJlZlR5cGU6IHJlZi5yZWZUeXBlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3BhbnMucHVzaChzcGFuKTtcbiAgfSk7XG4gIGNvbnN0IHRyYWNlTmFtZSA9IGdldFRyYWNlTmFtZShzcGFucyk7XG4gIGNvbnN0IHNlcnZpY2VzID0gT2JqZWN0LmtleXMoc3ZjQ291bnRzKS5tYXAoKG5hbWUpID0+ICh7IG5hbWUsIG51bWJlck9mU3BhbnM6IHN2Y0NvdW50c1tuYW1lXSB9KSk7XG4gIHJldHVybiB7XG4gICAgc2VydmljZXMsXG4gICAgc3BhbnMsXG4gICAgdHJhY2VJRCxcbiAgICB0cmFjZU5hbWUsXG4gICAgLy8gY2FuJ3QgdXNlIHNwcmVhZCBvcGVyYXRvciBmb3IgaW50ZXJzZWN0aW9uIHR5cGVzXG4gICAgLy8gcmVwbDogaHR0cHM6Ly9nb28uZ2wvNFoyM01KXG4gICAgLy8gaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8xNTExXG4gICAgcHJvY2Vzc2VzOiBkYXRhLnByb2Nlc3NlcyxcbiAgICBkdXJhdGlvbjogdHJhY2VFbmRUaW1lIC0gdHJhY2VTdGFydFRpbWUsXG4gICAgc3RhcnRUaW1lOiB0cmFjZVN0YXJ0VGltZSxcbiAgICBlbmRUaW1lOiB0cmFjZUVuZFRpbWUsXG4gIH07XG59XG4iXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxPQUFPLElBQUlDLFFBQVEsUUFBUSxRQUFROztBQUU1QztBQUNBLFNBQVNDLHFCQUFxQixRQUFRLG9C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