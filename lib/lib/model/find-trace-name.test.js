// Copyright (c) 2020 The Jaeger Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { _getTraceNameImpl as getTraceName } from './trace-viewer';
describe('getTraceName', function () {
  var firstSpanId = 'firstSpanId';
  var secondSpanId = 'secondSpanId';
  var thirdSpanId = 'thirdSpanId';
  var missingSpanId = 'missingSpanId';
  var currentTraceId = 'currentTraceId';
  var serviceName = 'serviceName';
  var operationName = 'operationName';
  var t = 1583758670000;

  // Note: this trace has a loop S1 <- S2 <- S3 <- S1, which is the only way
  // to make the algorithm return an empty string as trace name.
  var spansWithNoRoots = [{
    spanID: firstSpanId,
    traceID: currentTraceId,
    startTime: t + 200,
    process: {},
    references: [{
      spanID: secondSpanId,
      traceID: currentTraceId
    }]
  }, {
    spanID: secondSpanId,
    traceID: currentTraceId,
    startTime: t + 100,
    process: {},
    references: [{
      spanID: thirdSpanId,
      traceID: currentTraceId
    }]
  }, {
    spanID: thirdSpanId,
    traceID: currentTraceId,
    startTime: t,
    process: {},
    references: [{
      spanID: firstSpanId,
      traceID: currentTraceId
    }]
  }];
  var spansWithMultipleRootsDifferentByStartTime = [{
    spanID: firstSpanId,
    traceID: currentTraceId,
    startTime: t + 200,
    process: {},
    references: [{
      spanID: thirdSpanId,
      traceID: currentTraceId
    }]
  }, {
    spanID: secondSpanId,
    // may be a root span
    traceID: currentTraceId,
    startTime: t + 100,
    process: {},
    references: [{
      spanID: missingSpanId,
      traceID: currentTraceId
    }]
  }, {
    spanID: thirdSpanId,
    // root span (as the earliest)
    traceID: currentTraceId,
    startTime: t,
    operationName: operationName,
    process: {
      serviceName: serviceName
    },
    references: [{
      spanID: missingSpanId,
      traceID: currentTraceId
    }]
  }];
  var spansWithMultipleRootsWithOneWithoutRefs = [{
    spanID: firstSpanId,
    traceID: currentTraceId,
    startTime: t + 200,
    process: {},
    references: [{
      spanID: thirdSpanId,
      traceID: currentTraceId
    }]
  }, {
    spanID: secondSpanId,
    // root span (as a span without any refs)
    traceID: currentTraceId,
    startTime: t + 100,
    operationName: operationName,
    process: {
      serviceName: serviceName
    }
  }, {
    spanID: thirdSpanId,
    // may be a root span
    traceID: currentTraceId,
    startTime: t,
    process: {},
    references: [{
      spanID: missingSpanId,
      traceID: currentTraceId
    }]
  }];
  var spansWithOneRootWithRemoteRef = [{
    spanID: firstSpanId,
    traceID: currentTraceId,
    startTime: t + 200,
    process: {},
    references: [{
      spanID: secondSpanId,
      traceID: currentTraceId
    }]
  }, {
    spanID: secondSpanId,
    traceID: currentTraceId,
    startTime: t + 100,
    process: {},
    references: [{
      spanID: thirdSpanId,
      traceID: currentTraceId
    }]
  }, {
    spanID: thirdSpanId,
    // effective root span, since its parent is missing
    traceID: currentTraceId,
    startTime: t,
    operationName: operationName,
    process: {
      serviceName: serviceName
    },
    references: [{
      spanID: missingSpanId,
      traceID: currentTraceId
    }]
  }];
  var spansWithOneRootWithNoRefs = [{
    spanID: firstSpanId,
    traceID: currentTraceId,
    startTime: t + 200,
    process: {},
    references: [{
      spanID: thirdSpanId,
      traceID: currentTraceId
    }]
  }, {
    spanID: secondSpanId,
    // root span
    traceID: currentTraceId,
    startTime: t + 100,
    operationName: operationName,
    process: {
      serviceName: serviceName
    }
  }, {
    spanID: thirdSpanId,
    traceID: currentTraceId,
    startTime: t,
    process: {},
    references: [{
      spanID: secondSpanId,
      traceID: currentTraceId
    }]
  }];
  var fullTraceName = serviceName + ": " + operationName;
  it('returns an empty string if given spans with no root among them', function () {
    expect(getTraceName(spansWithNoRoots)).toEqual('');
  });
  it('returns an id of root span with the earliest startTime', function () {
    expect(getTraceName(spansWithMultipleRootsDifferentByStartTime)).toEqual(fullTraceName);
  });
  it('returns an id of root span without any refs', function () {
    expect(getTraceName(spansWithMultipleRootsWithOneWithoutRefs)).toEqual(fullTraceName);
  });
  it('returns an id of root span with remote ref', function () {
    expect(getTraceName(spansWithOneRootWithRemoteRef)).toEqual(fullTraceName);
  });
  it('returns an id of root span with no refs', function () {
    expect(getTraceName(spansWithOneRootWithNoRefs)).toEqual(fullTraceName);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0VHJhY2VOYW1lSW1wbCIsImdldFRyYWNlTmFtZSIsImRlc2NyaWJlIiwiZmlyc3RTcGFuSWQiLCJzZWNvbmRTcGFuSWQiLCJ0aGlyZFNwYW5JZCIsIm1pc3NpbmdTcGFuSWQiLCJjdXJyZW50VHJhY2VJZCIsInNlcnZpY2VOYW1lIiwib3BlcmF0aW9uTmFtZSIsInQiLCJzcGFuc1dpdGhOb1Jvb3RzIiwic3BhbklEIiwidHJhY2VJRCIsInN0YXJ0VGltZSIsInByb2Nlc3MiLCJyZWZlcmVuY2VzIiwic3BhbnNXaXRoTXVsdGlwbGVSb290c0RpZmZlcmVudEJ5U3RhcnRUaW1lIiwic3BhbnNXaXRoTXVsdGlwbGVSb290c1dpdGhPbmVXaXRob3V0UmVmcyIsInNwYW5zV2l0aE9uZVJvb3RXaXRoUmVtb3RlUmVmIiwic3BhbnNXaXRoT25lUm9vdFdpdGhOb1JlZnMiLCJmdWxsVHJhY2VOYW1lIiwiaXQiLCJleHBlY3QiLCJ0b0VxdWFsIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9tb2RlbC9maW5kLXRyYWNlLW5hbWUudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjAgVGhlIEphZWdlciBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IFRyYWNlU3BhbiB9IGZyb20gJy4uL3R5cGVzL3RyYWNlJztcblxuaW1wb3J0IHsgX2dldFRyYWNlTmFtZUltcGwgYXMgZ2V0VHJhY2VOYW1lIH0gZnJvbSAnLi90cmFjZS12aWV3ZXInO1xuXG5kZXNjcmliZSgnZ2V0VHJhY2VOYW1lJywgKCkgPT4ge1xuICBjb25zdCBmaXJzdFNwYW5JZCA9ICdmaXJzdFNwYW5JZCc7XG4gIGNvbnN0IHNlY29uZFNwYW5JZCA9ICdzZWNvbmRTcGFuSWQnO1xuICBjb25zdCB0aGlyZFNwYW5JZCA9ICd0aGlyZFNwYW5JZCc7XG4gIGNvbnN0IG1pc3NpbmdTcGFuSWQgPSAnbWlzc2luZ1NwYW5JZCc7XG5cbiAgY29uc3QgY3VycmVudFRyYWNlSWQgPSAnY3VycmVudFRyYWNlSWQnO1xuXG4gIGNvbnN0IHNlcnZpY2VOYW1lID0gJ3NlcnZpY2VOYW1lJztcbiAgY29uc3Qgb3BlcmF0aW9uTmFtZSA9ICdvcGVyYXRpb25OYW1lJztcblxuICBjb25zdCB0ID0gMTU4Mzc1ODY3MDAwMDtcblxuICAvLyBOb3RlOiB0aGlzIHRyYWNlIGhhcyBhIGxvb3AgUzEgPC0gUzIgPC0gUzMgPC0gUzEsIHdoaWNoIGlzIHRoZSBvbmx5IHdheVxuICAvLyB0byBtYWtlIHRoZSBhbGdvcml0aG0gcmV0dXJuIGFuIGVtcHR5IHN0cmluZyBhcyB0cmFjZSBuYW1lLlxuICBjb25zdCBzcGFuc1dpdGhOb1Jvb3RzID0gW1xuICAgIHtcbiAgICAgIHNwYW5JRDogZmlyc3RTcGFuSWQsXG4gICAgICB0cmFjZUlEOiBjdXJyZW50VHJhY2VJZCxcbiAgICAgIHN0YXJ0VGltZTogdCArIDIwMCxcbiAgICAgIHByb2Nlc3M6IHt9LFxuICAgICAgcmVmZXJlbmNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgc3BhbklEOiBzZWNvbmRTcGFuSWQsXG4gICAgICAgICAgdHJhY2VJRDogY3VycmVudFRyYWNlSWQsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgc3BhbklEOiBzZWNvbmRTcGFuSWQsXG4gICAgICB0cmFjZUlEOiBjdXJyZW50VHJhY2VJZCxcbiAgICAgIHN0YXJ0VGltZTogdCArIDEwMCxcbiAgICAgIHByb2Nlc3M6IHt9LFxuICAgICAgcmVmZXJlbmNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgc3BhbklEOiB0aGlyZFNwYW5JZCxcbiAgICAgICAgICB0cmFjZUlEOiBjdXJyZW50VHJhY2VJZCxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICBzcGFuSUQ6IHRoaXJkU3BhbklkLFxuICAgICAgdHJhY2VJRDogY3VycmVudFRyYWNlSWQsXG4gICAgICBzdGFydFRpbWU6IHQsXG4gICAgICBwcm9jZXNzOiB7fSxcbiAgICAgIHJlZmVyZW5jZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHNwYW5JRDogZmlyc3RTcGFuSWQsXG4gICAgICAgICAgdHJhY2VJRDogY3VycmVudFRyYWNlSWQsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gIF07XG4gIGNvbnN0IHNwYW5zV2l0aE11bHRpcGxlUm9vdHNEaWZmZXJlbnRCeVN0YXJ0VGltZSA9IFtcbiAgICB7XG4gICAgICBzcGFuSUQ6IGZpcnN0U3BhbklkLFxuICAgICAgdHJhY2VJRDogY3VycmVudFRyYWNlSWQsXG4gICAgICBzdGFydFRpbWU6IHQgKyAyMDAsXG4gICAgICBwcm9jZXNzOiB7fSxcbiAgICAgIHJlZmVyZW5jZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHNwYW5JRDogdGhpcmRTcGFuSWQsXG4gICAgICAgICAgdHJhY2VJRDogY3VycmVudFRyYWNlSWQsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgc3BhbklEOiBzZWNvbmRTcGFuSWQsIC8vIG1heSBiZSBhIHJvb3Qgc3BhblxuICAgICAgdHJhY2VJRDogY3VycmVudFRyYWNlSWQsXG4gICAgICBzdGFydFRpbWU6IHQgKyAxMDAsXG4gICAgICBwcm9jZXNzOiB7fSxcbiAgICAgIHJlZmVyZW5jZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHNwYW5JRDogbWlzc2luZ1NwYW5JZCxcbiAgICAgICAgICB0cmFjZUlEOiBjdXJyZW50VHJhY2VJZCxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICBzcGFuSUQ6IHRoaXJkU3BhbklkLCAvLyByb290IHNwYW4gKGFzIHRoZSBlYXJsaWVzdClcbiAgICAgIHRyYWNlSUQ6IGN1cnJlbnRUcmFjZUlkLFxuICAgICAgc3RhcnRUaW1lOiB0LFxuICAgICAgb3BlcmF0aW9uTmFtZSxcbiAgICAgIHByb2Nlc3M6IHtcbiAgICAgICAgc2VydmljZU5hbWUsXG4gICAgICB9LFxuICAgICAgcmVmZXJlbmNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgc3BhbklEOiBtaXNzaW5nU3BhbklkLFxuICAgICAgICAgIHRyYWNlSUQ6IGN1cnJlbnRUcmFjZUlkLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICBdO1xuICBjb25zdCBzcGFuc1dpdGhNdWx0aXBsZVJvb3RzV2l0aE9uZVdpdGhvdXRSZWZzID0gW1xuICAgIHtcbiAgICAgIHNwYW5JRDogZmlyc3RTcGFuSWQsXG4gICAgICB0cmFjZUlEOiBjdXJyZW50VHJhY2VJZCxcbiAgICAgIHN0YXJ0VGltZTogdCArIDIwMCxcbiAgICAgIHByb2Nlc3M6IHt9LFxuICAgICAgcmVmZXJlbmNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgc3BhbklEOiB0aGlyZFNwYW5JZCxcbiAgICAgICAgICB0cmFjZUlEOiBjdXJyZW50VHJhY2VJZCxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICBzcGFuSUQ6IHNlY29uZFNwYW5JZCwgLy8gcm9vdCBzcGFuIChhcyBhIHNwYW4gd2l0aG91dCBhbnkgcmVmcylcbiAgICAgIHRyYWNlSUQ6IGN1cnJlbnRUcmFjZUlkLFxuICAgICAgc3RhcnRUaW1lOiB0ICsgMTAwLFxuICAgICAgb3BlcmF0aW9uTmFtZSxcbiAgICAgIHByb2Nlc3M6IHtcbiAgICAgICAgc2VydmljZU5hbWUsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgc3BhbklEOiB0aGlyZFNwYW5JZCwgLy8gbWF5IGJlIGEgcm9vdCBzcGFuXG4gICAgICB0cmFjZUlEOiBjdXJyZW50VHJhY2VJZCxcbiAgICAgIHN0YXJ0VGltZTogdCxcbiAgICAgIHByb2Nlc3M6IHt9LFxuICAgICAgcmVmZXJlbmNlczogW1xuICAgICAgICB7XG4gICAgICAgICAgc3BhbklEOiBtaXNzaW5nU3BhbklkLFxuICAgICAgICAgIHRyYWNlSUQ6IGN1cnJlbnRUcmFjZUlkLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICBdO1xuICBjb25zdCBzcGFuc1dpdGhPbmVSb290V2l0aFJlbW90ZVJlZiA9IFtcbiAgICB7XG4gICAgICBzcGFuSUQ6IGZpcnN0U3BhbklkLFxuICAgICAgdHJhY2VJRDogY3VycmVudFRyYWNlSWQsXG4gICAgICBzdGFydFRpbWU6IHQgKyAyMDAsXG4gICAgICBwcm9jZXNzOiB7fSxcbiAgICAgIHJlZmVyZW5jZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHNwYW5JRDogc2Vjb25kU3BhbklkLFxuICAgICAgICAgIHRyYWNlSUQ6IGN1cnJlbnRUcmFjZUlkLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHNwYW5JRDogc2Vjb25kU3BhbklkLFxuICAgICAgdHJhY2VJRDogY3VycmVudFRyYWNlSWQsXG4gICAgICBzdGFydFRpbWU6IHQgKyAxMDAsXG4gICAgICBwcm9jZXNzOiB7fSxcbiAgICAgIHJlZmVyZW5jZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHNwYW5JRDogdGhpcmRTcGFuSWQsXG4gICAgICAgICAgdHJhY2VJRDogY3VycmVudFRyYWNlSWQsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgc3BhbklEOiB0aGlyZFNwYW5JZCwgLy8gZWZmZWN0aXZlIHJvb3Qgc3Bhbiwgc2luY2UgaXRzIHBhcmVudCBpcyBtaXNzaW5nXG4gICAgICB0cmFjZUlEOiBjdXJyZW50VHJhY2VJZCxcbiAgICAgIHN0YXJ0VGltZTogdCxcbiAgICAgIG9wZXJhdGlvbk5hbWUsXG4gICAgICBwcm9jZXNzOiB7XG4gICAgICAgIHNlcnZpY2VOYW1lLFxuICAgICAgfSxcbiAgICAgIHJlZmVyZW5jZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHNwYW5JRDogbWlzc2luZ1NwYW5JZCxcbiAgICAgICAgICB0cmFjZUlEOiBjdXJyZW50VHJhY2VJZCxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgXTtcbiAgY29uc3Qgc3BhbnNXaXRoT25lUm9vdFdpdGhOb1JlZnMgPSBbXG4gICAge1xuICAgICAgc3BhbklEOiBmaXJzdFNwYW5JZCxcbiAgICAgIHRyYWNlSUQ6IGN1cnJlbnRUcmFjZUlkLFxuICAgICAgc3RhcnRUaW1lOiB0ICsgMjAwLFxuICAgICAgcHJvY2Vzczoge30sXG4gICAgICByZWZlcmVuY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBzcGFuSUQ6IHRoaXJkU3BhbklkLFxuICAgICAgICAgIHRyYWNlSUQ6IGN1cnJlbnRUcmFjZUlkLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgIHNwYW5JRDogc2Vjb25kU3BhbklkLCAvLyByb290IHNwYW5cbiAgICAgIHRyYWNlSUQ6IGN1cnJlbnRUcmFjZUlkLFxuICAgICAgc3RhcnRUaW1lOiB0ICsgMTAwLFxuICAgICAgb3BlcmF0aW9uTmFtZSxcbiAgICAgIHByb2Nlc3M6IHtcbiAgICAgICAgc2VydmljZU5hbWUsXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAgc3BhbklEOiB0aGlyZFNwYW5JZCxcbiAgICAgIHRyYWNlSUQ6IGN1cnJlbnRUcmFjZUlkLFxuICAgICAgc3RhcnRUaW1lOiB0LFxuICAgICAgcHJvY2Vzczoge30sXG4gICAgICByZWZlcmVuY2VzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBzcGFuSUQ6IHNlY29uZFNwYW5JZCxcbiAgICAgICAgICB0cmFjZUlEOiBjdXJyZW50VHJhY2VJZCxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgXTtcblxuICBjb25zdCBmdWxsVHJhY2VOYW1lID0gYCR7c2VydmljZU5hbWV9OiAke29wZXJhdGlvbk5hbWV9YDtcblxuICBpdCgncmV0dXJucyBhbiBlbXB0eSBzdHJpbmcgaWYgZ2l2ZW4gc3BhbnMgd2l0aCBubyByb290IGFtb25nIHRoZW0nLCAoKSA9PiB7XG4gICAgZXhwZWN0KGdldFRyYWNlTmFtZShzcGFuc1dpdGhOb1Jvb3RzIGFzIFRyYWNlU3BhbltdKSkudG9FcXVhbCgnJyk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIGFuIGlkIG9mIHJvb3Qgc3BhbiB3aXRoIHRoZSBlYXJsaWVzdCBzdGFydFRpbWUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGdldFRyYWNlTmFtZShzcGFuc1dpdGhNdWx0aXBsZVJvb3RzRGlmZmVyZW50QnlTdGFydFRpbWUgYXMgVHJhY2VTcGFuW10pKS50b0VxdWFsKGZ1bGxUcmFjZU5hbWUpO1xuICB9KTtcblxuICBpdCgncmV0dXJucyBhbiBpZCBvZiByb290IHNwYW4gd2l0aG91dCBhbnkgcmVmcycsICgpID0+IHtcbiAgICBleHBlY3QoZ2V0VHJhY2VOYW1lKHNwYW5zV2l0aE11bHRpcGxlUm9vdHNXaXRoT25lV2l0aG91dFJlZnMgYXMgdW5rbm93biBhcyBUcmFjZVNwYW5bXSkpLnRvRXF1YWwoZnVsbFRyYWNlTmFtZSk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIGFuIGlkIG9mIHJvb3Qgc3BhbiB3aXRoIHJlbW90ZSByZWYnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGdldFRyYWNlTmFtZShzcGFuc1dpdGhPbmVSb290V2l0aFJlbW90ZVJlZiBhcyBUcmFjZVNwYW5bXSkpLnRvRXF1YWwoZnVsbFRyYWNlTmFtZSk7XG4gIH0pO1xuXG4gIGl0KCdyZXR1cm5zIGFuIGlkIG9mIHJvb3Qgc3BhbiB3aXRoIG5vIHJlZnMnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGdldFRyYWNlTmFtZShzcGFuc1dpdGhPbmVSb290V2l0aE5vUmVmcyBhcyB1bmtub3duIGFzIFRyYWNlU3BhbltdKSkudG9FcXVhbChmdWxsVHJhY2VOYW1lKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSUEsU0FBU0EsaUJBQWlCLElBQUlDLFlBQVksUUFBUSxnQkFBZ0I7QUFFbEVDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsWUFBTTtFQUM3QixJQUFNQyxXQUFXLEdBQUcsYUFBYTtFQUNqQyxJQUFNQyxZQUFZLEdBQUcsY0FBYztFQUNuQyxJQUFNQyxXQUFXLEdBQUcsYUFBYTtFQUNqQyxJQUFNQyxhQUFhLEdBQUcsZUFBZTtFQUVyQyxJQUFNQyxjQUFjLEdBQUcsZ0JBQWdCO0VBRXZDLElBQU1DLFdBQVcsR0FBRyxhQUFhO0VBQ2pDLElBQU1DLGFBQWEsR0FBRyxlQUFlO0VBRXJDLElBQU1DLENBQUMsR0FBRyxhQUFhOztFQUV2QjtFQUNBO0VBQ0EsSUFBTUMsZ0JBQWdCLEdBQUcsQ0FDdkI7SUFDRUMsTUFBTSxFQUFFVCxXQUFXO0lBQ25CVSxPQUFPLEVBQUVOLGNBQWM7SUFDdkJP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