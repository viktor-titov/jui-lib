import _taggedTemplateLiteralLoose from "@babel/runtime/helpers/taggedTemplateLiteralLoose";
import _extends from "@babel/runtime/helpers/extends";
var _templateObject, _templateObject2;
import { css } from '@emotion/css';
import React from 'react';
import { toOption, updateDatasourcePluginJsonDataOption } from '@grafana/data';
import { InlineField, InlineFieldRow, Input, Select, useStyles2 } from '@grafana/ui';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
export var NONE = 'None';
export var DURATION = 'Duration';
export var TAG = 'Tag';
export default function SpanBarSettings(_ref) {
  var _options$jsonData$spa, _options$jsonData$spa2, _options$jsonData$spa3;
  var options = _ref.options,
    onOptionsChange = _ref.onOptionsChange;
  var styles = useStyles2(getStyles);
  var selectOptions = [NONE, DURATION, TAG].map(toOption);
  return /*#__PURE__*/_jsxs("div", {
    className: css({
      width: '100%'
    }),
    children: [/*#__PURE__*/_jsx("h3", {
      className: "page-heading",
      children: "Span bar label"
    }), /*#__PURE__*/_jsx("div", {
      className: styles.infoText,
      children: "Span bar label lets you add additional info to the span bar row."
    }), /*#__PURE__*/_jsx(InlineFieldRow, {
      className: styles.row,
      children: /*#__PURE__*/_jsx(InlineField, {
        label: "Label",
        labelWidth: 26,
        grow: true,
        children: /*#__PURE__*/_jsx(Select, {
          inputId: "label",
          options: selectOptions,
          value: ((_options$jsonData$spa = options.jsonData.spanBar) == null ? void 0 : _options$jsonData$spa.type) || '',
          onChange: function onChange(v) {
            var _v$value;
            updateDatasourcePluginJsonDataOption({
              onOptionsChange: onOptionsChange,
              options: options
            }, 'spanBar', _extends({}, options.jsonData.spanBar, {
              type: (_v$value = v == null ? void 0 : v.value) != null ? _v$value : ''
            }));
          },
          placeholder: "Duration",
          isClearable: true,
          "aria-label": 'select-label-name',
          width: 25
        })
      })
    }), ((_options$jsonData$spa2 = options.jsonData.spanBar) == null ? void 0 : _options$jsonData$spa2.type) === TAG && /*#__PURE__*/_jsx(InlineFieldRow, {
      className: styles.row,
      children: /*#__PURE__*/_jsx(InlineField, {
        label: "Tag key",
        labelWidth: 26,
        tooltip: "Tag key which will be used to get the tag value",
        children: /*#__PURE__*/_jsx(Input, {
          type: "text",
          placeholder: "Enter tag key",
          onChange: function onChange(v) {
            return updateDatasourcePluginJsonDataOption({
              onOptionsChange: onOptionsChange,
              options: options
            }, 'spanBar', _extends({}, options.jsonData.spanBar, {
              tag: v.currentTarget.value
            }));
          },
          value: ((_options$jsonData$spa3 = options.jsonData.spanBar) == null ? void 0 : _options$jsonData$spa3.tag) || '',
          width: 25
        })
      })
    })]
  });
}
var getStyles = function getStyles(theme) {
  return {
    infoText: css(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n    label: infoText;\n    padding-bottom: ", ";\n    color: ", ";\n  "])), theme.spacing(2), theme.colors.text.secondary),
    row: css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose(["\n    label: row;\n    align-items: baseline;\n  "])))
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjc3MiLCJSZWFjdCIsInRvT3B0aW9uIiwidXBkYXRlRGF0YXNvdXJjZVBsdWdpbkpzb25EYXRhT3B0aW9uIiwiSW5saW5lRmllbGQiLCJJbmxpbmVGaWVsZFJvdyIsIklucHV0IiwiU2VsZWN0IiwidXNlU3R5bGVzMiIsImpzeCIsIl9qc3giLCJqc3hzIiwiX2pzeHMiLCJOT05FIiwiRFVSQVRJT04iLCJUQUciLCJTcGFuQmFyU2V0dGluZ3MiLCJfcmVmIiwiX29wdGlvbnMkanNvbkRhdGEkc3BhIiwiX29wdGlvbnMkanNvbkRhdGEkc3BhMiIsIl9vcHRpb25zJGpzb25EYXRhJHNwYTMiLCJvcHRpb25zIiwib25PcHRpb25zQ2hhbmdlIiwic3R5bGVzIiwiZ2V0U3R5bGVzIiwic2VsZWN0T3B0aW9ucyIsIm1hcCIsImNsYXNzTmFtZSIsIndpZHRoIiwiY2hpbGRyZW4iLCJpbmZvVGV4dCIsInJvdyIsImxhYmVsIiwibGFiZWxXaWR0aCIsImdyb3ciLCJpbnB1dElkIiwidmFsdWUiLCJqc29uRGF0YSIsInNwYW5CYXIiLCJ0eXBlIiwib25DaGFuZ2UiLCJ2IiwiX3YkdmFsdWUiLCJfZXh0ZW5kcyIsInBsYWNlaG9sZGVyIiwiaXNDbGVhcmFibGUiLCJ0b29sdGlwIiwidGFnIiwiY3VycmVudFRhcmdldCIsInRoZW1lIiwiX3RlbXBsYXRlT2JqZWN0IiwiX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlIiwic3BhY2luZyIsImNvbG9ycyIsInRleHQiLCJzZWNvbmRhcnkiLCJfdGVtcGxhdGVPYmplY3QyIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9zZXR0aW5ncy9TcGFuQmFyU2V0dGluZ3MudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL2Nzcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1xuICBEYXRhU291cmNlSnNvbkRhdGEsXG4gIERhdGFTb3VyY2VQbHVnaW5PcHRpb25zRWRpdG9yUHJvcHMsXG4gIEdyYWZhbmFUaGVtZTIsXG4gIHRvT3B0aW9uLFxuICB1cGRhdGVEYXRhc291cmNlUGx1Z2luSnNvbkRhdGFPcHRpb24sXG59IGZyb20gJ0BncmFmYW5hL2RhdGEnO1xuaW1wb3J0IHsgSW5saW5lRmllbGQsIElubGluZUZpZWxkUm93LCBJbnB1dCwgU2VsZWN0LCB1c2VTdHlsZXMyIH0gZnJvbSAnQGdyYWZhbmEvdWknO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNwYW5CYXJPcHRpb25zIHtcbiAgdHlwZT86IHN0cmluZztcbiAgdGFnPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNwYW5CYXJPcHRpb25zRGF0YSBleHRlbmRzIERhdGFTb3VyY2VKc29uRGF0YSB7XG4gIHNwYW5CYXI/OiBTcGFuQmFyT3B0aW9ucztcbn1cblxuZXhwb3J0IGNvbnN0IE5PTkUgPSAnTm9uZSc7XG5leHBvcnQgY29uc3QgRFVSQVRJT04gPSAnRHVyYXRpb24nO1xuZXhwb3J0IGNvbnN0IFRBRyA9ICdUYWcnO1xuXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBEYXRhU291cmNlUGx1Z2luT3B0aW9uc0VkaXRvclByb3BzPFNwYW5CYXJPcHRpb25zRGF0YT4ge31cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU3BhbkJhclNldHRpbmdzKHsgb3B0aW9ucywgb25PcHRpb25zQ2hhbmdlIH06IFByb3BzKSB7XG4gIGNvbnN0IHN0eWxlcyA9IHVzZVN0eWxlczIoZ2V0U3R5bGVzKTtcbiAgY29uc3Qgc2VsZWN0T3B0aW9ucyA9IFtOT05FLCBEVVJBVElPTiwgVEFHXS5tYXAodG9PcHRpb24pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2Nzcyh7IHdpZHRoOiAnMTAwJScgfSl9PlxuICAgICAgPGgzIGNsYXNzTmFtZT1cInBhZ2UtaGVhZGluZ1wiPlNwYW4gYmFyIGxhYmVsPC9oMz5cblxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5pbmZvVGV4dH0+U3BhbiBiYXIgbGFiZWwgbGV0cyB5b3UgYWRkIGFkZGl0aW9uYWwgaW5mbyB0byB0aGUgc3BhbiBiYXIgcm93LjwvZGl2PlxuXG4gICAgICA8SW5saW5lRmllbGRSb3cgY2xhc3NOYW1lPXtzdHlsZXMucm93fT5cbiAgICAgICAgPElubGluZUZpZWxkIGxhYmVsPVwiTGFiZWxcIiBsYWJlbFdpZHRoPXsyNn0gZ3Jvdz5cbiAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICBpbnB1dElkPVwibGFiZWxcIlxuICAgICAgICAgICAgb3B0aW9ucz17c2VsZWN0T3B0aW9uc31cbiAgICAgICAgICAgIHZhbHVlPXtvcHRpb25zLmpzb25EYXRhLnNwYW5CYXI/LnR5cGUgfHwgJyd9XG4gICAgICAgICAgICBvbkNoYW5nZT17KHYpID0+IHtcbiAgICAgICAgICAgICAgdXBkYXRlRGF0YXNvdXJjZVBsdWdpbkpzb25EYXRhT3B0aW9uKHsgb25PcHRpb25zQ2hhbmdlLCBvcHRpb25zIH0sICdzcGFuQmFyJywge1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMuanNvbkRhdGEuc3BhbkJhcixcbiAgICAgICAgICAgICAgICB0eXBlOiB2Py52YWx1ZSA/PyAnJyxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJEdXJhdGlvblwiXG4gICAgICAgICAgICBpc0NsZWFyYWJsZVxuICAgICAgICAgICAgYXJpYS1sYWJlbD17J3NlbGVjdC1sYWJlbC1uYW1lJ31cbiAgICAgICAgICAgIHdpZHRoPXsyNX1cbiAgICAgICAgICAvPlxuICAgICAgICA8L0lubGluZUZpZWxkPlxuICAgICAgPC9JbmxpbmVGaWVsZFJvdz5cbiAgICAgIHtvcHRpb25zLmpzb25EYXRhLnNwYW5CYXI/LnR5cGUgPT09IFRBRyAmJiAoXG4gICAgICAgIDxJbmxpbmVGaWVsZFJvdyBjbGFzc05hbWU9e3N0eWxlcy5yb3d9PlxuICAgICAgICAgIDxJbmxpbmVGaWVsZCBsYWJlbD1cIlRhZyBrZXlcIiBsYWJlbFdpZHRoPXsyNn0gdG9vbHRpcD1cIlRhZyBrZXkgd2hpY2ggd2lsbCBiZSB1c2VkIHRvIGdldCB0aGUgdGFnIHZhbHVlXCI+XG4gICAgICAgICAgICA8SW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIHRhZyBrZXlcIlxuICAgICAgICAgICAgICBvbkNoYW5nZT17KHYpID0+XG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YXNvdXJjZVBsdWdpbkpzb25EYXRhT3B0aW9uKHsgb25PcHRpb25zQ2hhbmdlLCBvcHRpb25zIH0sICdzcGFuQmFyJywge1xuICAgICAgICAgICAgICAgICAgLi4ub3B0aW9ucy5qc29uRGF0YS5zcGFuQmFyLFxuICAgICAgICAgICAgICAgICAgdGFnOiB2LmN1cnJlbnRUYXJnZXQudmFsdWUsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YWx1ZT17b3B0aW9ucy5qc29uRGF0YS5zcGFuQmFyPy50YWcgfHwgJyd9XG4gICAgICAgICAgICAgIHdpZHRoPXsyNX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9JbmxpbmVGaWVsZD5cbiAgICAgICAgPC9JbmxpbmVGaWVsZFJvdz5cbiAgICAgICl9XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmNvbnN0IGdldFN0eWxlcyA9ICh0aGVtZTogR3JhZmFuYVRoZW1lMikgPT4gKHtcbiAgaW5mb1RleHQ6IGNzc2BcbiAgICBsYWJlbDogaW5mb1RleHQ7XG4gICAgcGFkZGluZy1ib3R0b206ICR7dGhlbWUuc3BhY2luZygyKX07XG4gICAgY29sb3I6ICR7dGhlbWUuY29sb3JzLnRleHQuc2Vjb25kYXJ5fTtcbiAgYCxcblxuICByb3c6IGNzc2BcbiAgICBsYWJlbDogcm93O1xuICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZTtcbiAgYCxcbn0pO1xuIl0sIm1hcHBpbmdzIjoi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