// Copyright (c) 2020 The Jaeger Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { formatDuration, ONE_MILLISECOND, ONE_SECOND, ONE_MINUTE, ONE_HOUR, ONE_DAY } from './date';
describe('formatDuration', function () {
  it('keeps microseconds the same', function () {
    expect(formatDuration(1)).toBe('1μs');
  });
  it('displays a maximum of 2 units and rounds the last one', function () {
    var input = 10 * ONE_DAY + 13 * ONE_HOUR + 30 * ONE_MINUTE;
    expect(formatDuration(input)).toBe('10d 14h');
  });
  it('skips units that are empty', function () {
    var input = 2 * ONE_DAY + 5 * ONE_MINUTE;
    expect(formatDuration(input)).toBe('2d');
  });
  it('displays milliseconds in decimals', function () {
    var input = 2 * ONE_MILLISECOND + 357;
    expect(formatDuration(input)).toBe('2.36ms');
  });
  it('displays seconds in decimals', function () {
    var input = 2 * ONE_SECOND + 357 * ONE_MILLISECOND;
    expect(formatDuration(input)).toBe('2.36s');
  });
  it('displays minutes in split units', function () {
    var input = 2 * ONE_MINUTE + 30 * ONE_SECOND + 555 * ONE_MILLISECOND;
    expect(formatDuration(input)).toBe('2m 31s');
  });
  it('displays hours in split units', function () {
    var input = 2 * ONE_HOUR + 30 * ONE_MINUTE + 30 * ONE_SECOND;
    expect(formatDuration(input)).toBe('2h 31m');
  });
  it('displays times less than a μs', function () {
    var input = 0.1;
    expect(formatDuration(input)).toBe('0.1μs');
  });
  it('displays times of 0', function () {
    var input = 0;
    expect(formatDuration(input)).toBe('0μs');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmb3JtYXREdXJhdGlvbiIsIk9ORV9NSUxMSVNFQ09ORCIsIk9ORV9TRUNPTkQiLCJPTkVfTUlOVVRFIiwiT05FX0hPVVIiLCJPTkVfREFZIiwiZGVzY3JpYmUiLCJpdCIsImV4cGVjdCIsInRvQmUiLCJpbnB1dCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdXRpbHMvZGF0ZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAyMCBUaGUgSmFlZ2VyIEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgZm9ybWF0RHVyYXRpb24sIE9ORV9NSUxMSVNFQ09ORCwgT05FX1NFQ09ORCwgT05FX01JTlVURSwgT05FX0hPVVIsIE9ORV9EQVkgfSBmcm9tICcuL2RhdGUnO1xuXG5kZXNjcmliZSgnZm9ybWF0RHVyYXRpb24nLCAoKSA9PiB7XG4gIGl0KCdrZWVwcyBtaWNyb3NlY29uZHMgdGhlIHNhbWUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGZvcm1hdER1cmF0aW9uKDEpKS50b0JlKCcxzrxzJyk7XG4gIH0pO1xuXG4gIGl0KCdkaXNwbGF5cyBhIG1heGltdW0gb2YgMiB1bml0cyBhbmQgcm91bmRzIHRoZSBsYXN0IG9uZScsICgpID0+IHtcbiAgICBjb25zdCBpbnB1dCA9IDEwICogT05FX0RBWSArIDEzICogT05FX0hPVVIgKyAzMCAqIE9ORV9NSU5VVEU7XG4gICAgZXhwZWN0KGZvcm1hdER1cmF0aW9uKGlucHV0KSkudG9CZSgnMTBkIDE0aCcpO1xuICB9KTtcblxuICBpdCgnc2tpcHMgdW5pdHMgdGhhdCBhcmUgZW1wdHknLCAoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSAyICogT05FX0RBWSArIDUgKiBPTkVfTUlOVVRFO1xuICAgIGV4cGVjdChmb3JtYXREdXJhdGlvbihpbnB1dCkpLnRvQmUoJzJkJyk7XG4gIH0pO1xuXG4gIGl0KCdkaXNwbGF5cyBtaWxsaXNlY29uZHMgaW4gZGVjaW1hbHMnLCAoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSAyICogT05FX01JTExJU0VDT05EICsgMzU3O1xuICAgIGV4cGVjdChmb3JtYXREdXJhdGlvbihpbnB1dCkpLnRvQmUoJzIuMzZtcycpO1xuICB9KTtcblxuICBpdCgnZGlzcGxheXMgc2Vjb25kcyBpbiBkZWNpbWFscycsICgpID0+IHtcbiAgICBjb25zdCBpbnB1dCA9IDIgKiBPTkVfU0VDT05EICsgMzU3ICogT05FX01JTExJU0VDT05EO1xuICAgIGV4cGVjdChmb3JtYXREdXJhdGlvbihpbnB1dCkpLnRvQmUoJzIuMzZzJyk7XG4gIH0pO1xuXG4gIGl0KCdkaXNwbGF5cyBtaW51dGVzIGluIHNwbGl0IHVuaXRzJywgKCkgPT4ge1xuICAgIGNvbnN0IGlucHV0ID0gMiAqIE9ORV9NSU5VVEUgKyAzMCAqIE9ORV9TRUNPTkQgKyA1NTUgKiBPTkVfTUlMTElTRUNPTkQ7XG4gICAgZXhwZWN0KGZvcm1hdER1cmF0aW9uKGlucHV0KSkudG9CZSgnMm0gMzFzJyk7XG4gIH0pO1xuXG4gIGl0KCdkaXNwbGF5cyBob3VycyBpbiBzcGxpdCB1bml0cycsICgpID0+IHtcbiAgICBjb25zdCBpbnB1dCA9IDIgKiBPTkVfSE9VUiArIDMwICogT05FX01JTlVURSArIDMwICogT05FX1NFQ09ORDtcbiAgICBleHBlY3QoZm9ybWF0RHVyYXRpb24oaW5wdXQpKS50b0JlKCcyaCAzMW0nKTtcbiAgfSk7XG5cbiAgaXQoJ2Rpc3BsYXlzIHRpbWVzIGxlc3MgdGhhbiBhIM68cycsICgpID0+IHtcbiAgICBjb25zdCBpbnB1dCA9IDAuMTtcbiAgICBleHBlY3QoZm9ybWF0RHVyYXRpb24oaW5wdXQpKS50b0JlKCcwLjHOvHMnKTtcbiAgfSk7XG5cbiAgaXQoJ2Rpc3BsYXlzIHRpbWVzIG9mIDAnLCAoKSA9PiB7XG4gICAgY29uc3QgaW5wdXQgPSAwO1xuICAgIGV4cGVjdChmb3JtYXREdXJhdGlvbihpbnB1dCkpLnRvQmUoJzDOvHMnKTtcbiAgfSk7XG59KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsY0FBYyxFQUFFQyxlQUFlLEVBQUVDLFVBQVUsRUFBRUMsVUFBVSxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sUUFBUSxRQUFRO0FBRW5HQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsWUFBTTtFQUMvQkMsRUFBRSxDQUFDLDZCQUE2QixFQUFFLFlBQU07SUFDdENDLE1BQU0sQ0FBQ1IsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUNTLElBQUksQ0FBQyxLQUFLLENBQUM7RUFDdkMsQ0FBQyxDQUFDO0VBRUZGLEVBQUUsQ0FBQyx1REFBdUQsRUFBRSxZQUFNO0lBQ2hFLElBQU1HLEtBQUssR0FBRyxFQUFFLEdBQUdMLE9BQU8sR0FBRyxFQUFFLEdBQUdELFFBQVEsR0FBRyxFQUFFLEdBQUdELFVBQVU7SUFDNURLLE1BQU0sQ0FBQ1IsY0FBYyxDQUFDVSxLQUFLLENBQUMsQ0FBQyxDQUFDRCxJQUFJLENBQUMsU0FBUyxDQUFDO0VBQy9DLENBQUMsQ0FBQztFQUVGRixFQUFFLENBQUMsNEJBQTRCLEVBQUUsWUFBTTtJQUNyQyxJQUFNRyxLQUFLLEdBQUcsQ0FBQyxHQUFHTCxPQUFPLEdBQUcsQ0FBQyxHQUFHRixVQUFVO0lBQzFDSyxNQUFNLENBQUNSLGNBQWMsQ0FBQ1UsS0FBSyxDQUFDLENBQUMsQ0FBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQztFQUMxQyxDQUFDLENBQUM7RUFFRkYsRUFBRSxDQUFDLG1DQUFtQyxFQUFFLFlBQU07SUFDNUMsSUFBTUcsS0FBSyxHQUFHLENBQUMsR0FBR1QsZUFBZSxHQUFHLEdBQUc7SUFDdkNPLE1BQU0sQ0FBQ1IsY0FBYyxDQUFDVSxLQUFLLENBQUMsQ0FBQyxDQUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDO0VBQzlDLENBQUMsQ0FBQztFQUVGRixFQUFFLENBQUMsOEJBQThCLEVBQUUsWUFBTTtJQUN2QyxJQUFNRyxLQUFLLEdBQUcsQ0FBQyxHQUFHUixVQUFVLEdBQUcsR0FBRyxHQUFHRCxlQUFlO0lBQ3BETyxNQUFNLENBQUNSLGNBQWMsQ0FBQ1UsS0FBSyxDQUFDLENBQUMsQ0FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQztFQUM3QyxDQUFDLENBQUM7RUFFRkYsRUFBRSxDQUFDLGlDQUFpQyxFQUFFLFlBQU07SUFDMUMsSUFBTUcsS0FBSyxHQUFHLENBQUMsR0FBR1AsVUFBVSxHQUFHLEVBQUUsR0FBR0QsVUFBVSxHQUFHLEdBQUcsR0FBR0QsZUFBZTtJQUN0RU8sTUFBTSxDQUFDUixjQUFjLENBQUNVLEtBQUssQ0FBQyxDQUFDLENBQUNELElBQUksQ0FBQyxRQUFRLENBQUM7RUFDOUMsQ0FBQyxDQUFDO0VBRUZGLEVBQUUsQ0FBQywrQkFBK0IsRUFBRSxZQUFNO0lBQ3hDLElBQU1HLEtBQUssR0FBRyxDQUFDLEdBQUdOLFFBQVEsR0FBRyxFQUFFLEdBQUdELFVBQVUsR0FBRyxFQUFFLEdBQUdELFVBQVU7SUFDOURNLE1BQU0sQ0FBQ1IsY0FBYyxDQUFDVSxLQUFLLENBQUMsQ0FBQyxDQUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDO0VBQzlDLENBQUMsQ0FBQztFQUVGRixFQUFFLENBQUMsK0JBQStCLEVBQUUsWUFBTTtJQUN4QyxJQUFNRyxLQUFLLEdBQUcsR0FBRztJQUNqQkYsTUFBTSxDQUFDUixjQUFjLENBQUNVLEtBQUssQ0FBQyxDQUFDLENBQUNELElBQUksQ0FBQyxPQUFPLENBQUM7RUFDN0MsQ0FBQyxDQUFDO0VBRUZGLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxZQUFNO0lBQzlCLElBQU1HLEtBQUssR0FBRyxDQUFDO0lBQ2ZGLE1BQU0sQ0FBQ1IsY0FBYyxDQUFDVSxLQUFLLENBQUMsQ0FBQyxDQUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDO0VBQzNDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==