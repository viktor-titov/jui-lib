// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import { round as _round, dropWhile as _dropWhile } from 'lodash';
import moment from 'moment-timezone';
import { toFloatPrecision } from './number';
var TODAY = 'Today';
var YESTERDAY = 'Yesterday';
export var STANDARD_DATE_FORMAT = 'YYYY-MM-DD';
export var STANDARD_TIME_FORMAT = 'HH:mm';
export var STANDARD_DATETIME_FORMAT = 'MMMM D YYYY, HH:mm:ss.SSS';
export var ONE_MILLISECOND = 1000;
export var ONE_SECOND = 1000 * ONE_MILLISECOND;
export var ONE_MINUTE = 60 * ONE_SECOND;
export var ONE_HOUR = 60 * ONE_MINUTE;
export var ONE_DAY = 24 * ONE_HOUR;
export var DEFAULT_MS_PRECISION = Math.log10(ONE_MILLISECOND);
var UNIT_STEPS = [{
  unit: 'd',
  microseconds: ONE_DAY,
  ofPrevious: 24
}, {
  unit: 'h',
  microseconds: ONE_HOUR,
  ofPrevious: 60
}, {
  unit: 'm',
  microseconds: ONE_MINUTE,
  ofPrevious: 60
}, {
  unit: 's',
  microseconds: ONE_SECOND,
  ofPrevious: 1000
}, {
  unit: 'ms',
  microseconds: ONE_MILLISECOND,
  ofPrevious: 1000
}, {
  unit: 'μs',
  microseconds: 1,
  ofPrevious: 1000
}];

/**
 * @param {number} timestamp
 * @param {number} initialTimestamp
 * @param {number} totalDuration
 * @returns {number} 0-100 percentage
 */
export function getPercentageOfDuration(duration, totalDuration) {
  return duration / totalDuration * 100;
}
var quantizeDuration = function quantizeDuration(duration, floatPrecision, conversionFactor) {
  return toFloatPrecision(duration / conversionFactor, floatPrecision) * conversionFactor;
};

/**
 * @param {number} duration (in microseconds)
 * @returns {string} formatted, unit-labelled string with time in milliseconds
 */
export function formatDate(duration) {
  return moment(duration / ONE_MILLISECOND).format(STANDARD_DATE_FORMAT);
}

/**
 * @param {number} duration (in microseconds)
 * @returns {string} formatted, unit-labelled string with time in milliseconds
 */
export function formatTime(duration) {
  return moment(duration / ONE_MILLISECOND).format(STANDARD_TIME_FORMAT);
}

/**
 * @param {number} duration (in microseconds)
 * @returns {string} formatted, unit-labelled string with time in milliseconds
 */
export function formatDatetime(duration) {
  return moment(duration / ONE_MILLISECOND).format(STANDARD_DATETIME_FORMAT);
}

/**
 * @param {number} duration (in microseconds)
 * @returns {string} formatted, unit-labelled string with time in milliseconds
 */
export function formatMillisecondTime(duration) {
  var targetDuration = quantizeDuration(duration, DEFAULT_MS_PRECISION, ONE_MILLISECOND);
  return moment.duration(targetDuration / ONE_MILLISECOND).asMilliseconds() + "ms";
}

/**
 * @param {number} duration (in microseconds)
 * @returns {string} formatted, unit-labelled string with time in seconds
 */
export function formatSecondTime(duration) {
  var targetDuration = quantizeDuration(duration, DEFAULT_MS_PRECISION, ONE_SECOND);
  return moment.duration(targetDuration / ONE_MILLISECOND).asSeconds() + "s";
}

/**
 * Humanizes the duration for display.
 *
 * Example:
 * 5000ms => 5s
 * 1000μs => 1ms
 * 183840s => 2d 3h
 *
 * @param {number} duration (in microseconds)
 * @return {string} formatted duration
 */
export function formatDuration(duration) {
  // Drop all units that are too large except the last one
  var _dropWhile2 = _dropWhile(UNIT_STEPS, function (_ref, index) {
      var microseconds = _ref.microseconds;
      return index < UNIT_STEPS.length - 1 && microseconds > duration;
    }),
    primaryUnit = _dropWhile2[0],
    secondaryUnit = _dropWhile2[1];
  if (primaryUnit.ofPrevious === 1000) {
    // If the unit is decimal based, display as a decimal
    return "" + _round(duration / primaryUnit.microseconds, 2) + primaryUnit.unit;
  }
  var primaryValue = Math.floor(duration / primaryUnit.microseconds);
  var primaryUnitString = "" + primaryValue + primaryUnit.unit;
  var secondaryValue = Math.round(duration / secondaryUnit.microseconds % primaryUnit.ofPrevious);
  var secondaryUnitString = "" + secondaryValue + secondaryUnit.unit;
  return secondaryValue === 0 ? primaryUnitString : primaryUnitString + " " + secondaryUnitString;
}
export function formatRelativeDate(value, fullMonthName) {
  if (fullMonthName === void 0) {
    fullMonthName = false;
  }
  var m = moment.isMoment(value) ? value : moment(value);
  var monthFormat = fullMonthName ? 'MMMM' : 'MMM';
  var dt = new Date();
  if (dt.getFullYear() !== m.year()) {
    return m.format(monthFormat + " D, YYYY");
  }
  var mMonth = m.month();
  var mDate = m.date();
  var date = dt.getDate();
  if (mMonth === dt.getMonth() && mDate === date) {
    return TODAY;
  }
  dt.setDate(date - 1);
  if (mMonth === dt.getMonth() && mDate === dt.getDate()) {
    return YESTERDAY;
  }
  return m.format(monthFormat + " D");
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,