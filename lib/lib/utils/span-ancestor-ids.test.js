import _extends from "@babel/runtime/helpers/extends";
// Copyright (c) 2018 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import spanAncestorIdsSpy from './span-ancestor-ids';
describe('spanAncestorIdsSpy', function () {
  var ownSpanID = 'ownSpanID';
  var firstParentSpanID = 'firstParentSpanID';
  var firstParentFirstGrandparentSpanID = 'firstParentFirstGrandparentSpanID';
  var firstParentSecondGrandparentSpanID = 'firstParentSecondGrandparentSpanID';
  var secondParentSpanID = 'secondParentSpanID';
  var rootSpanID = 'rootSpanID';
  var span = {
    references: [{
      span: {
        spanID: firstParentSpanID,
        references: [{
          span: {
            spanID: firstParentFirstGrandparentSpanID,
            references: [{
              span: {
                spanID: rootSpanID
              }
            }]
          },
          refType: 'not an ancestor ref type'
        }, {
          span: {
            spanID: firstParentSecondGrandparentSpanID,
            references: [{
              span: {
                spanID: rootSpanID
              },
              refType: 'FOLLOWS_FROM'
            }]
          },
          refType: 'CHILD_OF'
        }]
      },
      refType: 'CHILD_OF'
    }, {
      span: {
        spanID: secondParentSpanID
      },
      refType: 'CHILD_OF'
    }],
    spanID: ownSpanID
  };
  var expectedAncestorIds = [firstParentSpanID, firstParentSecondGrandparentSpanID, rootSpanID];
  it('returns an empty array if given falsy span', function () {
    expect(spanAncestorIdsSpy(null)).toEqual([]);
  });
  it('returns an empty array if span has no references', function () {
    var spanWithoutReferences = {
      spanID: 'parentlessSpanID',
      references: []
    };
    expect(spanAncestorIdsSpy(spanWithoutReferences)).toEqual([]);
  });
  it('returns all unique spanIDs from first valid CHILD_OF or FOLLOWS_FROM reference up to the root span', function () {
    expect(spanAncestorIdsSpy(span)).toEqual(expectedAncestorIds);
  });
  it('ignores references without a span', function () {
    var spanWithSomeEmptyReferences = _extends({}, span, {
      references: [{
        refType: 'CHILD_OF'
      }, {
        refType: 'FOLLOWS_FROM',
        span: {}
      }].concat(span.references)
    });
    expect(spanAncestorIdsSpy(spanWithSomeEmptyReferences)).toEqual(expectedAncestorIds);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzcGFuQW5jZXN0b3JJZHNTcHkiLCJkZXNjcmliZSIsIm93blNwYW5JRCIsImZpcnN0UGFyZW50U3BhbklEIiwiZmlyc3RQYXJlbnRGaXJzdEdyYW5kcGFyZW50U3BhbklEIiwiZmlyc3RQYXJlbnRTZWNvbmRHcmFuZHBhcmVudFNwYW5JRCIsInNlY29uZFBhcmVudFNwYW5JRCIsInJvb3RTcGFuSUQiLCJzcGFuIiwicmVmZXJlbmNlcyIsInNwYW5JRCIsInJlZlR5cGUiLCJleHBlY3RlZEFuY2VzdG9ySWRzIiwiaXQiLCJleHBlY3QiLCJ0b0VxdWFsIiwic3BhbldpdGhvdXRSZWZlcmVuY2VzIiwic3BhbldpdGhTb21lRW1wdHlSZWZlcmVuY2VzIiwiX2V4dGVuZHMiLCJjb25jYXQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3V0aWxzL3NwYW4tYW5jZXN0b3ItaWRzLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE4IFViZXIgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IFRyYWNlU3BhbiB9IGZyb20gJy4uL3R5cGVzL3RyYWNlJztcblxuaW1wb3J0IHNwYW5BbmNlc3Rvcklkc1NweSBmcm9tICcuL3NwYW4tYW5jZXN0b3ItaWRzJztcblxuZGVzY3JpYmUoJ3NwYW5BbmNlc3Rvcklkc1NweScsICgpID0+IHtcbiAgY29uc3Qgb3duU3BhbklEID0gJ293blNwYW5JRCc7XG4gIGNvbnN0IGZpcnN0UGFyZW50U3BhbklEID0gJ2ZpcnN0UGFyZW50U3BhbklEJztcbiAgY29uc3QgZmlyc3RQYXJlbnRGaXJzdEdyYW5kcGFyZW50U3BhbklEID0gJ2ZpcnN0UGFyZW50Rmlyc3RHcmFuZHBhcmVudFNwYW5JRCc7XG4gIGNvbnN0IGZpcnN0UGFyZW50U2Vjb25kR3JhbmRwYXJlbnRTcGFuSUQgPSAnZmlyc3RQYXJlbnRTZWNvbmRHcmFuZHBhcmVudFNwYW5JRCc7XG4gIGNvbnN0IHNlY29uZFBhcmVudFNwYW5JRCA9ICdzZWNvbmRQYXJlbnRTcGFuSUQnO1xuICBjb25zdCByb290U3BhbklEID0gJ3Jvb3RTcGFuSUQnO1xuICBjb25zdCBzcGFuID0ge1xuICAgIHJlZmVyZW5jZXM6IFtcbiAgICAgIHtcbiAgICAgICAgc3Bhbjoge1xuICAgICAgICAgIHNwYW5JRDogZmlyc3RQYXJlbnRTcGFuSUQsXG4gICAgICAgICAgcmVmZXJlbmNlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzcGFuOiB7XG4gICAgICAgICAgICAgICAgc3BhbklEOiBmaXJzdFBhcmVudEZpcnN0R3JhbmRwYXJlbnRTcGFuSUQsXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlczogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzcGFuOiB7XG4gICAgICAgICAgICAgICAgICAgICAgc3BhbklEOiByb290U3BhbklELFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICByZWZUeXBlOiAnbm90IGFuIGFuY2VzdG9yIHJlZiB0eXBlJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHNwYW46IHtcbiAgICAgICAgICAgICAgICBzcGFuSUQ6IGZpcnN0UGFyZW50U2Vjb25kR3JhbmRwYXJlbnRTcGFuSUQsXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlczogW1xuICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzcGFuOiB7XG4gICAgICAgICAgICAgICAgICAgICAgc3BhbklEOiByb290U3BhbklELFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICByZWZUeXBlOiAnRk9MTE9XU19GUk9NJyxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgcmVmVHlwZTogJ0NISUxEX09GJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSxcbiAgICAgICAgfSxcbiAgICAgICAgcmVmVHlwZTogJ0NISUxEX09GJyxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHNwYW46IHtcbiAgICAgICAgICBzcGFuSUQ6IHNlY29uZFBhcmVudFNwYW5JRCxcbiAgICAgICAgfSxcbiAgICAgICAgcmVmVHlwZTogJ0NISUxEX09GJyxcbiAgICAgIH0sXG4gICAgXSxcbiAgICBzcGFuSUQ6IG93blNwYW5JRCxcbiAgfTtcbiAgY29uc3QgZXhwZWN0ZWRBbmNlc3RvcklkcyA9IFtmaXJzdFBhcmVudFNwYW5JRCwgZmlyc3RQYXJlbnRTZWNvbmRHcmFuZHBhcmVudFNwYW5JRCwgcm9vdFNwYW5JRF07XG5cbiAgaXQoJ3JldHVybnMgYW4gZW1wdHkgYXJyYXkgaWYgZ2l2ZW4gZmFsc3kgc3BhbicsICgpID0+IHtcbiAgICBleHBlY3Qoc3BhbkFuY2VzdG9ySWRzU3B5KG51bGwpKS50b0VxdWFsKFtdKTtcbiAgfSk7XG5cbiAgaXQoJ3JldHVybnMgYW4gZW1wdHkgYXJyYXkgaWYgc3BhbiBoYXMgbm8gcmVmZXJlbmNlcycsICgpID0+IHtcbiAgICBjb25zdCBzcGFuV2l0aG91dFJlZmVyZW5jZXMgPSB7XG4gICAgICBzcGFuSUQ6ICdwYXJlbnRsZXNzU3BhbklEJyxcbiAgICAgIHJlZmVyZW5jZXM6IFtdLFxuICAgIH07XG5cbiAgICBleHBlY3Qoc3BhbkFuY2VzdG9ySWRzU3B5KHNwYW5XaXRob3V0UmVmZXJlbmNlcyBhcyB1bmtub3duIGFzIFRyYWNlU3BhbikpLnRvRXF1YWwoW10pO1xuICB9KTtcblxuICBpdCgncmV0dXJucyBhbGwgdW5pcXVlIHNwYW5JRHMgZnJvbSBmaXJzdCB2YWxpZCBDSElMRF9PRiBvciBGT0xMT1dTX0ZST00gcmVmZXJlbmNlIHVwIHRvIHRoZSByb290IHNwYW4nLCAoKSA9PiB7XG4gICAgZXhwZWN0KHNwYW5BbmNlc3Rvcklkc1NweShzcGFuIGFzIFRyYWNlU3BhbikpLnRvRXF1YWwoZXhwZWN0ZWRBbmNlc3Rvcklkcyk7XG4gIH0pO1xuXG4gIGl0KCdpZ25vcmVzIHJlZmVyZW5jZXMgd2l0aG91dCBhIHNwYW4nLCAoKSA9PiB7XG4gICAgY29uc3Qgc3BhbldpdGhTb21lRW1wdHlSZWZlcmVuY2VzID0ge1xuICAgICAgLi4uc3BhbixcbiAgICAgIHJlZmVyZW5jZXM6IFt7IHJlZlR5cGU6ICdDSElMRF9PRicgfSwgeyByZWZUeXBlOiAnRk9MTE9XU19GUk9NJywgc3Bhbjoge30gfSwgLi4uc3Bhbi5yZWZlcmVuY2VzXSxcbiAgICB9O1xuICAgIGV4cGVjdChzcGFuQW5jZXN0b3JJZHNTcHkoc3BhbldpdGhTb21lRW1wdHlSZWZlcmVuY2VzIGFzIFRyYWNlU3BhbikpLnRvRXF1YWwoZXhwZWN0ZWRBbmNlc3Rvcklkcyk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxPQUFPQSxrQkFBa0IsTUFBTSxxQkFBcUI7QUFFcERDLFFBQVEsQ0FBQyxvQkFBb0IsRUFBRSxZQUFNO0VBQ25DLElBQU1DLFNBQVMsR0FBRyxXQUFXO0VBQzdCLElBQU1DLGlCQUFpQixHQUFHLG1CQUFtQjtFQUM3QyxJQUFNQyxpQ0FBaUMsR0FBRyxtQ0FBbUM7RUFDN0UsSUFBTUMsa0NBQWtDLEdBQUcsb0NBQW9DO0VBQy9FLElBQU1DLGtCQUFrQixHQUFHLG9CQUFvQjtFQUMvQyxJQUFNQyxVQUFVLEdBQUcsWUFBWTtFQUMvQixJQUFNQyxJQUFJLEdBQUc7SUFDWEMsVUFBVSxFQUFFLENBQ1Y7TUFDRUQsSUFBSSxFQUFFO1FBQ0pFLE1BQU0sRUFBRVAsaUJBQWlCO1FBQ3pCTSxVQUFVLEVBQUUsQ0FDVjtVQUNFRCxJQUFJLEVBQUU7WUFDSkUsTUFBTSxFQUFFTixpQ0FBaUM7WUFDekNLLFVBQVUsRUFBRSxDQUNWO2NBQ0VELElBQUksRUFBRTtnQkFDSkUsTUFBTSxFQUFFSDtjQUNWO1lBQ0YsQ0FBQztVQUVMLENBQUM7VUFDREksT0FBTyxFQUFFO1FBQ1gsQ0FBQyxFQUNEO1VBQ0VILElBQUksRUFBRTtZQUNKRSxNQUFNLEVBQUVMLGtDQUFrQztZQUMxQ0ksVUFBVSxFQUFFLENBQ1Y7Y0FDRUQsSUFBSSxFQUFFO2dCQUNKRSxNQUFNLEVBQUVIO2NBQ1YsQ0FBQztjQUNESSxPQUFPLEVBQUU7WUFDWCxDQUFDO1VBRUwsQ0FBQztVQUNEQSxPQUFPLEVBQUU7UUFDWCxDQUFDO01BRUwsQ0FBQztNQUNEQSxPQUFPLEVBQUU7SUFDWCxDQUFDLEVBQ0Q7TUFDRUgsSUFBSSxFQUFFO1FBQ0pFLE1BQU0sRUFBRUo7TUFDVixDQUFDO01BQ0RLLE9BQU8sRUFBRTtJQUNYLENBQUMsQ0FDRjtJQUNERCxNQUFNLEVBQUVSO0VBQ1YsQ0FBQztFQUNELElBQU1VLG1CQUFtQixHQUFHLENBQUNULGlCQUFpQixFQUFFRSxrQ0FBa0MsRUFBRUUsVUFBVSxDQUFDO0VBRS9GTSxFQUFFLENBQUMsNENBQTRDLEVBQUUsWUFBTTtJQUNyREMsTUFBTSxDQUFDZCxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDZSxPQUFPLENBQUMsRUFBRSxDQUFDO0VBQzlDLENBQUMsQ0FBQztFQUVGRixFQUFFLENBQUMsa0RBQWtELEVBQUUsWUFBTTtJQUMzRCxJQUFNRyxxQkFBcUIsR0FBRztNQUM1Qk4sTUFBTSxFQUFFLGtCQUFrQjtNQUMxQkQsVUFBVSxFQUFFO0lBQ2QsQ0FBQztJQUVESyxNQUFNLENBQUNkLGtCQUFrQixDQUFDZ0IscUJBQTZDLENBQUMsQ0FBQyxDQUFDRCxPQUFPLENBQUMsRUFBRSxDQUFDO0VBQ3ZGLENBQUMsQ0FBQztFQUVGRixFQUFFLENBQUMsb0dBQW9HLEVBQUUsWUFBTTtJQUM3R0MsTUFBTSxDQUFDZCxrQkFBa0IsQ0FBQ1EsSUFBaUIsQ0FBQyxDQUFDLENBQUNPLE9BQU8sQ0FBQ0gsbUJBQW1CLENBQUM7RUFDNUUsQ0FBQyxDQUFDO0VBRUZDLEVBQUUsQ0FBQyxtQ0FBbUMsRUFBRSxZQUFNO0lBQzVDLElBQU1JLDJCQUEyQixHQUFBQyxRQUFBLEtBQzVCVixJQUFJO01BQ1BDLFVBQVUsR0FBRztRQUFFRSxPQUFPLEVBQUU7TUFBVyxDQUFDLEVBQUU7UUFBRUEsT0FBTyxFQUFFLGNBQWM7UUFBRUgsSUFBSSxFQUFFLENBQUM7TUFBRSxDQUFDLEVBQUFXLE1BQUEsQ0FBS1gsSUFBSSxDQUFDQyxVQUFVO0lBQUMsRUFDakc7SUFDREssTUFBTSxDQUFDZCxrQkFBa0IsQ0FBQ2lCLDJCQUF3QyxDQUFDLENBQUMsQ0FBQ0YsT0FBTyxDQUFDSCxtQkFBbUIsQ0FBQztFQUNuRyxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=