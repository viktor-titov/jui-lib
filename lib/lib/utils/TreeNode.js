import _createClass from "@babel/runtime/helpers/createClass";
// Copyright (c) 2017 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var TreeNode = /*#__PURE__*/function () {
  function TreeNode(value, children) {
    if (children === void 0) {
      children = [];
    }
    this.value = value;
    this.children = children;
  }
  TreeNode.iterFunction = function iterFunction(fn, depth) {
    if (depth === void 0) {
      depth = 0;
    }
    return function (node) {
      return fn(node.value, node, depth);
    };
  };
  TreeNode.searchFunction = function searchFunction(search) {
    if (typeof search === 'function') {
      return search;
    }
    return function (value, node) {
      return search instanceof TreeNode ? node === search : value === search;
    };
  };
  var _proto = TreeNode.prototype;
  _proto.addChild = function addChild(child) {
    var _this$children;
    (_this$children = this.children) == null || _this$children.push(child instanceof TreeNode ? child : new TreeNode(child));
    return this;
  };
  _proto.find = function find(search) {
    var searchFn = TreeNode.iterFunction(TreeNode.searchFunction(search));
    if (searchFn(this)) {
      return this;
    }
    for (var i = 0; i < this.children.length; i++) {
      var result = this.children[i].find(search);
      if (result) {
        return result;
      }
    }
    return null;
  };
  _proto.getPath = function getPath(search) {
    var searchFn = TreeNode.iterFunction(TreeNode.searchFunction(search));
    var findPath = function findPath(currentNode, currentPath) {
      // skip if we already found the result
      var attempt = currentPath.concat([currentNode]);
      // base case: return the array when there is a match
      if (searchFn(currentNode)) {
        return attempt;
      }
      for (var i = 0; i < currentNode.children.length; i++) {
        var child = currentNode.children[i];
        var match = findPath(child, attempt);
        if (match) {
          return match;
        }
      }
      return null;
    };
    return findPath(this, []);
  };
  _proto.walk = function walk(fn, depth) {
    if (depth === void 0) {
      depth = 0;
    }
    var nodeStack = [];
    var actualDepth = depth;
    nodeStack.push({
      node: this,
      depth: actualDepth
    });
    while (nodeStack.length) {
      var popped = nodeStack.pop();
      if (popped) {
        var _node = popped.node,
          nodeDepth = popped.depth;
        fn(_node.value, _node, nodeDepth);
        actualDepth = (nodeDepth || 0) + 1;
        var i = _node.children.length - 1;
        while (i >= 0) {
          nodeStack.push({
            node: _node.children[i],
            depth: actualDepth
          });
          i--;
        }
      }
    }
  };
  return _createClass(TreeNode, [{
    key: "depth",
    get: function get() {
      var _this$children2;
      return (_this$children2 = this.children) == null ? void 0 : _this$children2.reduce(function (depth, child) {
        return Math.max(child.depth + 1, depth);
      }, 1);
    }
  }, {
    key: "size",
    get: function get() {
      var i = 0;
      this.walk(function () {
        return i++;
      });
      return i;
    }
  }]);
}();
export { TreeNode as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,