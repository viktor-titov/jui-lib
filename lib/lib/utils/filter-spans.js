// Copyright (c) 2019 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

export default function filterSpans(textFilter, spans) {
  if (!spans) {
    return undefined;
  }

  // if a span field includes at least one filter in includeFilters, the span is a match
  var includeFilters = [];

  // values with keys that include text in any one of the excludeKeys will be ignored
  var excludeKeys = [];

  // split textFilter by whitespace, remove empty strings, and extract includeFilters and excludeKeys
  textFilter.split(/\s+/).filter(Boolean).forEach(function (w) {
    if (w[0] === '-') {
      excludeKeys.push(w.slice(1).toLowerCase());
    } else {
      includeFilters.push(w.toLowerCase());
    }
  });
  var isTextInFilters = function isTextInFilters(filters, text) {
    return filters.some(function (filter) {
      return text.toLowerCase().includes(filter);
    });
  };
  var isTextInKeyValues = function isTextInKeyValues(kvs) {
    return kvs ? kvs.some(function (kv) {
      // ignore checking key and value for a match if key is in excludeKeys
      if (isTextInFilters(excludeKeys, kv.key)) {
        return false;
      }
      // match if key or value matches an item in includeFilters
      return isTextInFilters(includeFilters, kv.key) || isTextInFilters(includeFilters, kv.value.toString());
    }) : false;
  };
  var isSpanAMatch = function isSpanAMatch(span) {
    return isTextInFilters(includeFilters, span.operationName) || isTextInFilters(includeFilters, span.process.serviceName) || isTextInKeyValues(span.tags) || span.logs !== null && span.logs.some(function (log) {
      return isTextInKeyValues(log.fields);
    }) || isTextInKeyValues(span.process.tags) || includeFilters.some(function (filter) {
      return filter === span.spanID;
    });
  };

  // declare as const because need to disambiguate the type
  var rv = new Set(spans.filter(isSpanAMatch).map(function (span) {
    return span.spanID;
  }));
  return rv;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmaWx0ZXJTcGFucyIsInRleHRGaWx0ZXIiLCJzcGFucyIsInVuZGVmaW5lZCIsImluY2x1ZGVGaWx0ZXJzIiwiZXhjbHVkZUtleXMiLCJzcGxpdCIsImZpbHRlciIsIkJvb2xlYW4iLCJmb3JFYWNoIiwidyIsInB1c2giLCJzbGljZSIsInRvTG93ZXJDYXNlIiwiaXNUZXh0SW5GaWx0ZXJzIiwiZmlsdGVycyIsInRleHQiLCJzb21lIiwiaW5jbHVkZXMiLCJpc1RleHRJbktleVZhbHVlcyIsImt2cyIsImt2Iiwia2V5IiwidmFsdWUiLCJ0b1N0cmluZyIsImlzU3BhbkFNYXRjaCIsInNwYW4iLCJvcGVyYXRpb25OYW1lIiwicHJvY2VzcyIsInNlcnZpY2VOYW1lIiwidGFncyIsImxvZ3MiLCJsb2ciLCJmaWVsZHMiLCJzcGFuSUQiLCJydiIsIlNldCIsIm1hcCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdXRpbHMvZmlsdGVyLXNwYW5zLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTkgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgVE5pbCB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCB7IFRyYWNlS2V5VmFsdWVQYWlyLCBUcmFjZVNwYW4gfSBmcm9tICcuLi90eXBlcy90cmFjZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbHRlclNwYW5zKHRleHRGaWx0ZXI6IHN0cmluZywgc3BhbnM6IFRyYWNlU3BhbltdIHwgVE5pbCkge1xuICBpZiAoIXNwYW5zKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIGlmIGEgc3BhbiBmaWVsZCBpbmNsdWRlcyBhdCBsZWFzdCBvbmUgZmlsdGVyIGluIGluY2x1ZGVGaWx0ZXJzLCB0aGUgc3BhbiBpcyBhIG1hdGNoXG4gIGNvbnN0IGluY2x1ZGVGaWx0ZXJzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIC8vIHZhbHVlcyB3aXRoIGtleXMgdGhhdCBpbmNsdWRlIHRleHQgaW4gYW55IG9uZSBvZiB0aGUgZXhjbHVkZUtleXMgd2lsbCBiZSBpZ25vcmVkXG4gIGNvbnN0IGV4Y2x1ZGVLZXlzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIC8vIHNwbGl0IHRleHRGaWx0ZXIgYnkgd2hpdGVzcGFjZSwgcmVtb3ZlIGVtcHR5IHN0cmluZ3MsIGFuZCBleHRyYWN0IGluY2x1ZGVGaWx0ZXJzIGFuZCBleGNsdWRlS2V5c1xuICB0ZXh0RmlsdGVyXG4gICAgLnNwbGl0KC9cXHMrLylcbiAgICAuZmlsdGVyKEJvb2xlYW4pXG4gICAgLmZvckVhY2goKHcpID0+IHtcbiAgICAgIGlmICh3WzBdID09PSAnLScpIHtcbiAgICAgICAgZXhjbHVkZUtleXMucHVzaCh3LnNsaWNlKDEpLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5jbHVkZUZpbHRlcnMucHVzaCh3LnRvTG93ZXJDYXNlKCkpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIGNvbnN0IGlzVGV4dEluRmlsdGVycyA9IChmaWx0ZXJzOiBzdHJpbmdbXSwgdGV4dDogc3RyaW5nKSA9PlxuICAgIGZpbHRlcnMuc29tZSgoZmlsdGVyKSA9PiB0ZXh0LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoZmlsdGVyKSk7XG5cbiAgY29uc3QgaXNUZXh0SW5LZXlWYWx1ZXMgPSAoa3ZzOiBUcmFjZUtleVZhbHVlUGFpcltdKSA9PlxuICAgIGt2c1xuICAgICAgPyBrdnMuc29tZSgoa3YpID0+IHtcbiAgICAgICAgICAvLyBpZ25vcmUgY2hlY2tpbmcga2V5IGFuZCB2YWx1ZSBmb3IgYSBtYXRjaCBpZiBrZXkgaXMgaW4gZXhjbHVkZUtleXNcbiAgICAgICAgICBpZiAoaXNUZXh0SW5GaWx0ZXJzKGV4Y2x1ZGVLZXlzLCBrdi5rZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIG1hdGNoIGlmIGtleSBvciB2YWx1ZSBtYXRjaGVzIGFuIGl0ZW0gaW4gaW5jbHVkZUZpbHRlcnNcbiAgICAgICAgICByZXR1cm4gaXNUZXh0SW5GaWx0ZXJzKGluY2x1ZGVGaWx0ZXJzLCBrdi5rZXkpIHx8IGlzVGV4dEluRmlsdGVycyhpbmNsdWRlRmlsdGVycywga3YudmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICAgIH0pXG4gICAgICA6IGZhbHNlO1xuXG4gIGNvbnN0IGlzU3BhbkFNYXRjaCA9IChzcGFuOiBUcmFjZVNwYW4pID0+XG4gICAgaXNUZXh0SW5GaWx0ZXJzKGluY2x1ZGVGaWx0ZXJzLCBzcGFuLm9wZXJhdGlvbk5hbWUpIHx8XG4gICAgaXNUZXh0SW5GaWx0ZXJzKGluY2x1ZGVGaWx0ZXJzLCBzcGFuLnByb2Nlc3Muc2VydmljZU5hbWUpIHx8XG4gICAgaXNUZXh0SW5LZXlWYWx1ZXMoc3Bhbi50YWdzKSB8fFxuICAgIChzcGFuLmxvZ3MgIT09IG51bGwgJiYgc3Bhbi5sb2dzLnNvbWUoKGxvZykgPT4gaXNUZXh0SW5LZXlWYWx1ZXMobG9nLmZpZWxkcykpKSB8fFxuICAgIGlzVGV4dEluS2V5VmFsdWVzKHNwYW4ucHJvY2Vzcy50YWdzKSB8fFxuICAgIGluY2x1ZGVGaWx0ZXJzLnNvbWUoKGZpbHRlcikgPT4gZmlsdGVyID09PSBzcGFuLnNwYW5JRCk7XG5cbiAgLy8gZGVjbGFyZSBhcyBjb25zdCBiZWNhdXNlIG5lZWQgdG8gZGlzYW1iaWd1YXRlIHRoZSB0eXBlXG4gIGNvbnN0IHJ2OiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQoc3BhbnMuZmlsdGVyKGlzU3BhbkFNYXRjaCkubWFwKChzcGFuOiBUcmFjZVNwYW4pID0+IHNwYW4uc3BhbklEKSk7XG4gIHJldHVybiBydjtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBS0EsZUFBZSxTQUFTQSxXQUFXQSxDQUFDQyxVQUFrQixFQUFFQyxLQUF5QixFQUFFO0VBQ2pGLElBQUksQ0FBQ0EsS0FBSyxFQUFFO0lBQ1YsT0FBT0MsU0FBUztFQUNsQjs7RUFFQTtFQUNBLElBQU1DLGNBQXdCLEdBQUcsRUFBRTs7RUFFbkM7RUFDQSxJQUFNQyxXQUFxQixHQUFHLEVBQUU7O0VBRWhDO0VBQ0FKLFVBQVUsQ0FDUEssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUNaQyxNQUFNLENBQUNDLE9BQU8sQ0FBQyxDQUNmQyxPQUFPLENBQUMsVUFBQ0MsQ0FBQyxFQUFLO0lBQ2QsSUFBSUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtNQUNoQkwsV0FBVyxDQUFDTSxJQUFJLENBQUNELENBQUMsQ0FBQ0UsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDQyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQzVDLENBQUMsTUFBTTtNQUNMVCxjQUFjLENBQUNPLElBQUksQ0FBQ0QsQ0FBQyxDQUFDRyxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ3RDO0VBQ0YsQ0FBQyxDQUFDO0VBRUosSUFBTUMsZUFBZSxHQUFHLFNBQWxCQSxlQUFlQSxDQUFJQyxPQUFpQixFQUFFQyxJQUFZO0lBQUEsT0FDdERELE9BQU8sQ0FBQ0UsSUFBSSxDQUFDLFVBQUNWLE1BQU07TUFBQSxPQUFLUyxJQUFJLENBQUNILFdBQVcsQ0FBQyxDQUFDLENBQUNLLFFBQVEsQ0FBQ1gsTUFBTSxDQUFDO0lBQUEsRUFBQztFQUFBO0VBRS9ELElBQU1ZLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBaUJBLENBQUlDLEdBQXdCO0lBQUEsT0FDakRBLEdBQUcsR0FDQ0EsR0FBRyxDQUFDSCxJQUFJLENBQUMsVUFBQ0ksRUFBRSxFQUFLO01BQ2Y7TUFDQSxJQUFJUCxlQUFlLENBQUNULFdBQVcsRUFBRWdCLEVBQUUsQ0FBQ0MsR0FBRyxDQUFDLEVBQUU7UUFDeEMsT0FBTyxLQUFLO01BQ2Q7TUFDQTtNQUNBLE9BQU9SLGVBQWUsQ0FBQ1YsY0FBYyxFQUFFaUIsRUFBRSxDQUFDQyxHQUFHLENBQUMsSUFBSVIsZUFBZSxDQUFDVixjQUFjLEVBQUVpQixFQUFFLENBQUNFLEtBQUssQ0FBQ0MsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUN4RyxDQUFDLENBQUMsR0FDRixLQUFLO0VBQUE7RUFFWCxJQUFNQyxZQUFZLEdBQUcsU0FBZkEsWUFBWUEsQ0FBSUMsSUFBZTtJQUFBLE9BQ25DWixlQUFlLENBQUNWLGNBQWMsRUFBRXNCLElBQUksQ0FBQ0MsYUFBYSxDQUFDLElBQ25EYixlQUFlLENBQUNWLGNBQWMsRUFBRXNCLElBQUksQ0FBQ0UsT0FBTyxDQUFDQyxXQUFXLENBQUMsSUFDekRWLGlCQUFpQixDQUFDTyxJQUFJLENBQUNJLElBQUksQ0FBQyxJQUMzQkosSUFBSSxDQUFDSyxJQUFJLEtBQUssSUFBSSxJQUFJTCxJQUFJLENBQUNLLElBQUksQ0FBQ2QsSUFBSSxDQUFDLFVBQUNlLEdBQUc7TUFBQSxPQUFLYixpQkFBaUIsQ0FBQ2EsR0FBRyxDQUFDQyxNQUFNLENBQUM7SUFBQSxFQUFFLElBQzlFZCxpQkFBaUIsQ0FBQ08sSUFBSSxDQUFDRSxPQUFPLENBQUNFLElBQUksQ0FBQyxJQUNwQzFCLGNBQWMsQ0FBQ2EsSUFBSSxDQUFDLFVBQUNWLE1BQU07TUFBQSxPQUFLQSxNQUFNLEtBQUttQixJQUFJLENBQUNRLE1BQU07SUFBQSxFQUFDO0VBQUE7O0VBRXpEO0VBQ0EsSUFBTUMsRUFBZSxHQUFHLElBQUlDLEdBQUcsQ0FBQ2xDLEtBQUssQ0FBQ0ssTUFBTSxDQUFDa0IsWUFBWSxDQUFDLENBQUNZLEdBQUcsQ0FBQyxVQUFDWCxJQUFlO0lBQUEsT0FBS0EsSUFBSSxDQUFDUSxNQUFNO0VBQUEsRUFBQyxDQUFDO0VBQ2pHLE9BQU9DLEVBQUU7QUFDWCIsImlnbm9yZUxpc3QiOltdfQ==